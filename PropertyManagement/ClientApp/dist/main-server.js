!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="dist/",n.w={},n(n.s=57)}([function(e,t,n){e.exports=n(1)(3)},function(e,t){e.exports=require("./vendor")},function(e,t,n){"use strict";var r=n(44),i=r,o=n(43).isApiWritable;t.NAMESPACE={HTML:"http://www.w3.org/1999/xhtml",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/",MATHML:"http://www.w3.org/1998/Math/MathML",SVG:"http://www.w3.org/2000/svg",XLINK:"http://www.w3.org/1999/xlink"},t.IndexSizeError=function(){throw new r(i.INDEX_SIZE_ERR)},t.HierarchyRequestError=function(){throw new r(i.HIERARCHY_REQUEST_ERR)},t.WrongDocumentError=function(){throw new r(i.WRONG_DOCUMENT_ERR)},t.InvalidCharacterError=function(){throw new r(i.INVALID_CHARACTER_ERR)},t.NoModificationAllowedError=function(){throw new r(i.NO_MODIFICATION_ALLOWED_ERR)},t.NotFoundError=function(){throw new r(i.NOT_FOUND_ERR)},t.NotSupportedError=function(){throw new r(i.NOT_SUPPORTED_ERR)},t.InvalidStateError=function(){throw new r(i.INVALID_STATE_ERR)},t.SyntaxError=function(){throw new r(i.SYNTAX_ERR)},t.InvalidModificationError=function(){throw new r(i.INVALID_MODIFICATION_ERR)},t.NamespaceError=function(){throw new r(i.NAMESPACE_ERR)},t.InvalidAccessError=function(){throw new r(i.INVALID_ACCESS_ERR)},t.TypeMismatchError=function(){throw new r(i.TYPE_MISMATCH_ERR)},t.SecurityError=function(){throw new r(i.SECURITY_ERR)},t.NetworkError=function(){throw new r(i.NETWORK_ERR)},t.AbortError=function(){throw new r(i.ABORT_ERR)},t.UrlMismatchError=function(){throw new r(i.URL_MISMATCH_ERR)},t.QuotaExceededError=function(){throw new r(i.QUOTA_EXCEEDED_ERR)},t.TimeoutError=function(){throw new r(i.TIMEOUT_ERR)},t.InvalidNodeTypeError=function(){throw new r(i.INVALID_NODE_TYPE_ERR)},t.DataCloneError=function(){throw new r(i.DATA_CLONE_ERR)},t.nyi=function(){throw new Error("NotYetImplemented")},t.assert=function(e,t){if(!e)throw new Error("Assertion failed: "+(t||"")+"\n"+(new Error).stack)},t.expose=function(e,t){for(var n in e)Object.defineProperty(t.prototype,n,{value:e[n],writable:o})},t.merge=function(e,t){for(var n in t)e[n]=t[n]},t.documentOrder=function(e,t){return 3-(6&e.compareDocumentPosition(t))},t.toASCIILowerCase=function(e){return e.replace(/[A-Z]+/g,function(e){return e.toLowerCase()})}},function(e,t,n){"use strict";e.exports=a;var r=n(47),i=n(2),o=i.NAMESPACE;function a(){}var s=a.ELEMENT_NODE=1,c=a.ATTRIBUTE_NODE=2,l=a.TEXT_NODE=3,u=a.CDATA_SECTION_NODE=4,p=a.ENTITY_REFERENCE_NODE=5,h=a.ENTITY_NODE=6,d=a.PROCESSING_INSTRUCTION_NODE=7,f=a.COMMENT_NODE=8,g=a.DOCUMENT_NODE=9,m=a.DOCUMENT_TYPE_NODE=10,y=a.DOCUMENT_FRAGMENT_NODE=11,b=a.NOTATION_NODE=12,v=a.DOCUMENT_POSITION_DISCONNECTED=1,_=a.DOCUMENT_POSITION_PRECEDING=2,w=a.DOCUMENT_POSITION_FOLLOWING=4,E=a.DOCUMENT_POSITION_CONTAINS=8,T=a.DOCUMENT_POSITION_CONTAINED_BY=16,k=a.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC=32,N={STYLE:!0,SCRIPT:!0,XMP:!0,IFRAME:!0,NOEMBED:!0,NOFRAMES:!0,PLAINTEXT:!0},S={area:!0,base:!0,basefont:!0,bgsound:!0,br:!0,col:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},R={};function C(e){return e.replace(/[&<>\u00A0]/g,function(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case" ":return"&nbsp;"}})}function x(e){var t=/[&"\u00A0]/g;return t.test(e)?e.replace(t,function(e){switch(e){case"&":return"&amp;";case'"':return"&quot;";case" ":return"&nbsp;"}}):e}function O(e){var t=e.namespaceURI;return t?t===o.XML?"xml:"+e.localName:t===o.XLINK?"xlink:"+e.localName:t===o.XMLNS?"xmlns"===e.localName?"xmlns":"xmlns:"+e.localName:e.name:e.localName}a.prototype=Object.create(r.prototype,{parentNode:{value:null,writable:!0},baseURI:{get:i.nyi},parentElement:{get:function(){return this.parentNode&&this.parentNode.nodeType===s?this.parentNode:null}},hasChildNodes:{value:function(){return this.childNodes.length>0}},firstChild:{get:function(){return 0===this.childNodes.length?null:this.childNodes[0]}},lastChild:{get:function(){return 0===this.childNodes.length?null:this.childNodes[this.childNodes.length-1]}},previousSibling:{get:function(){if(!this.parentNode)return null;var e=this.parentNode.childNodes,t=this.index;return 0===t?null:e[t-1]}},nextSibling:{get:function(){if(!this.parentNode)return null;var e=this.parentNode.childNodes,t=this.index;return t+1===e.length?null:e[t+1]}},_countChildrenOfType:{value:function(e){var t,n=0,r=this.childNodes,i=r.length;for(t=0;t<i;t++)r[t].nodeType===e&&n++;return n}},_ensureInsertValid:{value:function(e,t,n){var r;if(!e.nodeType)throw new TypeError("not a node");switch(this.nodeType){case g:case y:case s:break;default:i.HierarchyRequestError()}switch(e.isAncestor(this)&&i.HierarchyRequestError(),null===t&&n||t.parentNode!==this&&i.NotFoundError(),e.nodeType){case y:case m:case s:case l:case d:case f:break;default:i.HierarchyRequestError()}if(this.nodeType===g)switch(e.nodeType){case l:i.HierarchyRequestError();break;case y:switch(e._countChildrenOfType(l)>0&&i.HierarchyRequestError(),e._countChildrenOfType(s)){case 0:break;case 1:if(null!==t)for(n&&t.nodeType===m&&i.HierarchyRequestError(),r=this.childNodes.length-1;r>=0&&this.childNodes[r]!==t;r--)this.childNodes[r].nodeType===m&&i.HierarchyRequestError();r=this._countChildrenOfType(s),n?r>0&&i.HierarchyRequestError():(r>1||1===r&&t.nodeType!==s)&&i.HierarchyRequestError();break;default:i.HierarchyRequestError()}break;case s:if(null!==t)for(n&&t.nodeType===m&&i.HierarchyRequestError(),r=this.childNodes.length-1;r>=0&&this.childNodes[r]!==t;r--)this.childNodes[r].nodeType===m&&i.HierarchyRequestError();r=this._countChildrenOfType(s),n?r>0&&i.HierarchyRequestError():(r>1||1===r&&t.nodeType!==s)&&i.HierarchyRequestError();break;case m:if(null===t)this._countChildrenOfType(s)&&i.HierarchyRequestError();else for(r=0;r<this.childNodes.length&&this.childNodes[r]!==t;r++)this.childNodes[r].nodeType===s&&i.HierarchyRequestError();r=this._countChildrenOfType(m),n?r>0&&i.HierarchyRequestError():(r>1||1===r&&t.nodeType!==m)&&i.HierarchyRequestError()}else e.nodeType===m&&i.HierarchyRequestError()}},insertBefore:{value:function(e,t){this._ensureInsertValid(e,t,!0);var n=t;return n===e&&(n=e.nextSibling),this.doc.adoptNode(e),null===n?this._appendChild(e):e.insert(this,n.index),e}},appendChild:{value:function(e){return this.insertBefore(e,null)}},_appendChild:{value:function(e){return e.insert(this,this.childNodes.length),e}},removeChild:{value:function(e){if(!e.nodeType)throw new TypeError("not a node");return e.parentNode!==this&&i.NotFoundError(),e.remove(),e}},replaceChild:{value:function(e,t){return this._ensureInsertValid(e,t,!1),e.doc!==this.doc&&this.doc.adoptNode(e),e._insertOrReplace(this,t.index,!0),t}},contains:{value:function(e){return null!==e&&(this===e||0!=(this.compareDocumentPosition(e)&T))}},compareDocumentPosition:{value:function(e){if(this===e)return 0;if(this.doc!==e.doc||this.rooted!==e.rooted)return v+k;for(var t=[],n=[],r=this;null!==r;r=r.parentNode)t.push(r);for(r=e;null!==r;r=r.parentNode)n.push(r);if(t.reverse(),n.reverse(),t[0]!==n[0])return v+k;r=Math.min(t.length,n.length);for(var i=1;i<r;i++)if(t[i]!==n[i])return t[i].index<n[i].index?w:_;return t.length<n.length?w+T:_+E}},isSameNode:{value:function(e){return this===e}},isEqualNode:{value:function(e){if(!e)return!1;if(e.nodeType!==this.nodeType)return!1;var t;if(this.firstChild){if(t=this.childNodes.length,e.childNodes.length!==t)return!1}else if(t=0,e.firstChild)return!1;if(!this.isEqual(e))return!1;for(var n=0;n<t;n++){var r=this.childNodes[n],i=e.childNodes[n];if(!r.isEqualNode(i))return!1}return!0}},cloneNode:{value:function(e){var t=this.clone();if(e&&this.firstChild)for(var n=0,r=this.childNodes.length;n<r;n++)t._appendChild(this.childNodes[n].cloneNode(!0));return t}},lookupPrefix:{value:function(e){var t;if(""===e)return null;switch(this.nodeType){case s:return this.locateNamespacePrefix(e);case g:return(t=this.documentElement)?t.locateNamespacePrefix(e):null;case m:case y:return null;default:return(t=this.parentElement)?t.locateNamespacePrefix(e):null}}},lookupNamespaceURI:{value:function(e){var t;switch(this.nodeType){case s:return this.locateNamespace(e);case g:return(t=this.documentElement)?t.locateNamespace(e):null;case m:case y:return null;default:return(t=this.parentElement)?t.locateNamespace(e):null}}},isDefaultNamespace:{value:function(e){var t=this.lookupNamespaceURI(null);return null===t&&(t=""),e===t}},index:{get:function(){i.assert(this.parentNode);var e=this.parentNode.childNodes;if(void 0===this._index||e[this._index]!==this){for(var t=0;t<e.length;t++)e[t]._index=t;i.assert(e[this._index]===this)}return this._index}},isAncestor:{value:function(e){if(this.doc!==e.doc)return!1;if(this.rooted!==e.rooted)return!1;for(var t=e;t;t=t.parentNode)if(t===this)return!0;return!1}},ensureSameDoc:{value:function(e){null===e.ownerDocument?e.ownerDocument=this.doc:e.ownerDocument!==this.doc&&i.WrongDocumentError()}},removeChildren:{value:function(){var e=this.childNodes.length;if(e){for(var t=this.rooted?this.ownerDocument:null,n=0;n<e;n++)t&&t.mutateRemove(this.childNodes[n]),this.childNodes[n].parentNode=null;this.childNodes.length=0,this.modify()}}},insert:{value:function(e,t){this._insertOrReplace(e,t,!1)}},_insertOrReplace:{value:function(e,t,n){var r=e.childNodes;if(this.nodeType===y&&this.rooted&&i.HierarchyRequestError(),this.parentNode===e){var o=this.index;if(o===t)return;o<t&&t--}if(n){var a=e.childNodes[t];a.rooted&&a.doc.mutateRemove(a),a.parentNode=null}if(this.rooted&&e.rooted){var s=this.parentNode;s.childNodes.splice(this.index,1),s.modify(),this.parentNode=e,n?r[t]=this:r.splice(t,0,this),this._index=t,e.modify(),e.doc.mutateMove(this)}else if(this.nodeType===y){var c,l=[t,n?1:0];for(c=0;c<this.childNodes.length;c++){var u=this.childNodes[c];l.push(u),u.parentNode=e,u._index=t+c}if(this.childNodes.length=0,r.splice.apply(r,l),e.rooted)for(e.modify(),c=2;c<l.length;c++)e.doc.mutateInsert(l[c])}else this.parentNode&&this.remove(),this.parentNode=e,n?r[t]=this:r.splice(t,0,this),this._index=t,e.rooted&&(e.modify(),e.doc.mutateInsert(this))}},lastModTime:{get:function(){return this._lastModTime||(this._lastModTime=this.doc.modclock),this._lastModTime}},modify:{value:function(){if(this.doc.modclock)for(var e=++this.doc.modclock,t=this;t;t=t.parentElement)t._lastModTime&&(t._lastModTime=e)}},doc:{get:function(){return this.ownerDocument||this}},rooted:{get:function(){return!!this._nid}},normalize:{value:function(){for(var e=0;e<this.childNodes.length;e++){var t=this.childNodes[e];if(t.normalize&&t.normalize(),t.nodeType===a.TEXT_NODE)if(""!==t.nodeValue){if(e){var n=this.childNodes[e-1];n.nodeType===a.TEXT_NODE&&(n.appendData(t.nodeValue),this.removeChild(t),e--)}}else this.removeChild(t),e--}}},serialize:{value:function(){for(var e="",t=0,n=this.childNodes.length;t<n;t++){var r=this.childNodes[t];switch(r.nodeType){case 1:var a=r.namespaceURI,c=a===o.HTML,l=c||a===o.SVG||a===o.MATHML?r.localName:r.tagName;e+="<"+l;for(var u=0,p=r._numattrs;u<p;u++){var h=r._attr(u);e+=" "+O(h),void 0!==h.value&&(e+='="'+x(h.value)+'"')}if(e+=">",!c||!S[l]){var d=r.serialize();c&&R[l]&&"\n"===d.charAt(0)&&(e+="\n"),e+=d,e+="</"+l+">"}break;case 3:case 4:var f;f=this.nodeType===s&&this.namespaceURI===o.HTML?this.tagName:"",N[f]||"NOSCRIPT"===f&&this.ownerDocument._scripting_enabled?e+=r.data:e+=C(r.data);break;case 8:e+="\x3c!--"+r.data+"--\x3e";break;case 7:e+="<?"+r.target+" "+r.data+"?>";break;case 10:e+="<!DOCTYPE "+r.name,e+=">";break;default:i.InvalidState()}}return e}},ELEMENT_NODE:{value:s},ATTRIBUTE_NODE:{value:c},TEXT_NODE:{value:l},CDATA_SECTION_NODE:{value:u},ENTITY_REFERENCE_NODE:{value:p},ENTITY_NODE:{value:h},PROCESSING_INSTRUCTION_NODE:{value:d},COMMENT_NODE:{value:f},DOCUMENT_NODE:{value:g},DOCUMENT_TYPE_NODE:{value:m},DOCUMENT_FRAGMENT_NODE:{value:y},NOTATION_NODE:{value:b}})},function(e,t,n){e.exports=n(1)(0)},function(e,t,n){e.exports=n(1)(7)},function(e,t,n){
/**
 * @license Angular v5.2.9
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
!function(e,t,n,r,i,o,a,s,c){"use strict";
/**
 * @license Angular v5.2.9
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var l=function(){},u=function(){},p=function(){function e(e){var t=this;this.normalizedNames=new Map,this.lazyUpdate=null,e?this.lazyInit="string"==typeof e?function(){t.headers=new Map,e.split("\n").forEach(function(e){var n=e.indexOf(":");if(n>0){var r=e.slice(0,n),i=r.toLowerCase(),o=e.slice(n+1).trim();t.maybeSetNormalizedName(r,i),t.headers.has(i)?t.headers.get(i).push(o):t.headers.set(i,[o])}})}:function(){t.headers=new Map,Object.keys(e).forEach(function(n){var r=e[n],i=n.toLowerCase();"string"==typeof r&&(r=[r]),r.length>0&&(t.headers.set(i,r),t.maybeSetNormalizedName(n,i))})}:this.headers=new Map}return e.prototype.has=function(e){return this.init(),this.headers.has(e.toLowerCase())},e.prototype.get=function(e){this.init();var t=this.headers.get(e.toLowerCase());return t&&t.length>0?t[0]:null},e.prototype.keys=function(){return this.init(),Array.from(this.normalizedNames.values())},e.prototype.getAll=function(e){return this.init(),this.headers.get(e.toLowerCase())||null},e.prototype.append=function(e,t){return this.clone({name:e,value:t,op:"a"})},e.prototype.set=function(e,t){return this.clone({name:e,value:t,op:"s"})},e.prototype.delete=function(e,t){return this.clone({name:e,value:t,op:"d"})},e.prototype.maybeSetNormalizedName=function(e,t){this.normalizedNames.has(t)||this.normalizedNames.set(t,e)},e.prototype.init=function(){var t=this;this.lazyInit&&(this.lazyInit instanceof e?this.copyFrom(this.lazyInit):this.lazyInit(),this.lazyInit=null,this.lazyUpdate&&(this.lazyUpdate.forEach(function(e){return t.applyUpdate(e)}),this.lazyUpdate=null))},e.prototype.copyFrom=function(e){var t=this;e.init(),Array.from(e.headers.keys()).forEach(function(n){t.headers.set(n,e.headers.get(n)),t.normalizedNames.set(n,e.normalizedNames.get(n))})},e.prototype.clone=function(t){var n=new e;return n.lazyInit=this.lazyInit&&this.lazyInit instanceof e?this.lazyInit:this,n.lazyUpdate=(this.lazyUpdate||[]).concat([t]),n},e.prototype.applyUpdate=function(e){var t=e.name.toLowerCase();switch(e.op){case"a":case"s":var n=e.value;if("string"==typeof n&&(n=[n]),0===n.length)return;this.maybeSetNormalizedName(e.name,t);var r=("a"===e.op?this.headers.get(t):void 0)||[];r.push.apply(r,n),this.headers.set(t,r);break;case"d":var i=e.value;if(i){var o=this.headers.get(t);if(!o)return;0===(o=o.filter(function(e){return-1===i.indexOf(e)})).length?(this.headers.delete(t),this.normalizedNames.delete(t)):this.headers.set(t,o)}else this.headers.delete(t),this.normalizedNames.delete(t)}},e.prototype.forEach=function(e){var t=this;this.init(),Array.from(this.normalizedNames.keys()).forEach(function(n){return e(t.normalizedNames.get(n),t.headers.get(n))})},e}(),h=function(){function e(){}return e.prototype.encodeKey=function(e){return d(e)},e.prototype.encodeValue=function(e){return d(e)},e.prototype.decodeKey=function(e){return decodeURIComponent(e)},e.prototype.decodeValue=function(e){return decodeURIComponent(e)},e}();function d(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/gi,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%2B/gi,"+").replace(/%3D/gi,"=").replace(/%3F/gi,"?").replace(/%2F/gi,"/")}var f=function(){function e(e){void 0===e&&(e={});var t=this;if(this.updates=null,this.cloneFrom=null,this.encoder=e.encoder||new h,e.fromString){if(e.fromObject)throw new Error("Cannot specify both fromString and fromObject.");this.map=function(e,t){var n=new Map;if(e.length>0){var r=e.split("&");r.forEach(function(e){var r=e.indexOf("="),i=-1==r?[t.decodeKey(e),""]:[t.decodeKey(e.slice(0,r)),t.decodeValue(e.slice(r+1))],o=i[0],a=i[1],s=n.get(o)||[];s.push(a),n.set(o,s)})}return n}(e.fromString,this.encoder)}else e.fromObject?(this.map=new Map,Object.keys(e.fromObject).forEach(function(n){var r=e.fromObject[n];t.map.set(n,Array.isArray(r)?r:[r])})):this.map=null}return e.prototype.has=function(e){return this.init(),this.map.has(e)},e.prototype.get=function(e){this.init();var t=this.map.get(e);return t?t[0]:null},e.prototype.getAll=function(e){return this.init(),this.map.get(e)||null},e.prototype.keys=function(){return this.init(),Array.from(this.map.keys())},e.prototype.append=function(e,t){return this.clone({param:e,value:t,op:"a"})},e.prototype.set=function(e,t){return this.clone({param:e,value:t,op:"s"})},e.prototype.delete=function(e,t){return this.clone({param:e,value:t,op:"d"})},e.prototype.toString=function(){var e=this;return this.init(),this.keys().map(function(t){var n=e.encoder.encodeKey(t);return e.map.get(t).map(function(t){return n+"="+e.encoder.encodeValue(t)}).join("&")}).join("&")},e.prototype.clone=function(t){var n=new e({encoder:this.encoder});return n.cloneFrom=this.cloneFrom||this,n.updates=(this.updates||[]).concat([t]),n},e.prototype.init=function(){var e=this;null===this.map&&(this.map=new Map),null!==this.cloneFrom&&(this.cloneFrom.init(),this.cloneFrom.keys().forEach(function(t){return e.map.set(t,e.cloneFrom.map.get(t))}),this.updates.forEach(function(t){switch(t.op){case"a":case"s":var n=("a"===t.op?e.map.get(t.param):void 0)||[];n.push(t.value),e.map.set(t.param,n);break;case"d":if(void 0===t.value){e.map.delete(t.param);break}var r=e.map.get(t.param)||[],i=r.indexOf(t.value);-1!==i&&r.splice(i,1),r.length>0?e.map.set(t.param,r):e.map.delete(t.param)}}),this.cloneFrom=null)},e}();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function g(e){return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer}function m(e){return"undefined"!=typeof Blob&&e instanceof Blob}function y(e){return"undefined"!=typeof FormData&&e instanceof FormData}var b=function(){function e(e,t,n,r){var i;if(this.url=t,this.body=null,this.reportProgress=!1,this.withCredentials=!1,this.responseType="json",this.method=e.toUpperCase(),function(e){switch(e){case"DELETE":case"GET":case"HEAD":case"OPTIONS":case"JSONP":return!1;default:return!0}}(this.method)||r?(this.body=void 0!==n?n:null,i=r):i=n,i&&(this.reportProgress=!!i.reportProgress,this.withCredentials=!!i.withCredentials,i.responseType&&(this.responseType=i.responseType),i.headers&&(this.headers=i.headers),i.params&&(this.params=i.params)),this.headers||(this.headers=new p),this.params){var o=this.params.toString();if(0===o.length)this.urlWithParams=t;else{var a=t.indexOf("?"),s=-1===a?"?":a<t.length-1?"&":"";this.urlWithParams=t+s+o}}else this.params=new f,this.urlWithParams=t}return e.prototype.serializeBody=function(){return null===this.body?null:g(this.body)||m(this.body)||y(this.body)||"string"==typeof this.body?this.body:this.body instanceof f?this.body.toString():"object"==typeof this.body||"boolean"==typeof this.body||Array.isArray(this.body)?JSON.stringify(this.body):this.body.toString()},e.prototype.detectContentTypeHeader=function(){return null===this.body?null:y(this.body)?null:m(this.body)?this.body.type||null:g(this.body)?null:"string"==typeof this.body?"text/plain":this.body instanceof f?"application/x-www-form-urlencoded;charset=UTF-8":"object"==typeof this.body||"number"==typeof this.body||Array.isArray(this.body)?"application/json":null},e.prototype.clone=function(t){void 0===t&&(t={});var n=t.method||this.method,r=t.url||this.url,i=t.responseType||this.responseType,o=void 0!==t.body?t.body:this.body,a=void 0!==t.withCredentials?t.withCredentials:this.withCredentials,s=void 0!==t.reportProgress?t.reportProgress:this.reportProgress,c=t.headers||this.headers,l=t.params||this.params;return void 0!==t.setHeaders&&(c=Object.keys(t.setHeaders).reduce(function(e,n){return e.set(n,t.setHeaders[n])},c)),t.setParams&&(l=Object.keys(t.setParams).reduce(function(e,n){return e.set(n,t.setParams[n])},l)),new e(n,r,o,{params:l,headers:c,reportProgress:s,responseType:i,withCredentials:a})},e}(),v={Sent:0,UploadProgress:1,ResponseHeader:2,DownloadProgress:3,Response:4,User:5};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */v[v.Sent]="Sent",v[v.UploadProgress]="UploadProgress",v[v.ResponseHeader]="ResponseHeader",v[v.DownloadProgress]="DownloadProgress",v[v.Response]="Response",v[v.User]="User";var _=function(e,t,n){void 0===t&&(t=200),void 0===n&&(n="OK"),this.headers=e.headers||new p,this.status=void 0!==e.status?e.status:t,this.statusText=e.statusText||n,this.url=e.url||null,this.ok=this.status>=200&&this.status<300},w=function(e){function t(t){void 0===t&&(t={});var n=e.call(this,t)||this;return n.type=v.ResponseHeader,n}return a.__extends(t,e),t.prototype.clone=function(e){return void 0===e&&(e={}),new t({headers:e.headers||this.headers,status:void 0!==e.status?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})},t}(_),E=function(e){function t(t){void 0===t&&(t={});var n=e.call(this,t)||this;return n.type=v.Response,n.body=void 0!==t.body?t.body:null,n}return a.__extends(t,e),t.prototype.clone=function(e){return void 0===e&&(e={}),new t({body:void 0!==e.body?e.body:this.body,headers:e.headers||this.headers,status:void 0!==e.status?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})},t}(_),T=function(e){function t(t){var n=e.call(this,t,0,"Unknown Error")||this;return n.name="HttpErrorResponse",n.ok=!1,n.status>=200&&n.status<300?n.message="Http failure during parsing for "+(t.url||"(unknown url)"):n.message="Http failure response for "+(t.url||"(unknown url)")+": "+t.status+" "+t.statusText,n.error=t.error||null,n}return a.__extends(t,e),t}(_);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function k(e,t){return{body:t,headers:e.headers,observe:e.observe,params:e.params,reportProgress:e.reportProgress,responseType:e.responseType,withCredentials:e.withCredentials}}var N=function(){function e(e){this.handler=e}return e.prototype.request=function(e,t,a){var s,c=this;if(void 0===a&&(a={}),e instanceof b)s=e;else{var l=void 0;l=a.headers instanceof p?a.headers:new p(a.headers);var u=void 0;a.params&&(u=a.params instanceof f?a.params:new f({fromObject:a.params})),s=new b(e,t,void 0!==a.body?a.body:null,{headers:l,params:u,reportProgress:a.reportProgress,responseType:a.responseType||"json",withCredentials:a.withCredentials})}var h=r.concatMap.call(n.of(s),function(e){return c.handler.handle(e)});if(e instanceof b||"events"===a.observe)return h;var d=i.filter.call(h,function(e){return e instanceof E});switch(a.observe||"body"){case"body":switch(s.responseType){case"arraybuffer":return o.map.call(d,function(e){if(null!==e.body&&!(e.body instanceof ArrayBuffer))throw new Error("Response is not an ArrayBuffer.");return e.body});case"blob":return o.map.call(d,function(e){if(null!==e.body&&!(e.body instanceof Blob))throw new Error("Response is not a Blob.");return e.body});case"text":return o.map.call(d,function(e){if(null!==e.body&&"string"!=typeof e.body)throw new Error("Response is not a string.");return e.body});case"json":default:return o.map.call(d,function(e){return e.body})}case"response":return d;default:throw new Error("Unreachable: unhandled observe type "+a.observe+"}")}},e.prototype.delete=function(e,t){return void 0===t&&(t={}),this.request("DELETE",e,t)},e.prototype.get=function(e,t){return void 0===t&&(t={}),this.request("GET",e,t)},e.prototype.head=function(e,t){return void 0===t&&(t={}),this.request("HEAD",e,t)},e.prototype.jsonp=function(e,t){return this.request("JSONP",e,{params:(new f).append(t,"JSONP_CALLBACK"),observe:"body",responseType:"json"})},e.prototype.options=function(e,t){return void 0===t&&(t={}),this.request("OPTIONS",e,t)},e.prototype.patch=function(e,t,n){return void 0===n&&(n={}),this.request("PATCH",e,k(n,t))},e.prototype.post=function(e,t,n){return void 0===n&&(n={}),this.request("POST",e,k(n,t))},e.prototype.put=function(e,t,n){return void 0===n&&(n={}),this.request("PUT",e,k(n,t))},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:l}]},e}(),S=function(){function e(e,t){this.next=e,this.interceptor=t}return e.prototype.handle=function(e){return this.interceptor.intercept(e,this.next)},e}(),R=new t.InjectionToken("HTTP_INTERCEPTORS"),C=function(){function e(){}return e.prototype.intercept=function(e,t){return t.handle(e)},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[]},e}(),x=0,O=function(){},D=function(){function e(e,t){this.callbackMap=e,this.document=t}return e.prototype.nextCallback=function(){return"ng_jsonp_callback_"+x++},e.prototype.handle=function(e){var t=this;if("JSONP"!==e.method)throw new Error("JSONP requests must use JSONP request method.");if("json"!==e.responseType)throw new Error("JSONP requests must use Json response type.");return new c.Observable(function(n){var r=t.nextCallback(),i=e.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/,"="+r+"$1"),o=t.document.createElement("script");o.src=i;var a=null,s=!1,c=!1;t.callbackMap[r]=function(e){delete t.callbackMap[r],c||(a=e,s=!0)};var l=function(){o.parentNode&&o.parentNode.removeChild(o),delete t.callbackMap[r]},u=function(e){c||(l(),s?(n.next(new E({body:a,status:200,statusText:"OK",url:i})),n.complete()):n.error(new T({url:i,status:0,statusText:"JSONP Error",error:new Error("JSONP injected script did not invoke callback.")})))},p=function(e){c||(l(),n.error(new T({error:e,status:0,statusText:"JSONP Error",url:i})))};return o.addEventListener("load",u),o.addEventListener("error",p),t.document.body.appendChild(o),n.next({type:v.Sent}),function(){c=!0,o.removeEventListener("load",u),o.removeEventListener("error",p),l()}})},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:O},{type:void 0,decorators:[{type:t.Inject,args:[s.DOCUMENT]}]}]},e}(),A=function(){function e(e){this.jsonp=e}return e.prototype.intercept=function(e,t){return"JSONP"===e.method?this.jsonp.handle(e):t.handle(e)},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:D}]},e}(),M=/^\)\]\}',?\n/,I=function(){},P=function(){function e(){}return e.prototype.build=function(){return new XMLHttpRequest},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[]},e}(),L=function(){function e(e){this.xhrFactory=e}return e.prototype.handle=function(e){var t=this;if("JSONP"===e.method)throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");return new c.Observable(function(n){var r=t.xhrFactory.build();if(r.open(e.method,e.urlWithParams),e.withCredentials&&(r.withCredentials=!0),e.headers.forEach(function(e,t){return r.setRequestHeader(e,t.join(","))}),e.headers.has("Accept")||r.setRequestHeader("Accept","application/json, text/plain, */*"),!e.headers.has("Content-Type")){var i=e.detectContentTypeHeader();null!==i&&r.setRequestHeader("Content-Type",i)}if(e.responseType){var o=e.responseType.toLowerCase();r.responseType="json"!==o?o:"text"}var a=e.serializeBody(),s=null,c=function(){if(null!==s)return s;var t=1223===r.status?204:r.status,n=r.statusText||"OK",i=new p(r.getAllResponseHeaders()),o=function(e){return"responseURL"in e&&e.responseURL?e.responseURL:/^X-Request-URL:/m.test(e.getAllResponseHeaders())?e.getResponseHeader("X-Request-URL"):null}(r)||e.url;return s=new w({headers:i,status:t,statusText:n,url:o})},l=function(){var t=c(),i=t.headers,o=t.status,a=t.statusText,s=t.url,l=null;204!==o&&(l=void 0===r.response?r.responseText:r.response),0===o&&(o=l?200:0);var u=o>=200&&o<300;if("json"===e.responseType&&"string"==typeof l){var p=l;l=l.replace(M,"");try{l=""!==l?JSON.parse(l):null}catch(e){l=p,u&&(u=!1,l={error:e,text:l})}}u?(n.next(new E({body:l,headers:i,status:o,statusText:a,url:s||void 0})),n.complete()):n.error(new T({error:l,headers:i,status:o,statusText:a,url:s||void 0}))},u=function(e){var t=new T({error:e,status:r.status||0,statusText:r.statusText||"Unknown Error"});n.error(t)},h=!1,d=function(t){h||(n.next(c()),h=!0);var i={type:v.DownloadProgress,loaded:t.loaded};t.lengthComputable&&(i.total=t.total),"text"===e.responseType&&r.responseText&&(i.partialText=r.responseText),n.next(i)},f=function(e){var t={type:v.UploadProgress,loaded:e.loaded};e.lengthComputable&&(t.total=e.total),n.next(t)};return r.addEventListener("load",l),r.addEventListener("error",u),e.reportProgress&&(r.addEventListener("progress",d),null!==a&&r.upload&&r.upload.addEventListener("progress",f)),r.send(a),n.next({type:v.Sent}),function(){r.removeEventListener("error",u),r.removeEventListener("load",l),e.reportProgress&&(r.removeEventListener("progress",d),null!==a&&r.upload&&r.upload.removeEventListener("progress",f)),r.abort()}})},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:I}]},e}(),j=new t.InjectionToken("XSRF_COOKIE_NAME"),B=new t.InjectionToken("XSRF_HEADER_NAME"),H=function(){},q=function(){function e(e,t,n){this.doc=e,this.platform=t,this.cookieName=n,this.lastCookieString="",this.lastToken=null,this.parseCount=0}return e.prototype.getToken=function(){if("server"===this.platform)return null;var e=this.doc.cookie||"";return e!==this.lastCookieString&&(this.parseCount++,this.lastToken=s.ɵparseCookieValue(e,this.cookieName),this.lastCookieString=e),this.lastToken},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[s.DOCUMENT]}]},{type:void 0,decorators:[{type:t.Inject,args:[t.PLATFORM_ID]}]},{type:void 0,decorators:[{type:t.Inject,args:[j]}]}]},e}(),F=function(){function e(e,t){this.tokenService=e,this.headerName=t}return e.prototype.intercept=function(e,t){var n=e.url.toLowerCase();if("GET"===e.method||"HEAD"===e.method||n.startsWith("http://")||n.startsWith("https://"))return t.handle(e);var r=this.tokenService.getToken();return null===r||e.headers.has(this.headerName)||(e=e.clone({headers:e.headers.set(this.headerName,r)})),t.handle(e)},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:H},{type:void 0,decorators:[{type:t.Inject,args:[B]}]}]},e}(),U=function(){function e(e,t){this.backend=e,this.injector=t,this.chain=null}return e.prototype.handle=function(e){if(null===this.chain){var t=this.injector.get(R,[]);this.chain=t.reduceRight(function(e,t){return new S(e,t)},this.backend)}return this.chain.handle(e)},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:u},{type:t.Injector}]},e}();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function V(){return"object"==typeof window?window:{}}var z=function(){function e(){}return e.disable=function(){return{ngModule:e,providers:[{provide:F,useClass:C}]}},e.withOptions=function(t){return void 0===t&&(t={}),{ngModule:e,providers:[t.cookieName?{provide:j,useValue:t.cookieName}:[],t.headerName?{provide:B,useValue:t.headerName}:[]]}},e.decorators=[{type:t.NgModule,args:[{providers:[F,{provide:R,useExisting:F,multi:!0},{provide:H,useClass:q},{provide:j,useValue:"XSRF-TOKEN"},{provide:B,useValue:"X-XSRF-TOKEN"}]}]}],e.ctorParameters=function(){return[]},e}(),W=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[z.withOptions({cookieName:"XSRF-TOKEN",headerName:"X-XSRF-TOKEN"})],providers:[N,{provide:l,useClass:U},L,{provide:u,useExisting:L},P,{provide:I,useExisting:P}]}]}],e.ctorParameters=function(){return[]},e}(),G=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{providers:[D,{provide:O,useFactory:V},{provide:R,useClass:A,multi:!0}]}]}],e.ctorParameters=function(){return[]},e}();e.HttpBackend=u,e.HttpHandler=l,e.HttpClient=N,e.HttpHeaders=p,e.HTTP_INTERCEPTORS=R,e.JsonpClientBackend=D,e.JsonpInterceptor=A,e.HttpClientJsonpModule=G,e.HttpClientModule=W,e.HttpClientXsrfModule=z,e.ɵinterceptingHandler=function(e,t){return void 0===t&&(t=[]),t?t.reduceRight(function(e,t){return new S(e,t)},e):e},e.HttpParams=f,e.HttpUrlEncodingCodec=h,e.HttpRequest=b,e.HttpErrorResponse=T,e.HttpEventType=v,e.HttpHeaderResponse=w,e.HttpResponse=E,e.HttpResponseBase=_,e.HttpXhrBackend=L,e.XhrFactory=I,e.HttpXsrfTokenExtractor=H,e.ɵa=C,e.ɵb=O,e.ɵc=U,e.ɵd=V,e.ɵe=P,e.ɵh=q,e.ɵi=F,e.ɵf=j,e.ɵg=B,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(0),n(111),n(110),n(25),n(50),n(109),n(5),n(4))},function(e,t,n){
/**
 * @license Angular v5.2.9
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
!function(e,t,r,i,o,a,s,c,l,u,p,h,d,f,g,m){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function b(e,t){function n(){this.constructor=e}y(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}
/**
 * @license Angular v5.2.9
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var v=n(103);function _(e){return new Error("This method is not implemented in DominoAdapter: "+e)}function w(e,t){void 0===t&&(t="/");var n=v.createWindow(e,t),r=n.document;return r}var E=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return b(t,e),t.makeCurrent=function(){r.ɵsetRootDomAdapter(new t)},t.prototype.logError=function(e){console.error(e)},t.prototype.log=function(e){console.log(e)},t.prototype.logGroup=function(e){console.error(e)},t.prototype.logGroupEnd=function(){},t.prototype.supportsDOMEvents=function(){return!1},t.prototype.supportsNativeShadowDOM=function(){return!1},t.prototype.contains=function(e,t){for(var n=t;n;){if(n===e)return!0;n=n.parent}return!1},t.prototype.createHtmlDocument=function(){return w("<html><head><title>fakeTitle</title></head><body></body></html>")},t.prototype.getDefaultDocument=function(){return t.defaultDoc||(t.defaultDoc=v.createDocument()),t.defaultDoc},t.prototype.createShadowRoot=function(e,t){return void 0===t&&(t=document),e.shadowRoot=t.createDocumentFragment(),e.shadowRoot.parent=e,e.shadowRoot},t.prototype.getShadowRoot=function(e){return e.shadowRoot},t.prototype.isTextNode=function(e){return e.nodeType===t.defaultDoc.TEXT_NODE},t.prototype.isCommentNode=function(e){return e.nodeType===t.defaultDoc.COMMENT_NODE},t.prototype.isElementNode=function(e){return!!e&&e.nodeType===t.defaultDoc.ELEMENT_NODE},t.prototype.hasShadowRoot=function(e){return null!=e.shadowRoot},t.prototype.isShadowRoot=function(e){return this.getShadowRoot(e)==e},t.prototype.getProperty=function(e,t){return"href"===t?this.getAttribute(e,"href"):"innerText"===t?e.textContent:e[t]},t.prototype.setProperty=function(e,t,n){"href"===t?this.setAttribute(e,"href",n):"innerText"===t&&(e.textContent=n),e[t]=n},t.prototype.getGlobalEventTarget=function(e,t){return"window"===t?e.defaultView:"document"===t?e:"body"===t?e.body:null},t.prototype.getBaseHref=function(e){var t=this.querySelector(e.documentElement,"base"),n="";return t&&(n=this.getHref(t)),n},t.prototype._readStyleAttribute=function(e){var t={},n=e.getAttribute("style");if(n)for(var r=n.split(/;+/g),i=0;i<r.length;i++){var o=r[i].trim();if(o.length>0){var a=o.indexOf(":");if(-1===a)throw new Error("Invalid CSS style: "+o);var s=o.substr(0,a).trim();t[s]=o.substr(a+1).trim()}}return t},t.prototype._writeStyleAttribute=function(e,t){var n="";for(var r in t){var i=t[r];i&&(n+=r+":"+t[r]+";")}e.setAttribute("style",n)},t.prototype.setStyle=function(e,t,n){t=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();var r=this._readStyleAttribute(e);r[t]=n||"",this._writeStyleAttribute(e,r)},t.prototype.removeStyle=function(e,t){this.setStyle(e,t,"")},t.prototype.getStyle=function(e,t){var n=this._readStyleAttribute(e);return n[t]||""},t.prototype.hasStyle=function(e,t,n){var r=this.getStyle(e,t);return n?r==n:r.length>0},t.prototype.dispatchEvent=function(e,t){e.dispatchEvent(t);var n=e.ownerDocument||e,r=n.defaultView;r&&r.dispatchEvent(t)},t.prototype.getHistory=function(){throw _("getHistory")},t.prototype.getLocation=function(){throw _("getLocation")},t.prototype.getUserAgent=function(){return"Fake user agent"},t.prototype.supportsWebAnimation=function(){return!1},t.prototype.performanceNow=function(){return Date.now()},t.prototype.getAnimationPrefix=function(){return""},t.prototype.getTransitionEnd=function(){return"transitionend"},t.prototype.supportsAnimation=function(){return!0},t.prototype.getDistributedNodes=function(e){throw _("getDistributedNodes")},t.prototype.supportsCookies=function(){return!1},t.prototype.getCookie=function(e){throw _("getCookie")},t.prototype.setCookie=function(e,t){throw _("setCookie")},t}(r.ɵBrowserDomAdapter),T=function(){function e(e){this._doc=e}return e.prototype.renderToString=function(){return this._doc.serialize()},e.prototype.getDocument=function(){return this._doc},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[r.DOCUMENT]}]}]},e}(),k=n(93),N=/^[a-zA-Z\-\+.]+:\/\//,S=function(){function e(){}return e.prototype.build=function(){return new k.XMLHttpRequest},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[]},e}(),R=function(){function e(){}return e.prototype.configureRequest=function(e){},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[]},e}(),C=function(){function e(){}return e.prototype.wrap=function(e){var t=this;return new u.Observable(function(n){var r=null,i=!1,o=null,a=null,s=null,c=Zone.current.scheduleMacroTask("ZoneMacroTaskWrapper.subscribe",function(){null!==s?n.error(s):(n.next(a),n.complete())},{},function(){return null},function(e){i&&(i=!1,o&&(o.unsubscribe(),o=null))});return function(n){r=n,i=!0;var c=t.delegate(e);o=c.subscribe(function(e){return a=e},function(e){if(!i)throw new Error("An http observable was completed twice. This shouldn't happen, please file a bug.");s=e,i=!1,r.invoke()},function(){if(!i)throw new Error("An http observable was completed twice. This shouldn't happen, please file a bug.");i=!1,r.invoke()})}(c),function(){i&&r&&(r.zone.cancelTask(r),i=!1),o&&(o.unsubscribe(),o=null)}})},e}(),x=function(e){function t(t,n){var r=e.call(this)||this;return r.request=t,r.backend=n,function(e){if(!N.test(e))throw new Error("URLs requested via Http on the server must be absolute. URL: "+e)}(t.url),r.response=r.wrap(t),r}return b(t,e),t.prototype.delegate=function(e){return this.lastConnection=this.backend.createConnection(e),this.lastConnection.response},Object.defineProperty(t.prototype,"readyState",{get:function(){return this.lastConnection?this.lastConnection.readyState:s.ReadyState.Unsent},enumerable:!0,configurable:!0}),t}(C),O=function(){function e(e){this.backend=e}return e.prototype.createConnection=function(e){return new x(e,this.backend)},e}(),D=function(e){function t(t){var n=e.call(this)||this;return n.backend=t,n}return b(t,e),t.prototype.handle=function(e){return this.wrap(e)},t.prototype.delegate=function(e){return this.backend.handle(e)},t}(C);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function A(e,t){var n=new O(e);return new s.Http(n,t)}function M(e,t){var n=a.ɵinterceptingHandler(e,t);return new D(n)}var I=[{provide:s.Http,useFactory:A,deps:[s.XHRBackend,s.RequestOptions]},{provide:s.BrowserXhr,useClass:S},{provide:s.XSRFStrategy,useClass:R},{provide:a.XhrFactory,useClass:S},{provide:a.HttpHandler,useFactory:M,deps:[a.HttpBackend,[new t.Optional,a.HTTP_INTERCEPTORS]]}],P=new t.InjectionToken("Server.INITIAL_CONFIG"),L=new t.InjectionToken("Server.RENDER_MODULE_HOOK");
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function j(e){var t=h.parse(e);return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}}var B=function(){function e(e,t){this._doc=e,this.pathname="/",this.search="",this.hash="",this._hashUpdate=new p.Subject;var n=t;if(n&&n.url){var r=j(n.url);this.pathname=r.pathname,this.search=r.search,this.hash=r.hash}}return e.prototype.getBaseHrefFromDOM=function(){return r.ɵgetDOM().getBaseHref(this._doc)},e.prototype.onPopState=function(e){},e.prototype.onHashChange=function(e){this._hashUpdate.subscribe(e)},Object.defineProperty(e.prototype,"url",{get:function(){return""+this.pathname+this.search+this.hash},enumerable:!0,configurable:!0}),e.prototype.setHash=function(e,t){var n=this;if(this.hash!==e){this.hash=e;var r,i=this.url;r=function(){return n._hashUpdate.next({type:"hashchange",oldUrl:t,newUrl:i})},Zone.current.scheduleMicroTask("scheduleMicrotask",r)}},e.prototype.replaceState=function(e,t,n){var r=this.url,i=j(n);this.pathname=i.pathname,this.search=i.search,this.setHash(i.hash,r)},e.prototype.pushState=function(e,t,n){this.replaceState(e,t,n)},e.prototype.forward=function(){throw new Error("Not implemented")},e.prototype.back=function(){throw new Error("Not implemented")},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[r.DOCUMENT]}]},{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:[P]}]}]},e}(),H=[],q=function(){function e(e,t,n){this.ngZone=e,this.document=t,this.sharedStylesHost=n,this.rendererByCompId=new Map,this.schema=new d.DomElementSchemaRegistry,this.defaultRenderer=new F(t,e,this.schema)}return e.prototype.createRenderer=function(e,n){if(!e||!n)return this.defaultRenderer;switch(n.encapsulation){case t.ViewEncapsulation.Native:case t.ViewEncapsulation.Emulated:var i=this.rendererByCompId.get(n.id);return i||(i=new z(this.document,this.ngZone,this.sharedStylesHost,this.schema,n),this.rendererByCompId.set(n.id,i)),i.applyToHost(e),i;case t.ViewEncapsulation.Native:throw new Error("Native encapsulation is not supported on the server!");default:if(!this.rendererByCompId.has(n.id)){var o=r.ɵflattenStyles(n.id,n.styles,[]);this.sharedStylesHost.addStyles(o),this.rendererByCompId.set(n.id,this.defaultRenderer)}return this.defaultRenderer}},e.prototype.begin=function(){},e.prototype.end=function(){},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:t.NgZone},{type:void 0,decorators:[{type:t.Inject,args:[r.DOCUMENT]}]},{type:r.ɵSharedStylesHost}]},e}(),F=function(){function e(e,t,n){this.document=e,this.ngZone=t,this.schema=n,this.data=Object.create(null)}return e.prototype.destroy=function(){},e.prototype.createElement=function(e,t,n){return t?r.ɵgetDOM().createElementNS(r.ɵNAMESPACE_URIS[t],e):r.ɵgetDOM().createElement(e)},e.prototype.createComment=function(e,t){return r.ɵgetDOM().createComment(e)},e.prototype.createText=function(e,t){return r.ɵgetDOM().createTextNode(e)},e.prototype.appendChild=function(e,t){r.ɵgetDOM().appendChild(e,t)},e.prototype.insertBefore=function(e,t,n){e&&r.ɵgetDOM().insertBefore(e,n,t)},e.prototype.removeChild=function(e,t){e&&r.ɵgetDOM().removeChild(e,t)},e.prototype.selectRootElement=function(e,t){var n;if("string"==typeof e){if(!(n=r.ɵgetDOM().querySelector(this.document,e)))throw new Error('The selector "'+e+'" did not match any elements')}else n=e;return r.ɵgetDOM().clearNodes(n),n},e.prototype.parentNode=function(e){return r.ɵgetDOM().parentElement(e)},e.prototype.nextSibling=function(e){return r.ɵgetDOM().nextSibling(e)},e.prototype.setAttribute=function(e,t,n,i){i?r.ɵgetDOM().setAttributeNS(e,r.ɵNAMESPACE_URIS[i],i+":"+t,n):r.ɵgetDOM().setAttribute(e,t,n)},e.prototype.removeAttribute=function(e,t,n){n?r.ɵgetDOM().removeAttributeNS(e,r.ɵNAMESPACE_URIS[n],t):r.ɵgetDOM().removeAttribute(e,t)},e.prototype.addClass=function(e,t){r.ɵgetDOM().addClass(e,t)},e.prototype.removeClass=function(e,t){r.ɵgetDOM().removeClass(e,t)},e.prototype.setStyle=function(e,t,n,i){r.ɵgetDOM().setStyle(e,t,n)},e.prototype.removeStyle=function(e,t,n){r.ɵgetDOM().removeStyle(e,t)},e.prototype._isSafeToReflectProperty=function(e,t){return this.schema.securityContext(e,t,!0)===this.schema.securityContext(e,t,!1)},e.prototype.setProperty=function(e,t,n){V(t,"property"),r.ɵgetDOM().setProperty(e,t,n);var i=e.tagName.toLowerCase();null!=n&&("number"==typeof n||"string"==typeof n)&&this.schema.hasElement(i,H)&&this.schema.hasProperty(i,t,H)&&this._isSafeToReflectProperty(i,t)&&this.setAttribute(e,t,n.toString())},e.prototype.setValue=function(e,t){r.ɵgetDOM().setText(e,t)},e.prototype.listen=function(e,t,n){var i=this;V(t,"listener");var o="string"==typeof e?r.ɵgetDOM().getGlobalEventTarget(this.document,e):e,a=function(e){return i.ngZone.runGuarded(function(){return n(e)})};return this.ngZone.runOutsideAngular(function(){return r.ɵgetDOM().onAndCancel(o,t,a)})},e}(),U="@".charCodeAt(0);function V(e,t){if(e.charCodeAt(0)===U)throw new Error("Found the synthetic "+t+" "+e+'. Please include either "BrowserAnimationsModule" or "NoopAnimationsModule" in your application.')}var z=function(e){function t(t,n,i,o,a){var s=e.call(this,t,n,o)||this;s.component=a;var c=r.ɵflattenStyles(a.id,a.styles,[]);return i.addStyles(c),s.contentAttr=r.ɵshimContentAttribute(a.id),s.hostAttr=r.ɵshimHostAttribute(a.id),s}return b(t,e),t.prototype.applyToHost=function(t){e.prototype.setAttribute.call(this,t,this.hostAttr,"")},t.prototype.createElement=function(t,n){var r=e.prototype.createElement.call(this,t,n);return e.prototype.setAttribute.call(this,r,this.contentAttr,""),r},t}(F),W=function(e){function n(t,n){var i=e.call(this)||this;return i.doc=t,i.transitionId=n,i.head=null,i.head=r.ɵgetDOM().getElementsByTagName(t,"head")[0],i}return b(n,e),n.prototype._addStyle=function(e){var t=r.ɵgetDOM(),n=t.createElement("style");t.setText(n,e),this.transitionId&&t.setAttribute(n,"ng-transition",this.transitionId),t.appendChild(this.head,n)},n.prototype.onStylesAdded=function(e){var t=this;e.forEach(function(e){return t._addStyle(e)})},n.decorators=[{type:t.Injectable}],n.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[r.DOCUMENT]}]},{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:[r.ɵTRANSITION_ID]}]}]},n}(r.ɵSharedStylesHost),G=[{provide:r.DOCUMENT,useFactory:function(e){var t=e.get(P,null);return t&&t.document?w(t.document,t.url):r.ɵgetDOM().createHtmlDocument()},deps:[t.Injector]},{provide:t.PLATFORM_ID,useValue:o.ɵPLATFORM_SERVER_ID},{provide:t.PLATFORM_INITIALIZER,useFactory:function(e){return function(){E.makeCurrent()}},multi:!0,deps:[t.Injector]},{provide:o.PlatformLocation,useClass:B,deps:[r.DOCUMENT,[t.Optional,P]]},{provide:T,deps:[r.DOCUMENT]},{provide:t.ɵALLOW_MULTIPLE_PLATFORMS,useValue:!0}];
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function Y(e,t,n){return new l.ɵAnimationRendererFactory(e,t,n)}var K=[q,{provide:t.RendererFactory2,useFactory:Y,deps:[q,i.ɵAnimationEngine,t.NgZone]},W,{provide:r.ɵSharedStylesHost,useExisting:W}],$=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{exports:[r.BrowserModule],imports:[s.HttpModule,a.HttpClientModule,l.NoopAnimationsModule],providers:[K,I,{provide:t.Testability,useValue:null}]}]}],e.ctorParameters=function(){return[]},e}(),Q=t.createPlatformFactory(t.platformCore,"server",G),X=t.createPlatformFactory(c.ɵplatformCoreDynamic,"serverDynamic",G);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function Z(e,t,n){return function(){var i=e.createElement("script");i.id=t+"-state",i.setAttribute("type","application/json"),i.textContent=r.ɵescapeHtml(n.toJson()),e.body.appendChild(i)}}var J=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{providers:[r.TransferState,{provide:L,useFactory:Z,deps:[r.DOCUMENT,t.APP_ID,r.TransferState],multi:!0}]}]}],e.ctorParameters=function(){return[]},e}();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function ee(e,t){var n=t.extraProviders?t.extraProviders:[];return e([{provide:P,useValue:{document:t.document,url:t.url}},n])}function te(e,n){return n.then(function(n){var i=n.injector.get(r.ɵTRANSITION_ID,null);if(!i)throw new Error("renderModule[Factory]() requires the use of BrowserModule.withServerTransition() to ensure\nthe server-rendered app can be properly bootstrapped into a client app.");var o=n.injector.get(t.ApplicationRef);return m.toPromise.call(g.first.call(f.filter.call(o.isStable,function(e){return e}))).then(function(){var t=e.injector.get(T),r=n.injector.get(L,null);if(r)for(var i=0,o=r;i<o.length;i++){var a=o[i];try{a()}catch(e){console.warn("Ignoring BEFORE_APP_SERIALIZED Exception: ",e)}}var s=t.renderToString();return e.destroy(),s})})}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ne=new t.Version("5.2.9");e.PlatformState=T,e.ServerModule=$,e.platformDynamicServer=X,e.platformServer=Q,e.BEFORE_APP_SERIALIZED=L,e.INITIAL_CONFIG=P,e.ServerTransferStateModule=J,e.renderModule=function(e,t){var n=ee(X,t);return te(n,n.bootstrapModule(e))},e.renderModuleFactory=function(e,t){var n=ee(Q,t);return te(n,n.bootstrapModuleFactory(e))},e.VERSION=ne,e.ɵINTERNAL_SERVER_PLATFORM_PROVIDERS=G,e.ɵSERVER_RENDER_PROVIDERS=K,e.ɵServerRendererFactory2=q,e.ɵh=I,e.ɵd=S,e.ɵe=R,e.ɵf=A,e.ɵg=M,e.ɵa=Y,e.ɵc=W,e.ɵb=Z,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(0),n(53),n(52),n(5),n(6),n(108),n(107),n(106),n(4),n(49),n(48),n(105),n(25),n(54),n(104))},function(e,t,n){"use strict";e.exports=f;var r=n(23),i=n(2),o=i.NAMESPACE,a=n(42),s=n(3),c=n(13),l=n(102),u=n(41),p=n(22),h=n(21),d=n(40);function f(e,t,n,r){this.nodeType=s.ELEMENT_NODE,this.ownerDocument=e,this.localName=t,this.namespaceURI=n,this.prefix=r,this.tagName=null!==r?r+":"+t:t,n===o.HTML&&(n||e.isHTML)||(this.isHTML=!1),this.isHTML&&(this.tagName=this.tagName.toUpperCase()),this.childNodes=new c,this._attrsByQName=Object.create(null),this._attrsByLName=Object.create(null),this._attrKeys=[],this._index=void 0}function g(e,t,n,r){this.ownerElement=e,r||n||!e._attributeChangeHandlers[t]||(this.onchange=e._attributeChangeHandlers[t]),this.localName=t,this.prefix=null===n||""===n?null:""+n,this.namespaceURI=null===r||""===r?null:""+r}function m(e){for(var t in this.element=e,e._attrsByQName)this[t]=e._attrsByQName[t]}function y(e){this.element=e,this.updateCache()}function b(e){return function(t){return t.localName===e}}f.prototype=Object.create(s.prototype,{nodeName:{get:function(){return this.tagName}},nodeValue:{get:function(){return null},set:function(){}},textContent:{get:function(){var e=[];return function e(t,n){if(t.nodeType===s.TEXT_NODE)n.push(t._data);else for(var r=0,i=t.childNodes.length;r<i;r++)e(t.childNodes[r],n)}(this,e),e.join("")},set:function(e){this.removeChildren(),null!==e&&""!==e&&this._appendChild(this.ownerDocument.createTextNode(e))}},innerHTML:{get:function(){return this.serialize()},set:i.nyi},outerHTML:{get:function(){var e={childNodes:[this],nodeType:0};return s.prototype.serialize.call(e)},set:i.nyi},children:{get:function(){return this._children||(this._children=new y(this)),this._children}},attributes:{get:function(){return this._attributes||(this._attributes=new m(this)),this._attributes}},firstElementChild:{get:function(){for(var e=this.childNodes,t=0,n=e.length;t<n;t++)if(e[t].nodeType===s.ELEMENT_NODE)return e[t];return null}},lastElementChild:{get:function(){for(var e=this.childNodes,t=e.length-1;t>=0;t--)if(e[t].nodeType===s.ELEMENT_NODE)return e[t];return null}},childElementCount:{get:function(){return this.children.length}},nextElement:{value:function(e){e||(e=this.ownerDocument.documentElement);var t=this.firstElementChild;if(!t){if(this===e)return null;t=this.nextElementSibling}if(t)return t;for(var n=this.parentElement;n&&n!==e;n=n.parentElement)if(t=n.nextElementSibling)return t;return null}},getElementsByTagName:{value:function(e){var t;return e?(t="*"===e?function(){return!0}:this.isHTML?function(e){var t=i.toASCIILowerCase(e);return t===e?b(e):function(n){return n.isHTML?n.localName===t:n.localName===e}}(e):b(e),new l(this,t)):new c}},getElementsByTagNameNS:{value:function(e,t){var n;return n="*"===e&&"*"===t?function(){return!0}:"*"===e?b(t):"*"===t?function(e){return function(t){return t.namespaceURI===e}}(e):function(e,t){return function(n){return n.namespaceURI===e&&n.localName===t}}(e,t),new l(this,n)}},getElementsByClassName:{value:function(e){return""===(e=String(e).trim())?new c:(e=e.split(/\s+/),new l(this,function(e){return function(t){var n=t.getAttribute("class");if(!n)return!1;var r=n.trim().split(/\s+/);return e.every(function(e){return-1!==r.indexOf(e)})}}(e)))}},getElementsByName:{value:function(e){return new l(this,function(e){return function(t){return t.getAttribute("name")===e}}(String(e)))}},isHTML:{value:!0,writable:!0},clone:{value:function(){var e;e=this.namespaceURI!==o.HTML||this.prefix?this.ownerDocument.createElementNS(this.namespaceURI,this.tagName):this.ownerDocument.createElement(this.localName);for(var t=0,n=this._attrKeys.length;t<n;t++){var r=this._attrKeys[t],i=this._attrsByLName[r],a=new g(e,i.localName,i.prefix,i.namespaceURI);a.data=i.data,e._attrsByLName[r]=a,e._addQName(a)}return e._attrKeys=this._attrKeys.concat(),e}},isEqual:{value:function(e){if(this.localName!==e.localName||this.namespaceURI!==e.namespaceURI||this.prefix!==e.prefix||this._numattrs!==e._numattrs)return!1;for(var t=0,n=this._numattrs;t<n;t++){var r=this._attr(t);if(!e.hasAttributeNS(r.namespaceURI,r.localName))return!1;if(e.getAttributeNS(r.namespaceURI,r.localName)!==r.value)return!1}return!0}},locateNamespacePrefix:{value:function(e){if(this.namespaceURI===e&&null!==this.prefix)return this.prefix;for(var t=0,n=this._numattrs;t<n;t++){var r=this._attr(t);if("xmlns"===r.prefix&&r.value===e)return r.localName}var i=this.parentElement;return i?i.locateNamespacePrefix(e):null}},locateNamespace:{value:function(e){if(this.prefix===e&&null!==this.namespaceURI)return this.namespaceURI;for(var t=0,n=this._numattrs;t<n;t++){var r=this._attr(t);if("xmlns"===r.prefix&&r.localName===e||null===r.prefix&&"xmlns"===r.localName)return r.value||null}var i=this.parentElement;return i?i.locateNamespace(e):null}},getAttribute:{value:function(e){this.isHTML&&(e=i.toASCIILowerCase(e));var t=this._attrsByQName[e];return t?(Array.isArray(t)&&(t=t[0]),t.value):null}},getAttributeNS:{value:function(e,t){var n=this._attrsByLName[(null===e?"":e)+"|"+t];return n?n.value:null}},hasAttribute:{value:function(e){return this.isHTML&&(e=i.toASCIILowerCase(e)),void 0!==this._attrsByQName[e]}},hasAttributeNS:{value:function(e,t){var n=(null===e?"":e)+"|"+t;return void 0!==this._attrsByLName[n]}},_setAttribute:{value:function(e,t){var n,r=this._attrsByQName[e];r?Array.isArray(r)&&(r=r[0]):(r=this._newattr(e),n=!0),r.value=t,this._attributes&&(this._attributes[e]=r),n&&this._newattrhook&&this._newattrhook(e,t)}},setAttribute:{value:function(e,t){r.isValidName(e)||i.InvalidCharacterError(),this.isHTML&&(e=i.toASCIILowerCase(e)),"xmlns"===e.substring(0,5)&&i.NamespaceError(),this._setAttribute(e,String(t))}},_setAttributeNS:{value:function(e,t,n){var r,i,o=t.indexOf(":");-1===o?(r=null,i=t):(r=t.substring(0,o),i=t.substring(o+1));var a=(null===e?"":e)+"|"+i;""===e&&(e=null);var s,c=this._attrsByLName[a];c?c.prefix!==r&&(this._removeQName(c),c.prefix=r,this._addQName(c)):(c=new g(this,i,r,e),s=!0,this._attrsByLName[a]=c,this._attrKeys.push(a),this._addQName(c)),c.value=n,s&&this._newattrhook&&this._newattrhook(t,n)}},setAttributeNS:{value:function(e,t,n){r.isValidName(t)||i.InvalidCharacterError(),r.isValidQName(t)||i.NamespaceError();var a=t.indexOf(":"),s=-1===a?null:t.substring(0,a);""===e&&(e=null),(null!==s&&null===e||"xml"===s&&e!==o.XML||("xmlns"===t||"xmlns"===s)&&e!==o.XMLNS||e===o.XMLNS&&"xmlns"!==t&&"xmlns"!==s)&&i.NamespaceError(),this._setAttributeNS(e,t,String(n))}},removeAttribute:{value:function(e){this.isHTML&&(e=i.toASCIILowerCase(e));var t=this._attrsByQName[e];if(t){Array.isArray(t)?t.length>2?t=t.shift():(this._attrsByQName[e]=t[1],t=t[0]):this._attrsByQName[e]=void 0;var n=t.namespaceURI,r=(null===n?"":n)+"|"+t.localName;this._attrsByLName[r]=void 0;var o=this._attrKeys.indexOf(r);this._attrKeys.splice(o,1),this._attributes&&(this._attributes[e]=void 0),t.onchange&&t.onchange(this,t.localName,t.value,null),this.rooted&&this.ownerDocument.mutateRemoveAttr(t)}}},removeAttributeNS:{value:function(e,t){var n=(null===e?"":e)+"|"+t,r=this._attrsByLName[n];if(r){this._attrsByLName[n]=void 0;var i=this._attrKeys.indexOf(n);this._attrKeys.splice(i,1),this._removeQName(r),r.onchange&&r.onchange(this,r.localName,r.value,null),this.rooted&&this.ownerDocument.mutateRemoveAttr(r)}}},_getattr:{value:function(e){var t=this._attrsByQName[e];return t?t.value:null}},_setattr:{value:function(e,t){var n,r=this._attrsByQName[e];r||(r=this._newattr(e),n=!0),r.value=String(t),this._attributes&&(this._attributes[e]=r),n&&this._newattrhook&&this._newattrhook(e,t)}},_newattr:{value:function(e){var t=new g(this,e,null,null),n="|"+e;return this._attrsByQName[e]=t,this._attrsByLName[n]=t,this._attrKeys.push(n),t}},_addQName:{value:function(e){var t=e.name,n=this._attrsByQName[t];n?Array.isArray(n)?n.push(e):this._attrsByQName[t]=[n,e]:this._attrsByQName[t]=e,this._attributes&&(this._attributes[t]=e)}},_removeQName:{value:function(e){var t=e.name,n=this._attrsByQName[t];if(Array.isArray(n)){var r=n.indexOf(e);i.assert(-1!==r),2===n.length?this._attrsByQName[t]=n[1-r]:n.splice(r,1)}else i.assert(n===e),this._attrsByQName[t]=void 0}},_numattrs:{get:function(){return this._attrKeys.length}},_attr:{value:function(e){return this._attrsByLName[this._attrKeys[e]]}},id:a.property({name:"id"}),className:a.property({name:"class"}),classList:{get:function(){var e=this;if(this._classList)return this._classList;var t=new u(function(){return e.className||""},function(t){e.className=t});return this._classList=t,t}},matches:{value:function(e){return p.matches(this,e)}},closest:{value:function(e){for(var t=this;t.matches&&!t.matches(e);)t=t.parentNode;return t.matches?t:null}},querySelector:{value:function(e){return p(e,this)[0]}},querySelectorAll:{value:function(e){var t=p(e,this);return t.item?t:new c(t)}}}),Object.defineProperties(f.prototype,h),Object.defineProperties(f.prototype,d),a.registerChangeHandler(f,"id",function(e,t,n,r){e.rooted&&(n&&e.ownerDocument.delId(n,e),r&&e.ownerDocument.addId(r,e))}),g.prototype={get name(){return this.prefix?this.prefix+":"+this.localName:this.localName},get value(){return this.data},get specified(){return!0},set value(e){var t=this.data;(e=void 0===e?"":e+"")!==t&&(this.data=e,this.onchange&&this.onchange(this.ownerElement,this.localName,t,e),this.ownerElement.rooted&&this.ownerElement.ownerDocument.mutateAttr(this,t))},get nodeName(){return this.name},get nodeValue(){return this.value},get textContent(){return this.value},set nodeValue(e){this.value=e},set textContent(e){this.value=e}},m.prototype={get length(){return this.element._attrKeys.length},item:function(e){return this.element._attrsByLName[this.element._attrKeys[e]]}},y.prototype={get length(){return this.updateCache(),this.childrenByNumber.length},item:function(e){return this.updateCache(),this.childrenByNumber[e]||null},namedItem:function(e){return this.updateCache(),this.childrenByName[e]||null},get namedItems(){return this.updateCache(),this.childrenByName},updateCache:function(){var e=/^(a|applet|area|embed|form|frame|frameset|iframe|img|object)$/;if(this.lastModTime!==this.element.lastModTime){this.lastModTime=this.element.lastModTime;for(var t=this.childrenByNumber&&this.childrenByNumber.length||0,n=0;n<t;n++)this[n]=void 0;for(this.childrenByNumber=[],this.childrenByName=Object.create(null),n=0,t=this.element.childNodes.length;n<t;n++){var r=this.element.childNodes[n];if(r.nodeType===s.ELEMENT_NODE){this[this.childrenByNumber.length]=r,this.childrenByNumber.push(r);var i=r.getAttribute("id");i&&!this.childrenByName[i]&&(this.childrenByName[i]=r);var a=r.getAttribute("name");a&&this.element.namespaceURI===o.HTML&&e.test(this.element.localName)&&!this.childrenByName[a]&&(this.childrenByName[i]=r)}}}}}},function(e,t,n){"use strict";function r(e,t){if(this.type="",this.target=null,this.currentTarget=null,this.eventPhase=r.AT_TARGET,this.bubbles=!1,this.cancelable=!1,this.isTrusted=!1,this.defaultPrevented=!1,this.timeStamp=Date.now(),this._propagationStopped=!1,this._immediatePropagationStopped=!1,this._initialized=!0,this._dispatching=!1,e&&(this.type=e),t)for(var n in t)this[n]=t[n]}e.exports=r,r.CAPTURING_PHASE=1,r.AT_TARGET=2,r.BUBBLING_PHASE=3,r.prototype=Object.create(Object.prototype,{constructor:{value:r},stopPropagation:{value:function(){this._propagationStopped=!0}},stopImmediatePropagation:{value:function(){this._propagationStopped=!0,this._immediatePropagationStopped=!0}},preventDefault:{value:function(){this.cancelable&&(this.defaultPrevented=!0)}},initEvent:{value:function(e,t,n){this._initialized=!0,this._dispatching||(this._propagationStopped=!1,this._immediatePropagationStopped=!1,this.defaultPrevented=!1,this.isTrusted=!1,this.target=null,this.type=e,this.bubbles=t,this.cancelable=n)}}})},function(e,t,n){e.exports=n(1)(40)},function(e,t,n){"use strict";var r={FILTER_ACCEPT:1,FILTER_REJECT:2,FILTER_SKIP:3,SHOW_ALL:4294967295,SHOW_ELEMENT:1,SHOW_ATTRIBUTE:2,SHOW_TEXT:4,SHOW_CDATA_SECTION:8,SHOW_ENTITY_REFERENCE:16,SHOW_ENTITY:32,SHOW_PROCESSING_INSTRUCTION:64,SHOW_COMMENT:128,SHOW_DOCUMENT:256,SHOW_DOCUMENT_TYPE:512,SHOW_DOCUMENT_FRAGMENT:1024,SHOW_NOTATION:2048};e.exports=r.constructor=r.prototype=r},function(e,t,n){"use strict";e.exports=s;var r=n(38),i=n(2),o=n(21),a=n(40);function s(){}s.prototype=Object.create(r.prototype,{substringData:{value:function(e,t){return(e>this.data.length||e<0||t<0)&&i.IndexSizeError(),this.data.substring(e,e+t)}},appendData:{value:function(e){this.data=this.data+e}},insertData:{value:function(e,t){var n=this.data;(e>n.length||e<0)&&i.IndexSizeError();var r=n.substring(0,e),o=n.substring(e);this.data=r+t+o}},deleteData:{value:function(e,t){var n=this.data,r=n.length;(e>r||e<0)&&i.IndexSizeError(),e+t>r&&(t=r-e);var o=n.substring(0,e),a=n.substring(e+t);this.data=o+a}},replaceData:{value:function(e,t,n){var r=this.data,o=r.length;(e>o||e<0)&&i.IndexSizeError(),e+t>o&&(t=o-e);var a=r.substring(0,e),s=r.substring(e+t);this.data=a+n+s}},isEqual:{value:function(e){return this._data===e._data}},length:{get:function(){return this.data.length}}}),Object.defineProperties(s.prototype,o),Object.defineProperties(s.prototype,a)},function(e,t,n){"use strict";function r(e){return this[e]}e.exports=function(e){e||(e=[]);return e.item=r,e}},function(e,t,n){"use strict";e.exports=c;var r=n(24),i=n(16),o=n(15),a=n(2),s=n(23);function c(){}var l={xml:{"":!0,"1.0":!0,"2.0":!0},core:{"":!0,"2.0":!0},html:{"":!0,"1.0":!0,"2.0":!0},xhtml:{"":!0,"1.0":!0,"2.0":!0}};c.prototype={hasFeature:function(e,t){var n=l[(e||"").toLowerCase()];return n&&n[t||""]||!1},createDocumentType:function(e,t,n){return s.isValidName(e)||a.InvalidCharacterError(),s.isValidQName(e)||a.NamespaceError(),new i(e,t,n)},createDocument:function(e,t,n){var i,o=new r(!1,null);return i=t?o.createElementNS(e,t):null,n&&(n.ownerDocument&&a.WrongDocumentError(),o.appendChild(n)),i&&o.appendChild(i),o},createHTMLDocument:function(e){var t=new r(!0,null);t.appendChild(new i("html"));var n=t.createElement("html");t.appendChild(n);var o=t.createElement("head");n.appendChild(o);var a=t.createElement("title");return o.appendChild(a),a.appendChild(t.createTextNode(e)),n.appendChild(t.createElement("body")),t.modclock=1,t},mozSetOutputMutationHandler:function(e,t){e.mutationHandler=t},mozGetInputMutationHandler:function(e){a.nyi()},mozHTMLParser:o}},function(e,t,n){"use strict";e.exports=fe;var r=n(24),i=n(16),o=n(3),a=n(2).NAMESPACE,s=n(19),c=s.elements,l=Function.prototype.apply.bind(Array.prototype.push),u=-1,p=1,h=2,d=3,f=4,g=5,m=[],y=/^HTML$|^-\/\/W3O\/\/DTD W3 HTML Strict 3\.0\/\/EN\/\/$|^-\/W3C\/DTD HTML 4\.0 Transitional\/EN$|^\+\/\/Silmaril\/\/dtd html Pro v0r11 19970101\/\/|^-\/\/AdvaSoft Ltd\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/AS\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict\/\/|^-\/\/IETF\/\/DTD HTML 2\.0\/\/|^-\/\/IETF\/\/DTD HTML 2\.1E\/\/|^-\/\/IETF\/\/DTD HTML 3\.0\/\/|^-\/\/IETF\/\/DTD HTML 3\.2 Final\/\/|^-\/\/IETF\/\/DTD HTML 3\.2\/\/|^-\/\/IETF\/\/DTD HTML 3\/\/|^-\/\/IETF\/\/DTD HTML Level 0\/\/|^-\/\/IETF\/\/DTD HTML Level 1\/\/|^-\/\/IETF\/\/DTD HTML Level 2\/\/|^-\/\/IETF\/\/DTD HTML Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 0\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict\/\/|^-\/\/IETF\/\/DTD HTML\/\/|^-\/\/Metrius\/\/DTD Metrius Presentational\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 Tables\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 Tables\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD HTML\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD Strict HTML\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML 2\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended 1\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended Relaxed 1\.0\/\/|^-\/\/SoftQuad Software\/\/DTD HoTMetaL PRO 6\.0::19990601::extensions to HTML 4\.0\/\/|^-\/\/SoftQuad\/\/DTD HoTMetaL PRO 4\.0::19971010::extensions to HTML 4\.0\/\/|^-\/\/Spyglass\/\/DTD HTML 2\.0 Extended\/\/|^-\/\/SQ\/\/DTD HTML 2\.0 HoTMetaL \+ extensions\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava HTML\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava Strict HTML\/\/|^-\/\/W3C\/\/DTD HTML 3 1995-03-24\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Draft\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Final\/\/|^-\/\/W3C\/\/DTD HTML 3\.2\/\/|^-\/\/W3C\/\/DTD HTML 3\.2S Draft\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Transitional\/\/|^-\/\/W3C\/\/DTD HTML Experimental 19960712\/\/|^-\/\/W3C\/\/DTD HTML Experimental 970421\/\/|^-\/\/W3C\/\/DTD W3 HTML\/\/|^-\/\/W3O\/\/DTD W3 HTML 3\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML 2\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML\/\//i,b="http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd",v=/^-\/\/W3C\/\/DTD HTML 4\.01 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.01 Transitional\/\//i,_=/^-\/\/W3C\/\/DTD XHTML 1\.0 Frameset\/\/|^-\/\/W3C\/\/DTD XHTML 1\.0 Transitional\/\//i,w=Object.create(null);w[a.HTML]={__proto__:null,address:!0,applet:!0,area:!0,article:!0,aside:!0,base:!0,basefont:!0,bgsound:!0,blockquote:!0,body:!0,br:!0,button:!0,caption:!0,center:!0,col:!0,colgroup:!0,dd:!0,details:!0,dir:!0,div:!0,dl:!0,dt:!0,embed:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,frame:!0,frameset:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,head:!0,header:!0,hgroup:!0,hr:!0,html:!0,iframe:!0,img:!0,input:!0,li:!0,link:!0,listing:!0,main:!0,marquee:!0,menu:!0,meta:!0,nav:!0,noembed:!0,noframes:!0,noscript:!0,object:!0,ol:!0,p:!0,param:!0,plaintext:!0,pre:!0,script:!0,section:!0,select:!0,source:!0,style:!0,summary:!0,table:!0,tbody:!0,td:!0,template:!0,textarea:!0,tfoot:!0,th:!0,thead:!0,title:!0,tr:!0,track:!0,ul:!0,wbr:!0,xmp:!0},w[a.SVG]={__proto__:null,foreignObject:!0,desc:!0,title:!0},w[a.MATHML]={__proto__:null,mi:!0,mo:!0,mn:!0,ms:!0,mtext:!0,"annotation-xml":!0};var E=Object.create(null);E[a.HTML]={__proto__:null,address:!0,div:!0,p:!0};var T=Object.create(null);T[a.HTML]={__proto__:null,dd:!0,dt:!0};var k=Object.create(null);k[a.HTML]={__proto__:null,table:!0,thead:!0,tbody:!0,tfoot:!0,tr:!0};var N=Object.create(null);N[a.HTML]={__proto__:null,dd:!0,dt:!0,li:!0,menuitem:!0,optgroup:!0,option:!0,p:!0,rb:!0,rp:!0,rt:!0,rtc:!0};var S=Object.create(null);S[a.HTML]={__proto__:null,caption:!0,colgroup:!0,dd:!0,dt:!0,li:!0,optgroup:!0,option:!0,p:!0,rb:!0,rp:!0,rt:!0,rtc:!0,tbody:!0,td:!0,tfoot:!0,th:!0,thead:!0,tr:!0};var R=Object.create(null);R[a.HTML]={__proto__:null,table:!0,template:!0,html:!0};var C=Object.create(null);C[a.HTML]={__proto__:null,tbody:!0,tfoot:!0,thead:!0,template:!0,html:!0};var x=Object.create(null);x[a.HTML]={__proto__:null,tr:!0,template:!0,html:!0};var O=Object.create(null);O[a.HTML]={__proto__:null,button:!0,fieldset:!0,input:!0,keygen:!0,object:!0,output:!0,select:!0,textarea:!0,img:!0};var D=Object.create(null);D[a.HTML]={__proto__:null,applet:!0,caption:!0,html:!0,table:!0,td:!0,th:!0,marquee:!0,object:!0,template:!0},D[a.MATHML]={__proto__:null,mi:!0,mo:!0,mn:!0,ms:!0,mtext:!0,"annotation-xml":!0},D[a.SVG]={__proto__:null,foreignObject:!0,desc:!0,title:!0};var A=Object.create(D);A[a.HTML]=Object.create(D[a.HTML]),A[a.HTML].ol=!0,A[a.HTML].ul=!0;var M=Object.create(D);M[a.HTML]=Object.create(D[a.HTML]),M[a.HTML].button=!0;var I=Object.create(null);I[a.HTML]={__proto__:null,html:!0,table:!0,template:!0},Object.create(null)[a.HTML]={__proto__:null,optgroup:!0,option:!0};var P=Object.create(null);P[a.MATHML]={__proto__:null,mi:!0,mo:!0,mn:!0,ms:!0,mtext:!0};var L=Object.create(null);L[a.SVG]={__proto__:null,foreignObject:!0,desc:!0,title:!0};var j={__proto__:null,"xlink:actuate":a.XLINK,"xlink:arcrole":a.XLINK,"xlink:href":a.XLINK,"xlink:role":a.XLINK,"xlink:show":a.XLINK,"xlink:title":a.XLINK,"xlink:type":a.XLINK,"xml:base":a.XML,"xml:lang":a.XML,"xml:space":a.XML,xmlns:a.XMLNS,"xmlns:xlink":a.XMLNS},B={__proto__:null,attributename:"attributeName",attributetype:"attributeType",basefrequency:"baseFrequency",baseprofile:"baseProfile",calcmode:"calcMode",clippathunits:"clipPathUnits",diffuseconstant:"diffuseConstant",edgemode:"edgeMode",filterunits:"filterUnits",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",limitingconeangle:"limitingConeAngle",markerheight:"markerHeight",markerunits:"markerUnits",markerwidth:"markerWidth",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",numoctaves:"numOctaves",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",refx:"refX",refy:"refY",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",specularconstant:"specularConstant",specularexponent:"specularExponent",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stitchtiles:"stitchTiles",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textlength:"textLength",viewbox:"viewBox",viewtarget:"viewTarget",xchannelselector:"xChannelSelector",ychannelselector:"yChannelSelector",zoomandpan:"zoomAndPan"},H={__proto__:null,altglyph:"altGlyph",altglyphdef:"altGlyphDef",altglyphitem:"altGlyphItem",animatecolor:"animateColor",animatemotion:"animateMotion",animatetransform:"animateTransform",clippath:"clipPath",feblend:"feBlend",fecolormatrix:"feColorMatrix",fecomponenttransfer:"feComponentTransfer",fecomposite:"feComposite",feconvolvematrix:"feConvolveMatrix",fediffuselighting:"feDiffuseLighting",fedisplacementmap:"feDisplacementMap",fedistantlight:"feDistantLight",feflood:"feFlood",fefunca:"feFuncA",fefuncb:"feFuncB",fefuncg:"feFuncG",fefuncr:"feFuncR",fegaussianblur:"feGaussianBlur",feimage:"feImage",femerge:"feMerge",femergenode:"feMergeNode",femorphology:"feMorphology",feoffset:"feOffset",fepointlight:"fePointLight",fespecularlighting:"feSpecularLighting",fespotlight:"feSpotLight",fetile:"feTile",feturbulence:"feTurbulence",foreignobject:"foreignObject",glyphref:"glyphRef",lineargradient:"linearGradient",radialgradient:"radialGradient",textpath:"textPath"},q={__proto__:null,0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376},F={__proto__:null,AElig:198,"AElig;":198,AMP:38,"AMP;":38,Aacute:193,"Aacute;":193,"Abreve;":258,Acirc:194,"Acirc;":194,"Acy;":1040,"Afr;":[55349,56580],Agrave:192,"Agrave;":192,"Alpha;":913,"Amacr;":256,"And;":10835,"Aogon;":260,"Aopf;":[55349,56632],"ApplyFunction;":8289,Aring:197,"Aring;":197,"Ascr;":[55349,56476],"Assign;":8788,Atilde:195,"Atilde;":195,Auml:196,"Auml;":196,"Backslash;":8726,"Barv;":10983,"Barwed;":8966,"Bcy;":1041,"Because;":8757,"Bernoullis;":8492,"Beta;":914,"Bfr;":[55349,56581],"Bopf;":[55349,56633],"Breve;":728,"Bscr;":8492,"Bumpeq;":8782,"CHcy;":1063,COPY:169,"COPY;":169,"Cacute;":262,"Cap;":8914,"CapitalDifferentialD;":8517,"Cayleys;":8493,"Ccaron;":268,Ccedil:199,"Ccedil;":199,"Ccirc;":264,"Cconint;":8752,"Cdot;":266,"Cedilla;":184,"CenterDot;":183,"Cfr;":8493,"Chi;":935,"CircleDot;":8857,"CircleMinus;":8854,"CirclePlus;":8853,"CircleTimes;":8855,"ClockwiseContourIntegral;":8754,"CloseCurlyDoubleQuote;":8221,"CloseCurlyQuote;":8217,"Colon;":8759,"Colone;":10868,"Congruent;":8801,"Conint;":8751,"ContourIntegral;":8750,"Copf;":8450,"Coproduct;":8720,"CounterClockwiseContourIntegral;":8755,"Cross;":10799,"Cscr;":[55349,56478],"Cup;":8915,"CupCap;":8781,"DD;":8517,"DDotrahd;":10513,"DJcy;":1026,"DScy;":1029,"DZcy;":1039,"Dagger;":8225,"Darr;":8609,"Dashv;":10980,"Dcaron;":270,"Dcy;":1044,"Del;":8711,"Delta;":916,"Dfr;":[55349,56583],"DiacriticalAcute;":180,"DiacriticalDot;":729,"DiacriticalDoubleAcute;":733,"DiacriticalGrave;":96,"DiacriticalTilde;":732,"Diamond;":8900,"DifferentialD;":8518,"Dopf;":[55349,56635],"Dot;":168,"DotDot;":8412,"DotEqual;":8784,"DoubleContourIntegral;":8751,"DoubleDot;":168,"DoubleDownArrow;":8659,"DoubleLeftArrow;":8656,"DoubleLeftRightArrow;":8660,"DoubleLeftTee;":10980,"DoubleLongLeftArrow;":10232,"DoubleLongLeftRightArrow;":10234,"DoubleLongRightArrow;":10233,"DoubleRightArrow;":8658,"DoubleRightTee;":8872,"DoubleUpArrow;":8657,"DoubleUpDownArrow;":8661,"DoubleVerticalBar;":8741,"DownArrow;":8595,"DownArrowBar;":10515,"DownArrowUpArrow;":8693,"DownBreve;":785,"DownLeftRightVector;":10576,"DownLeftTeeVector;":10590,"DownLeftVector;":8637,"DownLeftVectorBar;":10582,"DownRightTeeVector;":10591,"DownRightVector;":8641,"DownRightVectorBar;":10583,"DownTee;":8868,"DownTeeArrow;":8615,"Downarrow;":8659,"Dscr;":[55349,56479],"Dstrok;":272,"ENG;":330,ETH:208,"ETH;":208,Eacute:201,"Eacute;":201,"Ecaron;":282,Ecirc:202,"Ecirc;":202,"Ecy;":1069,"Edot;":278,"Efr;":[55349,56584],Egrave:200,"Egrave;":200,"Element;":8712,"Emacr;":274,"EmptySmallSquare;":9723,"EmptyVerySmallSquare;":9643,"Eogon;":280,"Eopf;":[55349,56636],"Epsilon;":917,"Equal;":10869,"EqualTilde;":8770,"Equilibrium;":8652,"Escr;":8496,"Esim;":10867,"Eta;":919,Euml:203,"Euml;":203,"Exists;":8707,"ExponentialE;":8519,"Fcy;":1060,"Ffr;":[55349,56585],"FilledSmallSquare;":9724,"FilledVerySmallSquare;":9642,"Fopf;":[55349,56637],"ForAll;":8704,"Fouriertrf;":8497,"Fscr;":8497,"GJcy;":1027,GT:62,"GT;":62,"Gamma;":915,"Gammad;":988,"Gbreve;":286,"Gcedil;":290,"Gcirc;":284,"Gcy;":1043,"Gdot;":288,"Gfr;":[55349,56586],"Gg;":8921,"Gopf;":[55349,56638],"GreaterEqual;":8805,"GreaterEqualLess;":8923,"GreaterFullEqual;":8807,"GreaterGreater;":10914,"GreaterLess;":8823,"GreaterSlantEqual;":10878,"GreaterTilde;":8819,"Gscr;":[55349,56482],"Gt;":8811,"HARDcy;":1066,"Hacek;":711,"Hat;":94,"Hcirc;":292,"Hfr;":8460,"HilbertSpace;":8459,"Hopf;":8461,"HorizontalLine;":9472,"Hscr;":8459,"Hstrok;":294,"HumpDownHump;":8782,"HumpEqual;":8783,"IEcy;":1045,"IJlig;":306,"IOcy;":1025,Iacute:205,"Iacute;":205,Icirc:206,"Icirc;":206,"Icy;":1048,"Idot;":304,"Ifr;":8465,Igrave:204,"Igrave;":204,"Im;":8465,"Imacr;":298,"ImaginaryI;":8520,"Implies;":8658,"Int;":8748,"Integral;":8747,"Intersection;":8898,"InvisibleComma;":8291,"InvisibleTimes;":8290,"Iogon;":302,"Iopf;":[55349,56640],"Iota;":921,"Iscr;":8464,"Itilde;":296,"Iukcy;":1030,Iuml:207,"Iuml;":207,"Jcirc;":308,"Jcy;":1049,"Jfr;":[55349,56589],"Jopf;":[55349,56641],"Jscr;":[55349,56485],"Jsercy;":1032,"Jukcy;":1028,"KHcy;":1061,"KJcy;":1036,"Kappa;":922,"Kcedil;":310,"Kcy;":1050,"Kfr;":[55349,56590],"Kopf;":[55349,56642],"Kscr;":[55349,56486],"LJcy;":1033,LT:60,"LT;":60,"Lacute;":313,"Lambda;":923,"Lang;":10218,"Laplacetrf;":8466,"Larr;":8606,"Lcaron;":317,"Lcedil;":315,"Lcy;":1051,"LeftAngleBracket;":10216,"LeftArrow;":8592,"LeftArrowBar;":8676,"LeftArrowRightArrow;":8646,"LeftCeiling;":8968,"LeftDoubleBracket;":10214,"LeftDownTeeVector;":10593,"LeftDownVector;":8643,"LeftDownVectorBar;":10585,"LeftFloor;":8970,"LeftRightArrow;":8596,"LeftRightVector;":10574,"LeftTee;":8867,"LeftTeeArrow;":8612,"LeftTeeVector;":10586,"LeftTriangle;":8882,"LeftTriangleBar;":10703,"LeftTriangleEqual;":8884,"LeftUpDownVector;":10577,"LeftUpTeeVector;":10592,"LeftUpVector;":8639,"LeftUpVectorBar;":10584,"LeftVector;":8636,"LeftVectorBar;":10578,"Leftarrow;":8656,"Leftrightarrow;":8660,"LessEqualGreater;":8922,"LessFullEqual;":8806,"LessGreater;":8822,"LessLess;":10913,"LessSlantEqual;":10877,"LessTilde;":8818,"Lfr;":[55349,56591],"Ll;":8920,"Lleftarrow;":8666,"Lmidot;":319,"LongLeftArrow;":10229,"LongLeftRightArrow;":10231,"LongRightArrow;":10230,"Longleftarrow;":10232,"Longleftrightarrow;":10234,"Longrightarrow;":10233,"Lopf;":[55349,56643],"LowerLeftArrow;":8601,"LowerRightArrow;":8600,"Lscr;":8466,"Lsh;":8624,"Lstrok;":321,"Lt;":8810,"Map;":10501,"Mcy;":1052,"MediumSpace;":8287,"Mellintrf;":8499,"Mfr;":[55349,56592],"MinusPlus;":8723,"Mopf;":[55349,56644],"Mscr;":8499,"Mu;":924,"NJcy;":1034,"Nacute;":323,"Ncaron;":327,"Ncedil;":325,"Ncy;":1053,"NegativeMediumSpace;":8203,"NegativeThickSpace;":8203,"NegativeThinSpace;":8203,"NegativeVeryThinSpace;":8203,"NestedGreaterGreater;":8811,"NestedLessLess;":8810,"NewLine;":10,"Nfr;":[55349,56593],"NoBreak;":8288,"NonBreakingSpace;":160,"Nopf;":8469,"Not;":10988,"NotCongruent;":8802,"NotCupCap;":8813,"NotDoubleVerticalBar;":8742,"NotElement;":8713,"NotEqual;":8800,"NotEqualTilde;":[8770,824],"NotExists;":8708,"NotGreater;":8815,"NotGreaterEqual;":8817,"NotGreaterFullEqual;":[8807,824],"NotGreaterGreater;":[8811,824],"NotGreaterLess;":8825,"NotGreaterSlantEqual;":[10878,824],"NotGreaterTilde;":8821,"NotHumpDownHump;":[8782,824],"NotHumpEqual;":[8783,824],"NotLeftTriangle;":8938,"NotLeftTriangleBar;":[10703,824],"NotLeftTriangleEqual;":8940,"NotLess;":8814,"NotLessEqual;":8816,"NotLessGreater;":8824,"NotLessLess;":[8810,824],"NotLessSlantEqual;":[10877,824],"NotLessTilde;":8820,"NotNestedGreaterGreater;":[10914,824],"NotNestedLessLess;":[10913,824],"NotPrecedes;":8832,"NotPrecedesEqual;":[10927,824],"NotPrecedesSlantEqual;":8928,"NotReverseElement;":8716,"NotRightTriangle;":8939,"NotRightTriangleBar;":[10704,824],"NotRightTriangleEqual;":8941,"NotSquareSubset;":[8847,824],"NotSquareSubsetEqual;":8930,"NotSquareSuperset;":[8848,824],"NotSquareSupersetEqual;":8931,"NotSubset;":[8834,8402],"NotSubsetEqual;":8840,"NotSucceeds;":8833,"NotSucceedsEqual;":[10928,824],"NotSucceedsSlantEqual;":8929,"NotSucceedsTilde;":[8831,824],"NotSuperset;":[8835,8402],"NotSupersetEqual;":8841,"NotTilde;":8769,"NotTildeEqual;":8772,"NotTildeFullEqual;":8775,"NotTildeTilde;":8777,"NotVerticalBar;":8740,"Nscr;":[55349,56489],Ntilde:209,"Ntilde;":209,"Nu;":925,"OElig;":338,Oacute:211,"Oacute;":211,Ocirc:212,"Ocirc;":212,"Ocy;":1054,"Odblac;":336,"Ofr;":[55349,56594],Ograve:210,"Ograve;":210,"Omacr;":332,"Omega;":937,"Omicron;":927,"Oopf;":[55349,56646],"OpenCurlyDoubleQuote;":8220,"OpenCurlyQuote;":8216,"Or;":10836,"Oscr;":[55349,56490],Oslash:216,"Oslash;":216,Otilde:213,"Otilde;":213,"Otimes;":10807,Ouml:214,"Ouml;":214,"OverBar;":8254,"OverBrace;":9182,"OverBracket;":9140,"OverParenthesis;":9180,"PartialD;":8706,"Pcy;":1055,"Pfr;":[55349,56595],"Phi;":934,"Pi;":928,"PlusMinus;":177,"Poincareplane;":8460,"Popf;":8473,"Pr;":10939,"Precedes;":8826,"PrecedesEqual;":10927,"PrecedesSlantEqual;":8828,"PrecedesTilde;":8830,"Prime;":8243,"Product;":8719,"Proportion;":8759,"Proportional;":8733,"Pscr;":[55349,56491],"Psi;":936,QUOT:34,"QUOT;":34,"Qfr;":[55349,56596],"Qopf;":8474,"Qscr;":[55349,56492],"RBarr;":10512,REG:174,"REG;":174,"Racute;":340,"Rang;":10219,"Rarr;":8608,"Rarrtl;":10518,"Rcaron;":344,"Rcedil;":342,"Rcy;":1056,"Re;":8476,"ReverseElement;":8715,"ReverseEquilibrium;":8651,"ReverseUpEquilibrium;":10607,"Rfr;":8476,"Rho;":929,"RightAngleBracket;":10217,"RightArrow;":8594,"RightArrowBar;":8677,"RightArrowLeftArrow;":8644,"RightCeiling;":8969,"RightDoubleBracket;":10215,"RightDownTeeVector;":10589,"RightDownVector;":8642,"RightDownVectorBar;":10581,"RightFloor;":8971,"RightTee;":8866,"RightTeeArrow;":8614,"RightTeeVector;":10587,"RightTriangle;":8883,"RightTriangleBar;":10704,"RightTriangleEqual;":8885,"RightUpDownVector;":10575,"RightUpTeeVector;":10588,"RightUpVector;":8638,"RightUpVectorBar;":10580,"RightVector;":8640,"RightVectorBar;":10579,"Rightarrow;":8658,"Ropf;":8477,"RoundImplies;":10608,"Rrightarrow;":8667,"Rscr;":8475,"Rsh;":8625,"RuleDelayed;":10740,"SHCHcy;":1065,"SHcy;":1064,"SOFTcy;":1068,"Sacute;":346,"Sc;":10940,"Scaron;":352,"Scedil;":350,"Scirc;":348,"Scy;":1057,"Sfr;":[55349,56598],"ShortDownArrow;":8595,"ShortLeftArrow;":8592,"ShortRightArrow;":8594,"ShortUpArrow;":8593,"Sigma;":931,"SmallCircle;":8728,"Sopf;":[55349,56650],"Sqrt;":8730,"Square;":9633,"SquareIntersection;":8851,"SquareSubset;":8847,"SquareSubsetEqual;":8849,"SquareSuperset;":8848,"SquareSupersetEqual;":8850,"SquareUnion;":8852,"Sscr;":[55349,56494],"Star;":8902,"Sub;":8912,"Subset;":8912,"SubsetEqual;":8838,"Succeeds;":8827,"SucceedsEqual;":10928,"SucceedsSlantEqual;":8829,"SucceedsTilde;":8831,"SuchThat;":8715,"Sum;":8721,"Sup;":8913,"Superset;":8835,"SupersetEqual;":8839,"Supset;":8913,THORN:222,"THORN;":222,"TRADE;":8482,"TSHcy;":1035,"TScy;":1062,"Tab;":9,"Tau;":932,"Tcaron;":356,"Tcedil;":354,"Tcy;":1058,"Tfr;":[55349,56599],"Therefore;":8756,"Theta;":920,"ThickSpace;":[8287,8202],"ThinSpace;":8201,"Tilde;":8764,"TildeEqual;":8771,"TildeFullEqual;":8773,"TildeTilde;":8776,"Topf;":[55349,56651],"TripleDot;":8411,"Tscr;":[55349,56495],"Tstrok;":358,Uacute:218,"Uacute;":218,"Uarr;":8607,"Uarrocir;":10569,"Ubrcy;":1038,"Ubreve;":364,Ucirc:219,"Ucirc;":219,"Ucy;":1059,"Udblac;":368,"Ufr;":[55349,56600],Ugrave:217,"Ugrave;":217,"Umacr;":362,"UnderBar;":95,"UnderBrace;":9183,"UnderBracket;":9141,"UnderParenthesis;":9181,"Union;":8899,"UnionPlus;":8846,"Uogon;":370,"Uopf;":[55349,56652],"UpArrow;":8593,"UpArrowBar;":10514,"UpArrowDownArrow;":8645,"UpDownArrow;":8597,"UpEquilibrium;":10606,"UpTee;":8869,"UpTeeArrow;":8613,"Uparrow;":8657,"Updownarrow;":8661,"UpperLeftArrow;":8598,"UpperRightArrow;":8599,"Upsi;":978,"Upsilon;":933,"Uring;":366,"Uscr;":[55349,56496],"Utilde;":360,Uuml:220,"Uuml;":220,"VDash;":8875,"Vbar;":10987,"Vcy;":1042,"Vdash;":8873,"Vdashl;":10982,"Vee;":8897,"Verbar;":8214,"Vert;":8214,"VerticalBar;":8739,"VerticalLine;":124,"VerticalSeparator;":10072,"VerticalTilde;":8768,"VeryThinSpace;":8202,"Vfr;":[55349,56601],"Vopf;":[55349,56653],"Vscr;":[55349,56497],"Vvdash;":8874,"Wcirc;":372,"Wedge;":8896,"Wfr;":[55349,56602],"Wopf;":[55349,56654],"Wscr;":[55349,56498],"Xfr;":[55349,56603],"Xi;":926,"Xopf;":[55349,56655],"Xscr;":[55349,56499],"YAcy;":1071,"YIcy;":1031,"YUcy;":1070,Yacute:221,"Yacute;":221,"Ycirc;":374,"Ycy;":1067,"Yfr;":[55349,56604],"Yopf;":[55349,56656],"Yscr;":[55349,56500],"Yuml;":376,"ZHcy;":1046,"Zacute;":377,"Zcaron;":381,"Zcy;":1047,"Zdot;":379,"ZeroWidthSpace;":8203,"Zeta;":918,"Zfr;":8488,"Zopf;":8484,"Zscr;":[55349,56501],aacute:225,"aacute;":225,"abreve;":259,"ac;":8766,"acE;":[8766,819],"acd;":8767,acirc:226,"acirc;":226,acute:180,"acute;":180,"acy;":1072,aelig:230,"aelig;":230,"af;":8289,"afr;":[55349,56606],agrave:224,"agrave;":224,"alefsym;":8501,"aleph;":8501,"alpha;":945,"amacr;":257,"amalg;":10815,amp:38,"amp;":38,"and;":8743,"andand;":10837,"andd;":10844,"andslope;":10840,"andv;":10842,"ang;":8736,"ange;":10660,"angle;":8736,"angmsd;":8737,"angmsdaa;":10664,"angmsdab;":10665,"angmsdac;":10666,"angmsdad;":10667,"angmsdae;":10668,"angmsdaf;":10669,"angmsdag;":10670,"angmsdah;":10671,"angrt;":8735,"angrtvb;":8894,"angrtvbd;":10653,"angsph;":8738,"angst;":197,"angzarr;":9084,"aogon;":261,"aopf;":[55349,56658],"ap;":8776,"apE;":10864,"apacir;":10863,"ape;":8778,"apid;":8779,"apos;":39,"approx;":8776,"approxeq;":8778,aring:229,"aring;":229,"ascr;":[55349,56502],"ast;":42,"asymp;":8776,"asympeq;":8781,atilde:227,"atilde;":227,auml:228,"auml;":228,"awconint;":8755,"awint;":10769,"bNot;":10989,"backcong;":8780,"backepsilon;":1014,"backprime;":8245,"backsim;":8765,"backsimeq;":8909,"barvee;":8893,"barwed;":8965,"barwedge;":8965,"bbrk;":9141,"bbrktbrk;":9142,"bcong;":8780,"bcy;":1073,"bdquo;":8222,"becaus;":8757,"because;":8757,"bemptyv;":10672,"bepsi;":1014,"bernou;":8492,"beta;":946,"beth;":8502,"between;":8812,"bfr;":[55349,56607],"bigcap;":8898,"bigcirc;":9711,"bigcup;":8899,"bigodot;":10752,"bigoplus;":10753,"bigotimes;":10754,"bigsqcup;":10758,"bigstar;":9733,"bigtriangledown;":9661,"bigtriangleup;":9651,"biguplus;":10756,"bigvee;":8897,"bigwedge;":8896,"bkarow;":10509,"blacklozenge;":10731,"blacksquare;":9642,"blacktriangle;":9652,"blacktriangledown;":9662,"blacktriangleleft;":9666,"blacktriangleright;":9656,"blank;":9251,"blk12;":9618,"blk14;":9617,"blk34;":9619,"block;":9608,"bne;":[61,8421],"bnequiv;":[8801,8421],"bnot;":8976,"bopf;":[55349,56659],"bot;":8869,"bottom;":8869,"bowtie;":8904,"boxDL;":9559,"boxDR;":9556,"boxDl;":9558,"boxDr;":9555,"boxH;":9552,"boxHD;":9574,"boxHU;":9577,"boxHd;":9572,"boxHu;":9575,"boxUL;":9565,"boxUR;":9562,"boxUl;":9564,"boxUr;":9561,"boxV;":9553,"boxVH;":9580,"boxVL;":9571,"boxVR;":9568,"boxVh;":9579,"boxVl;":9570,"boxVr;":9567,"boxbox;":10697,"boxdL;":9557,"boxdR;":9554,"boxdl;":9488,"boxdr;":9484,"boxh;":9472,"boxhD;":9573,"boxhU;":9576,"boxhd;":9516,"boxhu;":9524,"boxminus;":8863,"boxplus;":8862,"boxtimes;":8864,"boxuL;":9563,"boxuR;":9560,"boxul;":9496,"boxur;":9492,"boxv;":9474,"boxvH;":9578,"boxvL;":9569,"boxvR;":9566,"boxvh;":9532,"boxvl;":9508,"boxvr;":9500,"bprime;":8245,"breve;":728,brvbar:166,"brvbar;":166,"bscr;":[55349,56503],"bsemi;":8271,"bsim;":8765,"bsime;":8909,"bsol;":92,"bsolb;":10693,"bsolhsub;":10184,"bull;":8226,"bullet;":8226,"bump;":8782,"bumpE;":10926,"bumpe;":8783,"bumpeq;":8783,"cacute;":263,"cap;":8745,"capand;":10820,"capbrcup;":10825,"capcap;":10827,"capcup;":10823,"capdot;":10816,"caps;":[8745,65024],"caret;":8257,"caron;":711,"ccaps;":10829,"ccaron;":269,ccedil:231,"ccedil;":231,"ccirc;":265,"ccups;":10828,"ccupssm;":10832,"cdot;":267,cedil:184,"cedil;":184,"cemptyv;":10674,cent:162,"cent;":162,"centerdot;":183,"cfr;":[55349,56608],"chcy;":1095,"check;":10003,"checkmark;":10003,"chi;":967,"cir;":9675,"cirE;":10691,"circ;":710,"circeq;":8791,"circlearrowleft;":8634,"circlearrowright;":8635,"circledR;":174,"circledS;":9416,"circledast;":8859,"circledcirc;":8858,"circleddash;":8861,"cire;":8791,"cirfnint;":10768,"cirmid;":10991,"cirscir;":10690,"clubs;":9827,"clubsuit;":9827,"colon;":58,"colone;":8788,"coloneq;":8788,"comma;":44,"commat;":64,"comp;":8705,"compfn;":8728,"complement;":8705,"complexes;":8450,"cong;":8773,"congdot;":10861,"conint;":8750,"copf;":[55349,56660],"coprod;":8720,copy:169,"copy;":169,"copysr;":8471,"crarr;":8629,"cross;":10007,"cscr;":[55349,56504],"csub;":10959,"csube;":10961,"csup;":10960,"csupe;":10962,"ctdot;":8943,"cudarrl;":10552,"cudarrr;":10549,"cuepr;":8926,"cuesc;":8927,"cularr;":8630,"cularrp;":10557,"cup;":8746,"cupbrcap;":10824,"cupcap;":10822,"cupcup;":10826,"cupdot;":8845,"cupor;":10821,"cups;":[8746,65024],"curarr;":8631,"curarrm;":10556,"curlyeqprec;":8926,"curlyeqsucc;":8927,"curlyvee;":8910,"curlywedge;":8911,curren:164,"curren;":164,"curvearrowleft;":8630,"curvearrowright;":8631,"cuvee;":8910,"cuwed;":8911,"cwconint;":8754,"cwint;":8753,"cylcty;":9005,"dArr;":8659,"dHar;":10597,"dagger;":8224,"daleth;":8504,"darr;":8595,"dash;":8208,"dashv;":8867,"dbkarow;":10511,"dblac;":733,"dcaron;":271,"dcy;":1076,"dd;":8518,"ddagger;":8225,"ddarr;":8650,"ddotseq;":10871,deg:176,"deg;":176,"delta;":948,"demptyv;":10673,"dfisht;":10623,"dfr;":[55349,56609],"dharl;":8643,"dharr;":8642,"diam;":8900,"diamond;":8900,"diamondsuit;":9830,"diams;":9830,"die;":168,"digamma;":989,"disin;":8946,"div;":247,divide:247,"divide;":247,"divideontimes;":8903,"divonx;":8903,"djcy;":1106,"dlcorn;":8990,"dlcrop;":8973,"dollar;":36,"dopf;":[55349,56661],"dot;":729,"doteq;":8784,"doteqdot;":8785,"dotminus;":8760,"dotplus;":8724,"dotsquare;":8865,"doublebarwedge;":8966,"downarrow;":8595,"downdownarrows;":8650,"downharpoonleft;":8643,"downharpoonright;":8642,"drbkarow;":10512,"drcorn;":8991,"drcrop;":8972,"dscr;":[55349,56505],"dscy;":1109,"dsol;":10742,"dstrok;":273,"dtdot;":8945,"dtri;":9663,"dtrif;":9662,"duarr;":8693,"duhar;":10607,"dwangle;":10662,"dzcy;":1119,"dzigrarr;":10239,"eDDot;":10871,"eDot;":8785,eacute:233,"eacute;":233,"easter;":10862,"ecaron;":283,"ecir;":8790,ecirc:234,"ecirc;":234,"ecolon;":8789,"ecy;":1101,"edot;":279,"ee;":8519,"efDot;":8786,"efr;":[55349,56610],"eg;":10906,egrave:232,"egrave;":232,"egs;":10902,"egsdot;":10904,"el;":10905,"elinters;":9191,"ell;":8467,"els;":10901,"elsdot;":10903,"emacr;":275,"empty;":8709,"emptyset;":8709,"emptyv;":8709,"emsp13;":8196,"emsp14;":8197,"emsp;":8195,"eng;":331,"ensp;":8194,"eogon;":281,"eopf;":[55349,56662],"epar;":8917,"eparsl;":10723,"eplus;":10865,"epsi;":949,"epsilon;":949,"epsiv;":1013,"eqcirc;":8790,"eqcolon;":8789,"eqsim;":8770,"eqslantgtr;":10902,"eqslantless;":10901,"equals;":61,"equest;":8799,"equiv;":8801,"equivDD;":10872,"eqvparsl;":10725,"erDot;":8787,"erarr;":10609,"escr;":8495,"esdot;":8784,"esim;":8770,"eta;":951,eth:240,"eth;":240,euml:235,"euml;":235,"euro;":8364,"excl;":33,"exist;":8707,"expectation;":8496,"exponentiale;":8519,"fallingdotseq;":8786,"fcy;":1092,"female;":9792,"ffilig;":64259,"fflig;":64256,"ffllig;":64260,"ffr;":[55349,56611],"filig;":64257,"fjlig;":[102,106],"flat;":9837,"fllig;":64258,"fltns;":9649,"fnof;":402,"fopf;":[55349,56663],"forall;":8704,"fork;":8916,"forkv;":10969,"fpartint;":10765,frac12:189,"frac12;":189,"frac13;":8531,frac14:188,"frac14;":188,"frac15;":8533,"frac16;":8537,"frac18;":8539,"frac23;":8532,"frac25;":8534,frac34:190,"frac34;":190,"frac35;":8535,"frac38;":8540,"frac45;":8536,"frac56;":8538,"frac58;":8541,"frac78;":8542,"frasl;":8260,"frown;":8994,"fscr;":[55349,56507],"gE;":8807,"gEl;":10892,"gacute;":501,"gamma;":947,"gammad;":989,"gap;":10886,"gbreve;":287,"gcirc;":285,"gcy;":1075,"gdot;":289,"ge;":8805,"gel;":8923,"geq;":8805,"geqq;":8807,"geqslant;":10878,"ges;":10878,"gescc;":10921,"gesdot;":10880,"gesdoto;":10882,"gesdotol;":10884,"gesl;":[8923,65024],"gesles;":10900,"gfr;":[55349,56612],"gg;":8811,"ggg;":8921,"gimel;":8503,"gjcy;":1107,"gl;":8823,"glE;":10898,"gla;":10917,"glj;":10916,"gnE;":8809,"gnap;":10890,"gnapprox;":10890,"gne;":10888,"gneq;":10888,"gneqq;":8809,"gnsim;":8935,"gopf;":[55349,56664],"grave;":96,"gscr;":8458,"gsim;":8819,"gsime;":10894,"gsiml;":10896,gt:62,"gt;":62,"gtcc;":10919,"gtcir;":10874,"gtdot;":8919,"gtlPar;":10645,"gtquest;":10876,"gtrapprox;":10886,"gtrarr;":10616,"gtrdot;":8919,"gtreqless;":8923,"gtreqqless;":10892,"gtrless;":8823,"gtrsim;":8819,"gvertneqq;":[8809,65024],"gvnE;":[8809,65024],"hArr;":8660,"hairsp;":8202,"half;":189,"hamilt;":8459,"hardcy;":1098,"harr;":8596,"harrcir;":10568,"harrw;":8621,"hbar;":8463,"hcirc;":293,"hearts;":9829,"heartsuit;":9829,"hellip;":8230,"hercon;":8889,"hfr;":[55349,56613],"hksearow;":10533,"hkswarow;":10534,"hoarr;":8703,"homtht;":8763,"hookleftarrow;":8617,"hookrightarrow;":8618,"hopf;":[55349,56665],"horbar;":8213,"hscr;":[55349,56509],"hslash;":8463,"hstrok;":295,"hybull;":8259,"hyphen;":8208,iacute:237,"iacute;":237,"ic;":8291,icirc:238,"icirc;":238,"icy;":1080,"iecy;":1077,iexcl:161,"iexcl;":161,"iff;":8660,"ifr;":[55349,56614],igrave:236,"igrave;":236,"ii;":8520,"iiiint;":10764,"iiint;":8749,"iinfin;":10716,"iiota;":8489,"ijlig;":307,"imacr;":299,"image;":8465,"imagline;":8464,"imagpart;":8465,"imath;":305,"imof;":8887,"imped;":437,"in;":8712,"incare;":8453,"infin;":8734,"infintie;":10717,"inodot;":305,"int;":8747,"intcal;":8890,"integers;":8484,"intercal;":8890,"intlarhk;":10775,"intprod;":10812,"iocy;":1105,"iogon;":303,"iopf;":[55349,56666],"iota;":953,"iprod;":10812,iquest:191,"iquest;":191,"iscr;":[55349,56510],"isin;":8712,"isinE;":8953,"isindot;":8949,"isins;":8948,"isinsv;":8947,"isinv;":8712,"it;":8290,"itilde;":297,"iukcy;":1110,iuml:239,"iuml;":239,"jcirc;":309,"jcy;":1081,"jfr;":[55349,56615],"jmath;":567,"jopf;":[55349,56667],"jscr;":[55349,56511],"jsercy;":1112,"jukcy;":1108,"kappa;":954,"kappav;":1008,"kcedil;":311,"kcy;":1082,"kfr;":[55349,56616],"kgreen;":312,"khcy;":1093,"kjcy;":1116,"kopf;":[55349,56668],"kscr;":[55349,56512],"lAarr;":8666,"lArr;":8656,"lAtail;":10523,"lBarr;":10510,"lE;":8806,"lEg;":10891,"lHar;":10594,"lacute;":314,"laemptyv;":10676,"lagran;":8466,"lambda;":955,"lang;":10216,"langd;":10641,"langle;":10216,"lap;":10885,laquo:171,"laquo;":171,"larr;":8592,"larrb;":8676,"larrbfs;":10527,"larrfs;":10525,"larrhk;":8617,"larrlp;":8619,"larrpl;":10553,"larrsim;":10611,"larrtl;":8610,"lat;":10923,"latail;":10521,"late;":10925,"lates;":[10925,65024],"lbarr;":10508,"lbbrk;":10098,"lbrace;":123,"lbrack;":91,"lbrke;":10635,"lbrksld;":10639,"lbrkslu;":10637,"lcaron;":318,"lcedil;":316,"lceil;":8968,"lcub;":123,"lcy;":1083,"ldca;":10550,"ldquo;":8220,"ldquor;":8222,"ldrdhar;":10599,"ldrushar;":10571,"ldsh;":8626,"le;":8804,"leftarrow;":8592,"leftarrowtail;":8610,"leftharpoondown;":8637,"leftharpoonup;":8636,"leftleftarrows;":8647,"leftrightarrow;":8596,"leftrightarrows;":8646,"leftrightharpoons;":8651,"leftrightsquigarrow;":8621,"leftthreetimes;":8907,"leg;":8922,"leq;":8804,"leqq;":8806,"leqslant;":10877,"les;":10877,"lescc;":10920,"lesdot;":10879,"lesdoto;":10881,"lesdotor;":10883,"lesg;":[8922,65024],"lesges;":10899,"lessapprox;":10885,"lessdot;":8918,"lesseqgtr;":8922,"lesseqqgtr;":10891,"lessgtr;":8822,"lesssim;":8818,"lfisht;":10620,"lfloor;":8970,"lfr;":[55349,56617],"lg;":8822,"lgE;":10897,"lhard;":8637,"lharu;":8636,"lharul;":10602,"lhblk;":9604,"ljcy;":1113,"ll;":8810,"llarr;":8647,"llcorner;":8990,"llhard;":10603,"lltri;":9722,"lmidot;":320,"lmoust;":9136,"lmoustache;":9136,"lnE;":8808,"lnap;":10889,"lnapprox;":10889,"lne;":10887,"lneq;":10887,"lneqq;":8808,"lnsim;":8934,"loang;":10220,"loarr;":8701,"lobrk;":10214,"longleftarrow;":10229,"longleftrightarrow;":10231,"longmapsto;":10236,"longrightarrow;":10230,"looparrowleft;":8619,"looparrowright;":8620,"lopar;":10629,"lopf;":[55349,56669],"loplus;":10797,"lotimes;":10804,"lowast;":8727,"lowbar;":95,"loz;":9674,"lozenge;":9674,"lozf;":10731,"lpar;":40,"lparlt;":10643,"lrarr;":8646,"lrcorner;":8991,"lrhar;":8651,"lrhard;":10605,"lrm;":8206,"lrtri;":8895,"lsaquo;":8249,"lscr;":[55349,56513],"lsh;":8624,"lsim;":8818,"lsime;":10893,"lsimg;":10895,"lsqb;":91,"lsquo;":8216,"lsquor;":8218,"lstrok;":322,lt:60,"lt;":60,"ltcc;":10918,"ltcir;":10873,"ltdot;":8918,"lthree;":8907,"ltimes;":8905,"ltlarr;":10614,"ltquest;":10875,"ltrPar;":10646,"ltri;":9667,"ltrie;":8884,"ltrif;":9666,"lurdshar;":10570,"luruhar;":10598,"lvertneqq;":[8808,65024],"lvnE;":[8808,65024],"mDDot;":8762,macr:175,"macr;":175,"male;":9794,"malt;":10016,"maltese;":10016,"map;":8614,"mapsto;":8614,"mapstodown;":8615,"mapstoleft;":8612,"mapstoup;":8613,"marker;":9646,"mcomma;":10793,"mcy;":1084,"mdash;":8212,"measuredangle;":8737,"mfr;":[55349,56618],"mho;":8487,micro:181,"micro;":181,"mid;":8739,"midast;":42,"midcir;":10992,middot:183,"middot;":183,"minus;":8722,"minusb;":8863,"minusd;":8760,"minusdu;":10794,"mlcp;":10971,"mldr;":8230,"mnplus;":8723,"models;":8871,"mopf;":[55349,56670],"mp;":8723,"mscr;":[55349,56514],"mstpos;":8766,"mu;":956,"multimap;":8888,"mumap;":8888,"nGg;":[8921,824],"nGt;":[8811,8402],"nGtv;":[8811,824],"nLeftarrow;":8653,"nLeftrightarrow;":8654,"nLl;":[8920,824],"nLt;":[8810,8402],"nLtv;":[8810,824],"nRightarrow;":8655,"nVDash;":8879,"nVdash;":8878,"nabla;":8711,"nacute;":324,"nang;":[8736,8402],"nap;":8777,"napE;":[10864,824],"napid;":[8779,824],"napos;":329,"napprox;":8777,"natur;":9838,"natural;":9838,"naturals;":8469,nbsp:160,"nbsp;":160,"nbump;":[8782,824],"nbumpe;":[8783,824],"ncap;":10819,"ncaron;":328,"ncedil;":326,"ncong;":8775,"ncongdot;":[10861,824],"ncup;":10818,"ncy;":1085,"ndash;":8211,"ne;":8800,"neArr;":8663,"nearhk;":10532,"nearr;":8599,"nearrow;":8599,"nedot;":[8784,824],"nequiv;":8802,"nesear;":10536,"nesim;":[8770,824],"nexist;":8708,"nexists;":8708,"nfr;":[55349,56619],"ngE;":[8807,824],"nge;":8817,"ngeq;":8817,"ngeqq;":[8807,824],"ngeqslant;":[10878,824],"nges;":[10878,824],"ngsim;":8821,"ngt;":8815,"ngtr;":8815,"nhArr;":8654,"nharr;":8622,"nhpar;":10994,"ni;":8715,"nis;":8956,"nisd;":8954,"niv;":8715,"njcy;":1114,"nlArr;":8653,"nlE;":[8806,824],"nlarr;":8602,"nldr;":8229,"nle;":8816,"nleftarrow;":8602,"nleftrightarrow;":8622,"nleq;":8816,"nleqq;":[8806,824],"nleqslant;":[10877,824],"nles;":[10877,824],"nless;":8814,"nlsim;":8820,"nlt;":8814,"nltri;":8938,"nltrie;":8940,"nmid;":8740,"nopf;":[55349,56671],not:172,"not;":172,"notin;":8713,"notinE;":[8953,824],"notindot;":[8949,824],"notinva;":8713,"notinvb;":8951,"notinvc;":8950,"notni;":8716,"notniva;":8716,"notnivb;":8958,"notnivc;":8957,"npar;":8742,"nparallel;":8742,"nparsl;":[11005,8421],"npart;":[8706,824],"npolint;":10772,"npr;":8832,"nprcue;":8928,"npre;":[10927,824],"nprec;":8832,"npreceq;":[10927,824],"nrArr;":8655,"nrarr;":8603,"nrarrc;":[10547,824],"nrarrw;":[8605,824],"nrightarrow;":8603,"nrtri;":8939,"nrtrie;":8941,"nsc;":8833,"nsccue;":8929,"nsce;":[10928,824],"nscr;":[55349,56515],"nshortmid;":8740,"nshortparallel;":8742,"nsim;":8769,"nsime;":8772,"nsimeq;":8772,"nsmid;":8740,"nspar;":8742,"nsqsube;":8930,"nsqsupe;":8931,"nsub;":8836,"nsubE;":[10949,824],"nsube;":8840,"nsubset;":[8834,8402],"nsubseteq;":8840,"nsubseteqq;":[10949,824],"nsucc;":8833,"nsucceq;":[10928,824],"nsup;":8837,"nsupE;":[10950,824],"nsupe;":8841,"nsupset;":[8835,8402],"nsupseteq;":8841,"nsupseteqq;":[10950,824],"ntgl;":8825,ntilde:241,"ntilde;":241,"ntlg;":8824,"ntriangleleft;":8938,"ntrianglelefteq;":8940,"ntriangleright;":8939,"ntrianglerighteq;":8941,"nu;":957,"num;":35,"numero;":8470,"numsp;":8199,"nvDash;":8877,"nvHarr;":10500,"nvap;":[8781,8402],"nvdash;":8876,"nvge;":[8805,8402],"nvgt;":[62,8402],"nvinfin;":10718,"nvlArr;":10498,"nvle;":[8804,8402],"nvlt;":[60,8402],"nvltrie;":[8884,8402],"nvrArr;":10499,"nvrtrie;":[8885,8402],"nvsim;":[8764,8402],"nwArr;":8662,"nwarhk;":10531,"nwarr;":8598,"nwarrow;":8598,"nwnear;":10535,"oS;":9416,oacute:243,"oacute;":243,"oast;":8859,"ocir;":8858,ocirc:244,"ocirc;":244,"ocy;":1086,"odash;":8861,"odblac;":337,"odiv;":10808,"odot;":8857,"odsold;":10684,"oelig;":339,"ofcir;":10687,"ofr;":[55349,56620],"ogon;":731,ograve:242,"ograve;":242,"ogt;":10689,"ohbar;":10677,"ohm;":937,"oint;":8750,"olarr;":8634,"olcir;":10686,"olcross;":10683,"oline;":8254,"olt;":10688,"omacr;":333,"omega;":969,"omicron;":959,"omid;":10678,"ominus;":8854,"oopf;":[55349,56672],"opar;":10679,"operp;":10681,"oplus;":8853,"or;":8744,"orarr;":8635,"ord;":10845,"order;":8500,"orderof;":8500,ordf:170,"ordf;":170,ordm:186,"ordm;":186,"origof;":8886,"oror;":10838,"orslope;":10839,"orv;":10843,"oscr;":8500,oslash:248,"oslash;":248,"osol;":8856,otilde:245,"otilde;":245,"otimes;":8855,"otimesas;":10806,ouml:246,"ouml;":246,"ovbar;":9021,"par;":8741,para:182,"para;":182,"parallel;":8741,"parsim;":10995,"parsl;":11005,"part;":8706,"pcy;":1087,"percnt;":37,"period;":46,"permil;":8240,"perp;":8869,"pertenk;":8241,"pfr;":[55349,56621],"phi;":966,"phiv;":981,"phmmat;":8499,"phone;":9742,"pi;":960,"pitchfork;":8916,"piv;":982,"planck;":8463,"planckh;":8462,"plankv;":8463,"plus;":43,"plusacir;":10787,"plusb;":8862,"pluscir;":10786,"plusdo;":8724,"plusdu;":10789,"pluse;":10866,plusmn:177,"plusmn;":177,"plussim;":10790,"plustwo;":10791,"pm;":177,"pointint;":10773,"popf;":[55349,56673],pound:163,"pound;":163,"pr;":8826,"prE;":10931,"prap;":10935,"prcue;":8828,"pre;":10927,"prec;":8826,"precapprox;":10935,"preccurlyeq;":8828,"preceq;":10927,"precnapprox;":10937,"precneqq;":10933,"precnsim;":8936,"precsim;":8830,"prime;":8242,"primes;":8473,"prnE;":10933,"prnap;":10937,"prnsim;":8936,"prod;":8719,"profalar;":9006,"profline;":8978,"profsurf;":8979,"prop;":8733,"propto;":8733,"prsim;":8830,"prurel;":8880,"pscr;":[55349,56517],"psi;":968,"puncsp;":8200,"qfr;":[55349,56622],"qint;":10764,"qopf;":[55349,56674],"qprime;":8279,"qscr;":[55349,56518],"quaternions;":8461,"quatint;":10774,"quest;":63,"questeq;":8799,quot:34,"quot;":34,"rAarr;":8667,"rArr;":8658,"rAtail;":10524,"rBarr;":10511,"rHar;":10596,"race;":[8765,817],"racute;":341,"radic;":8730,"raemptyv;":10675,"rang;":10217,"rangd;":10642,"range;":10661,"rangle;":10217,raquo:187,"raquo;":187,"rarr;":8594,"rarrap;":10613,"rarrb;":8677,"rarrbfs;":10528,"rarrc;":10547,"rarrfs;":10526,"rarrhk;":8618,"rarrlp;":8620,"rarrpl;":10565,"rarrsim;":10612,"rarrtl;":8611,"rarrw;":8605,"ratail;":10522,"ratio;":8758,"rationals;":8474,"rbarr;":10509,"rbbrk;":10099,"rbrace;":125,"rbrack;":93,"rbrke;":10636,"rbrksld;":10638,"rbrkslu;":10640,"rcaron;":345,"rcedil;":343,"rceil;":8969,"rcub;":125,"rcy;":1088,"rdca;":10551,"rdldhar;":10601,"rdquo;":8221,"rdquor;":8221,"rdsh;":8627,"real;":8476,"realine;":8475,"realpart;":8476,"reals;":8477,"rect;":9645,reg:174,"reg;":174,"rfisht;":10621,"rfloor;":8971,"rfr;":[55349,56623],"rhard;":8641,"rharu;":8640,"rharul;":10604,"rho;":961,"rhov;":1009,"rightarrow;":8594,"rightarrowtail;":8611,"rightharpoondown;":8641,"rightharpoonup;":8640,"rightleftarrows;":8644,"rightleftharpoons;":8652,"rightrightarrows;":8649,"rightsquigarrow;":8605,"rightthreetimes;":8908,"ring;":730,"risingdotseq;":8787,"rlarr;":8644,"rlhar;":8652,"rlm;":8207,"rmoust;":9137,"rmoustache;":9137,"rnmid;":10990,"roang;":10221,"roarr;":8702,"robrk;":10215,"ropar;":10630,"ropf;":[55349,56675],"roplus;":10798,"rotimes;":10805,"rpar;":41,"rpargt;":10644,"rppolint;":10770,"rrarr;":8649,"rsaquo;":8250,"rscr;":[55349,56519],"rsh;":8625,"rsqb;":93,"rsquo;":8217,"rsquor;":8217,"rthree;":8908,"rtimes;":8906,"rtri;":9657,"rtrie;":8885,"rtrif;":9656,"rtriltri;":10702,"ruluhar;":10600,"rx;":8478,"sacute;":347,"sbquo;":8218,"sc;":8827,"scE;":10932,"scap;":10936,"scaron;":353,"sccue;":8829,"sce;":10928,"scedil;":351,"scirc;":349,"scnE;":10934,"scnap;":10938,"scnsim;":8937,"scpolint;":10771,"scsim;":8831,"scy;":1089,"sdot;":8901,"sdotb;":8865,"sdote;":10854,"seArr;":8664,"searhk;":10533,"searr;":8600,"searrow;":8600,sect:167,"sect;":167,"semi;":59,"seswar;":10537,"setminus;":8726,"setmn;":8726,"sext;":10038,"sfr;":[55349,56624],"sfrown;":8994,"sharp;":9839,"shchcy;":1097,"shcy;":1096,"shortmid;":8739,"shortparallel;":8741,shy:173,"shy;":173,"sigma;":963,"sigmaf;":962,"sigmav;":962,"sim;":8764,"simdot;":10858,"sime;":8771,"simeq;":8771,"simg;":10910,"simgE;":10912,"siml;":10909,"simlE;":10911,"simne;":8774,"simplus;":10788,"simrarr;":10610,"slarr;":8592,"smallsetminus;":8726,"smashp;":10803,"smeparsl;":10724,"smid;":8739,"smile;":8995,"smt;":10922,"smte;":10924,"smtes;":[10924,65024],"softcy;":1100,"sol;":47,"solb;":10692,"solbar;":9023,"sopf;":[55349,56676],"spades;":9824,"spadesuit;":9824,"spar;":8741,"sqcap;":8851,"sqcaps;":[8851,65024],"sqcup;":8852,"sqcups;":[8852,65024],"sqsub;":8847,"sqsube;":8849,"sqsubset;":8847,"sqsubseteq;":8849,"sqsup;":8848,"sqsupe;":8850,"sqsupset;":8848,"sqsupseteq;":8850,"squ;":9633,"square;":9633,"squarf;":9642,"squf;":9642,"srarr;":8594,"sscr;":[55349,56520],"ssetmn;":8726,"ssmile;":8995,"sstarf;":8902,"star;":9734,"starf;":9733,"straightepsilon;":1013,"straightphi;":981,"strns;":175,"sub;":8834,"subE;":10949,"subdot;":10941,"sube;":8838,"subedot;":10947,"submult;":10945,"subnE;":10955,"subne;":8842,"subplus;":10943,"subrarr;":10617,"subset;":8834,"subseteq;":8838,"subseteqq;":10949,"subsetneq;":8842,"subsetneqq;":10955,"subsim;":10951,"subsub;":10965,"subsup;":10963,"succ;":8827,"succapprox;":10936,"succcurlyeq;":8829,"succeq;":10928,"succnapprox;":10938,"succneqq;":10934,"succnsim;":8937,"succsim;":8831,"sum;":8721,"sung;":9834,sup1:185,"sup1;":185,sup2:178,"sup2;":178,sup3:179,"sup3;":179,"sup;":8835,"supE;":10950,"supdot;":10942,"supdsub;":10968,"supe;":8839,"supedot;":10948,"suphsol;":10185,"suphsub;":10967,"suplarr;":10619,"supmult;":10946,"supnE;":10956,"supne;":8843,"supplus;":10944,"supset;":8835,"supseteq;":8839,"supseteqq;":10950,"supsetneq;":8843,"supsetneqq;":10956,"supsim;":10952,"supsub;":10964,"supsup;":10966,"swArr;":8665,"swarhk;":10534,"swarr;":8601,"swarrow;":8601,"swnwar;":10538,szlig:223,"szlig;":223,"target;":8982,"tau;":964,"tbrk;":9140,"tcaron;":357,"tcedil;":355,"tcy;":1090,"tdot;":8411,"telrec;":8981,"tfr;":[55349,56625],"there4;":8756,"therefore;":8756,"theta;":952,"thetasym;":977,"thetav;":977,"thickapprox;":8776,"thicksim;":8764,"thinsp;":8201,"thkap;":8776,"thksim;":8764,thorn:254,"thorn;":254,"tilde;":732,times:215,"times;":215,"timesb;":8864,"timesbar;":10801,"timesd;":10800,"tint;":8749,"toea;":10536,"top;":8868,"topbot;":9014,"topcir;":10993,"topf;":[55349,56677],"topfork;":10970,"tosa;":10537,"tprime;":8244,"trade;":8482,"triangle;":9653,"triangledown;":9663,"triangleleft;":9667,"trianglelefteq;":8884,"triangleq;":8796,"triangleright;":9657,"trianglerighteq;":8885,"tridot;":9708,"trie;":8796,"triminus;":10810,"triplus;":10809,"trisb;":10701,"tritime;":10811,"trpezium;":9186,"tscr;":[55349,56521],"tscy;":1094,"tshcy;":1115,"tstrok;":359,"twixt;":8812,"twoheadleftarrow;":8606,"twoheadrightarrow;":8608,"uArr;":8657,"uHar;":10595,uacute:250,"uacute;":250,"uarr;":8593,"ubrcy;":1118,"ubreve;":365,ucirc:251,"ucirc;":251,"ucy;":1091,"udarr;":8645,"udblac;":369,"udhar;":10606,"ufisht;":10622,"ufr;":[55349,56626],ugrave:249,"ugrave;":249,"uharl;":8639,"uharr;":8638,"uhblk;":9600,"ulcorn;":8988,"ulcorner;":8988,"ulcrop;":8975,"ultri;":9720,"umacr;":363,uml:168,"uml;":168,"uogon;":371,"uopf;":[55349,56678],"uparrow;":8593,"updownarrow;":8597,"upharpoonleft;":8639,"upharpoonright;":8638,"uplus;":8846,"upsi;":965,"upsih;":978,"upsilon;":965,"upuparrows;":8648,"urcorn;":8989,"urcorner;":8989,"urcrop;":8974,"uring;":367,"urtri;":9721,"uscr;":[55349,56522],"utdot;":8944,"utilde;":361,"utri;":9653,"utrif;":9652,"uuarr;":8648,uuml:252,"uuml;":252,"uwangle;":10663,"vArr;":8661,"vBar;":10984,"vBarv;":10985,"vDash;":8872,"vangrt;":10652,"varepsilon;":1013,"varkappa;":1008,"varnothing;":8709,"varphi;":981,"varpi;":982,"varpropto;":8733,"varr;":8597,"varrho;":1009,"varsigma;":962,"varsubsetneq;":[8842,65024],"varsubsetneqq;":[10955,65024],"varsupsetneq;":[8843,65024],"varsupsetneqq;":[10956,65024],"vartheta;":977,"vartriangleleft;":8882,"vartriangleright;":8883,"vcy;":1074,"vdash;":8866,"vee;":8744,"veebar;":8891,"veeeq;":8794,"vellip;":8942,"verbar;":124,"vert;":124,"vfr;":[55349,56627],"vltri;":8882,"vnsub;":[8834,8402],"vnsup;":[8835,8402],"vopf;":[55349,56679],"vprop;":8733,"vrtri;":8883,"vscr;":[55349,56523],"vsubnE;":[10955,65024],"vsubne;":[8842,65024],"vsupnE;":[10956,65024],"vsupne;":[8843,65024],"vzigzag;":10650,"wcirc;":373,"wedbar;":10847,"wedge;":8743,"wedgeq;":8793,"weierp;":8472,"wfr;":[55349,56628],"wopf;":[55349,56680],"wp;":8472,"wr;":8768,"wreath;":8768,"wscr;":[55349,56524],"xcap;":8898,"xcirc;":9711,"xcup;":8899,"xdtri;":9661,"xfr;":[55349,56629],"xhArr;":10234,"xharr;":10231,"xi;":958,"xlArr;":10232,"xlarr;":10229,"xmap;":10236,"xnis;":8955,"xodot;":10752,"xopf;":[55349,56681],"xoplus;":10753,"xotime;":10754,"xrArr;":10233,"xrarr;":10230,"xscr;":[55349,56525],"xsqcup;":10758,"xuplus;":10756,"xutri;":9651,"xvee;":8897,"xwedge;":8896,yacute:253,"yacute;":253,"yacy;":1103,"ycirc;":375,"ycy;":1099,yen:165,"yen;":165,"yfr;":[55349,56630],"yicy;":1111,"yopf;":[55349,56682],"yscr;":[55349,56526],"yucy;":1102,yuml:255,"yuml;":255,"zacute;":378,"zcaron;":382,"zcy;":1079,"zdot;":380,"zeetrf;":8488,"zeta;":950,"zfr;":[55349,56631],"zhcy;":1078,"zigrarr;":8669,"zopf;":[55349,56683],"zscr;":[55349,56527],"zwj;":8205,"zwnj;":8204},U=/(A(?:Elig;?|MP;?|acute;?|breve;|c(?:irc;?|y;)|fr;|grave;?|lpha;|macr;|nd;|o(?:gon;|pf;)|pplyFunction;|ring;?|s(?:cr;|sign;)|tilde;?|uml;?)|B(?:a(?:ckslash;|r(?:v;|wed;))|cy;|e(?:cause;|rnoullis;|ta;)|fr;|opf;|reve;|scr;|umpeq;)|C(?:Hcy;|OPY;?|a(?:cute;|p(?:;|italDifferentialD;)|yleys;)|c(?:aron;|edil;?|irc;|onint;)|dot;|e(?:dilla;|nterDot;)|fr;|hi;|ircle(?:Dot;|Minus;|Plus;|Times;)|lo(?:ckwiseContourIntegral;|seCurly(?:DoubleQuote;|Quote;))|o(?:lon(?:;|e;)|n(?:gruent;|int;|tourIntegral;)|p(?:f;|roduct;)|unterClockwiseContourIntegral;)|ross;|scr;|up(?:;|Cap;))|D(?:D(?:;|otrahd;)|Jcy;|Scy;|Zcy;|a(?:gger;|rr;|shv;)|c(?:aron;|y;)|el(?:;|ta;)|fr;|i(?:a(?:critical(?:Acute;|Do(?:t;|ubleAcute;)|Grave;|Tilde;)|mond;)|fferentialD;)|o(?:pf;|t(?:;|Dot;|Equal;)|uble(?:ContourIntegral;|Do(?:t;|wnArrow;)|L(?:eft(?:Arrow;|RightArrow;|Tee;)|ong(?:Left(?:Arrow;|RightArrow;)|RightArrow;))|Right(?:Arrow;|Tee;)|Up(?:Arrow;|DownArrow;)|VerticalBar;)|wn(?:Arrow(?:;|Bar;|UpArrow;)|Breve;|Left(?:RightVector;|TeeVector;|Vector(?:;|Bar;))|Right(?:TeeVector;|Vector(?:;|Bar;))|Tee(?:;|Arrow;)|arrow;))|s(?:cr;|trok;))|E(?:NG;|TH;?|acute;?|c(?:aron;|irc;?|y;)|dot;|fr;|grave;?|lement;|m(?:acr;|pty(?:SmallSquare;|VerySmallSquare;))|o(?:gon;|pf;)|psilon;|qu(?:al(?:;|Tilde;)|ilibrium;)|s(?:cr;|im;)|ta;|uml;?|x(?:ists;|ponentialE;))|F(?:cy;|fr;|illed(?:SmallSquare;|VerySmallSquare;)|o(?:pf;|rAll;|uriertrf;)|scr;)|G(?:Jcy;|T;?|amma(?:;|d;)|breve;|c(?:edil;|irc;|y;)|dot;|fr;|g;|opf;|reater(?:Equal(?:;|Less;)|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|scr;|t;)|H(?:ARDcy;|a(?:cek;|t;)|circ;|fr;|ilbertSpace;|o(?:pf;|rizontalLine;)|s(?:cr;|trok;)|ump(?:DownHump;|Equal;))|I(?:Ecy;|Jlig;|Ocy;|acute;?|c(?:irc;?|y;)|dot;|fr;|grave;?|m(?:;|a(?:cr;|ginaryI;)|plies;)|n(?:t(?:;|e(?:gral;|rsection;))|visible(?:Comma;|Times;))|o(?:gon;|pf;|ta;)|scr;|tilde;|u(?:kcy;|ml;?))|J(?:c(?:irc;|y;)|fr;|opf;|s(?:cr;|ercy;)|ukcy;)|K(?:Hcy;|Jcy;|appa;|c(?:edil;|y;)|fr;|opf;|scr;)|L(?:Jcy;|T;?|a(?:cute;|mbda;|ng;|placetrf;|rr;)|c(?:aron;|edil;|y;)|e(?:ft(?:A(?:ngleBracket;|rrow(?:;|Bar;|RightArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|Right(?:Arrow;|Vector;)|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;|rightarrow;)|ss(?:EqualGreater;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;))|fr;|l(?:;|eftarrow;)|midot;|o(?:ng(?:Left(?:Arrow;|RightArrow;)|RightArrow;|left(?:arrow;|rightarrow;)|rightarrow;)|pf;|wer(?:LeftArrow;|RightArrow;))|s(?:cr;|h;|trok;)|t;)|M(?:ap;|cy;|e(?:diumSpace;|llintrf;)|fr;|inusPlus;|opf;|scr;|u;)|N(?:Jcy;|acute;|c(?:aron;|edil;|y;)|e(?:gative(?:MediumSpace;|Thi(?:ckSpace;|nSpace;)|VeryThinSpace;)|sted(?:GreaterGreater;|LessLess;)|wLine;)|fr;|o(?:Break;|nBreakingSpace;|pf;|t(?:;|C(?:ongruent;|upCap;)|DoubleVerticalBar;|E(?:lement;|qual(?:;|Tilde;)|xists;)|Greater(?:;|Equal;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|Hump(?:DownHump;|Equal;)|Le(?:ftTriangle(?:;|Bar;|Equal;)|ss(?:;|Equal;|Greater;|Less;|SlantEqual;|Tilde;))|Nested(?:GreaterGreater;|LessLess;)|Precedes(?:;|Equal;|SlantEqual;)|R(?:everseElement;|ightTriangle(?:;|Bar;|Equal;))|S(?:quareSu(?:bset(?:;|Equal;)|perset(?:;|Equal;))|u(?:bset(?:;|Equal;)|cceeds(?:;|Equal;|SlantEqual;|Tilde;)|perset(?:;|Equal;)))|Tilde(?:;|Equal;|FullEqual;|Tilde;)|VerticalBar;))|scr;|tilde;?|u;)|O(?:Elig;|acute;?|c(?:irc;?|y;)|dblac;|fr;|grave;?|m(?:acr;|ega;|icron;)|opf;|penCurly(?:DoubleQuote;|Quote;)|r;|s(?:cr;|lash;?)|ti(?:lde;?|mes;)|uml;?|ver(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;))|P(?:artialD;|cy;|fr;|hi;|i;|lusMinus;|o(?:incareplane;|pf;)|r(?:;|ecedes(?:;|Equal;|SlantEqual;|Tilde;)|ime;|o(?:duct;|portion(?:;|al;)))|s(?:cr;|i;))|Q(?:UOT;?|fr;|opf;|scr;)|R(?:Barr;|EG;?|a(?:cute;|ng;|rr(?:;|tl;))|c(?:aron;|edil;|y;)|e(?:;|verse(?:E(?:lement;|quilibrium;)|UpEquilibrium;))|fr;|ho;|ight(?:A(?:ngleBracket;|rrow(?:;|Bar;|LeftArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;)|o(?:pf;|undImplies;)|rightarrow;|s(?:cr;|h;)|uleDelayed;)|S(?:H(?:CHcy;|cy;)|OFTcy;|acute;|c(?:;|aron;|edil;|irc;|y;)|fr;|hort(?:DownArrow;|LeftArrow;|RightArrow;|UpArrow;)|igma;|mallCircle;|opf;|q(?:rt;|uare(?:;|Intersection;|Su(?:bset(?:;|Equal;)|perset(?:;|Equal;))|Union;))|scr;|tar;|u(?:b(?:;|set(?:;|Equal;))|c(?:ceeds(?:;|Equal;|SlantEqual;|Tilde;)|hThat;)|m;|p(?:;|erset(?:;|Equal;)|set;)))|T(?:HORN;?|RADE;|S(?:Hcy;|cy;)|a(?:b;|u;)|c(?:aron;|edil;|y;)|fr;|h(?:e(?:refore;|ta;)|i(?:ckSpace;|nSpace;))|ilde(?:;|Equal;|FullEqual;|Tilde;)|opf;|ripleDot;|s(?:cr;|trok;))|U(?:a(?:cute;?|rr(?:;|ocir;))|br(?:cy;|eve;)|c(?:irc;?|y;)|dblac;|fr;|grave;?|macr;|n(?:der(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;)|ion(?:;|Plus;))|o(?:gon;|pf;)|p(?:Arrow(?:;|Bar;|DownArrow;)|DownArrow;|Equilibrium;|Tee(?:;|Arrow;)|arrow;|downarrow;|per(?:LeftArrow;|RightArrow;)|si(?:;|lon;))|ring;|scr;|tilde;|uml;?)|V(?:Dash;|bar;|cy;|dash(?:;|l;)|e(?:e;|r(?:bar;|t(?:;|ical(?:Bar;|Line;|Separator;|Tilde;))|yThinSpace;))|fr;|opf;|scr;|vdash;)|W(?:circ;|edge;|fr;|opf;|scr;)|X(?:fr;|i;|opf;|scr;)|Y(?:Acy;|Icy;|Ucy;|acute;?|c(?:irc;|y;)|fr;|opf;|scr;|uml;)|Z(?:Hcy;|acute;|c(?:aron;|y;)|dot;|e(?:roWidthSpace;|ta;)|fr;|opf;|scr;)|a(?:acute;?|breve;|c(?:;|E;|d;|irc;?|ute;?|y;)|elig;?|f(?:;|r;)|grave;?|l(?:e(?:fsym;|ph;)|pha;)|m(?:a(?:cr;|lg;)|p;?)|n(?:d(?:;|and;|d;|slope;|v;)|g(?:;|e;|le;|msd(?:;|a(?:a;|b;|c;|d;|e;|f;|g;|h;))|rt(?:;|vb(?:;|d;))|s(?:ph;|t;)|zarr;))|o(?:gon;|pf;)|p(?:;|E;|acir;|e;|id;|os;|prox(?:;|eq;))|ring;?|s(?:cr;|t;|ymp(?:;|eq;))|tilde;?|uml;?|w(?:conint;|int;))|b(?:Not;|a(?:ck(?:cong;|epsilon;|prime;|sim(?:;|eq;))|r(?:vee;|wed(?:;|ge;)))|brk(?:;|tbrk;)|c(?:ong;|y;)|dquo;|e(?:caus(?:;|e;)|mptyv;|psi;|rnou;|t(?:a;|h;|ween;))|fr;|ig(?:c(?:ap;|irc;|up;)|o(?:dot;|plus;|times;)|s(?:qcup;|tar;)|triangle(?:down;|up;)|uplus;|vee;|wedge;)|karow;|l(?:a(?:ck(?:lozenge;|square;|triangle(?:;|down;|left;|right;))|nk;)|k(?:1(?:2;|4;)|34;)|ock;)|n(?:e(?:;|quiv;)|ot;)|o(?:pf;|t(?:;|tom;)|wtie;|x(?:D(?:L;|R;|l;|r;)|H(?:;|D;|U;|d;|u;)|U(?:L;|R;|l;|r;)|V(?:;|H;|L;|R;|h;|l;|r;)|box;|d(?:L;|R;|l;|r;)|h(?:;|D;|U;|d;|u;)|minus;|plus;|times;|u(?:L;|R;|l;|r;)|v(?:;|H;|L;|R;|h;|l;|r;)))|prime;|r(?:eve;|vbar;?)|s(?:cr;|emi;|im(?:;|e;)|ol(?:;|b;|hsub;))|u(?:ll(?:;|et;)|mp(?:;|E;|e(?:;|q;))))|c(?:a(?:cute;|p(?:;|and;|brcup;|c(?:ap;|up;)|dot;|s;)|r(?:et;|on;))|c(?:a(?:ps;|ron;)|edil;?|irc;|ups(?:;|sm;))|dot;|e(?:dil;?|mptyv;|nt(?:;|erdot;|))|fr;|h(?:cy;|eck(?:;|mark;)|i;)|ir(?:;|E;|c(?:;|eq;|le(?:arrow(?:left;|right;)|d(?:R;|S;|ast;|circ;|dash;)))|e;|fnint;|mid;|scir;)|lubs(?:;|uit;)|o(?:lon(?:;|e(?:;|q;))|m(?:ma(?:;|t;)|p(?:;|fn;|le(?:ment;|xes;)))|n(?:g(?:;|dot;)|int;)|p(?:f;|rod;|y(?:;|sr;|)))|r(?:arr;|oss;)|s(?:cr;|u(?:b(?:;|e;)|p(?:;|e;)))|tdot;|u(?:darr(?:l;|r;)|e(?:pr;|sc;)|larr(?:;|p;)|p(?:;|brcap;|c(?:ap;|up;)|dot;|or;|s;)|r(?:arr(?:;|m;)|ly(?:eq(?:prec;|succ;)|vee;|wedge;)|ren;?|vearrow(?:left;|right;))|vee;|wed;)|w(?:conint;|int;)|ylcty;)|d(?:Arr;|Har;|a(?:gger;|leth;|rr;|sh(?:;|v;))|b(?:karow;|lac;)|c(?:aron;|y;)|d(?:;|a(?:gger;|rr;)|otseq;)|e(?:g;?|lta;|mptyv;)|f(?:isht;|r;)|har(?:l;|r;)|i(?:am(?:;|ond(?:;|suit;)|s;)|e;|gamma;|sin;|v(?:;|ide(?:;|ontimes;|)|onx;))|jcy;|lc(?:orn;|rop;)|o(?:llar;|pf;|t(?:;|eq(?:;|dot;)|minus;|plus;|square;)|ublebarwedge;|wn(?:arrow;|downarrows;|harpoon(?:left;|right;)))|r(?:bkarow;|c(?:orn;|rop;))|s(?:c(?:r;|y;)|ol;|trok;)|t(?:dot;|ri(?:;|f;))|u(?:arr;|har;)|wangle;|z(?:cy;|igrarr;))|e(?:D(?:Dot;|ot;)|a(?:cute;?|ster;)|c(?:aron;|ir(?:;|c;?)|olon;|y;)|dot;|e;|f(?:Dot;|r;)|g(?:;|rave;?|s(?:;|dot;))|l(?:;|inters;|l;|s(?:;|dot;))|m(?:acr;|pty(?:;|set;|v;)|sp(?:1(?:3;|4;)|;))|n(?:g;|sp;)|o(?:gon;|pf;)|p(?:ar(?:;|sl;)|lus;|si(?:;|lon;|v;))|q(?:c(?:irc;|olon;)|s(?:im;|lant(?:gtr;|less;))|u(?:als;|est;|iv(?:;|DD;))|vparsl;)|r(?:Dot;|arr;)|s(?:cr;|dot;|im;)|t(?:a;|h;?)|u(?:ml;?|ro;)|x(?:cl;|ist;|p(?:ectation;|onentiale;)))|f(?:allingdotseq;|cy;|emale;|f(?:ilig;|l(?:ig;|lig;)|r;)|ilig;|jlig;|l(?:at;|lig;|tns;)|nof;|o(?:pf;|r(?:all;|k(?:;|v;)))|partint;|r(?:a(?:c(?:1(?:2;?|3;|4;?|5;|6;|8;)|2(?:3;|5;)|3(?:4;?|5;|8;)|45;|5(?:6;|8;)|78;)|sl;)|own;)|scr;)|g(?:E(?:;|l;)|a(?:cute;|mma(?:;|d;)|p;)|breve;|c(?:irc;|y;)|dot;|e(?:;|l;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|l;))|l(?:;|es;)))|fr;|g(?:;|g;)|imel;|jcy;|l(?:;|E;|a;|j;)|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|opf;|rave;|s(?:cr;|im(?:;|e;|l;))|t(?:;|c(?:c;|ir;)|dot;|lPar;|quest;|r(?:a(?:pprox;|rr;)|dot;|eq(?:less;|qless;)|less;|sim;)|)|v(?:ertneqq;|nE;))|h(?:Arr;|a(?:irsp;|lf;|milt;|r(?:dcy;|r(?:;|cir;|w;)))|bar;|circ;|e(?:arts(?:;|uit;)|llip;|rcon;)|fr;|ks(?:earow;|warow;)|o(?:arr;|mtht;|ok(?:leftarrow;|rightarrow;)|pf;|rbar;)|s(?:cr;|lash;|trok;)|y(?:bull;|phen;))|i(?:acute;?|c(?:;|irc;?|y;)|e(?:cy;|xcl;?)|f(?:f;|r;)|grave;?|i(?:;|i(?:int;|nt;)|nfin;|ota;)|jlig;|m(?:a(?:cr;|g(?:e;|line;|part;)|th;)|of;|ped;)|n(?:;|care;|fin(?:;|tie;)|odot;|t(?:;|cal;|e(?:gers;|rcal;)|larhk;|prod;))|o(?:cy;|gon;|pf;|ta;)|prod;|quest;?|s(?:cr;|in(?:;|E;|dot;|s(?:;|v;)|v;))|t(?:;|ilde;)|u(?:kcy;|ml;?))|j(?:c(?:irc;|y;)|fr;|math;|opf;|s(?:cr;|ercy;)|ukcy;)|k(?:appa(?:;|v;)|c(?:edil;|y;)|fr;|green;|hcy;|jcy;|opf;|scr;)|l(?:A(?:arr;|rr;|tail;)|Barr;|E(?:;|g;)|Har;|a(?:cute;|emptyv;|gran;|mbda;|ng(?:;|d;|le;)|p;|quo;?|rr(?:;|b(?:;|fs;)|fs;|hk;|lp;|pl;|sim;|tl;)|t(?:;|ail;|e(?:;|s;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|quo(?:;|r;)|r(?:dhar;|ushar;)|sh;)|e(?:;|ft(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|leftarrows;|right(?:arrow(?:;|s;)|harpoons;|squigarrow;)|threetimes;)|g;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|r;))|g(?:;|es;)|s(?:approx;|dot;|eq(?:gtr;|qgtr;)|gtr;|sim;)))|f(?:isht;|loor;|r;)|g(?:;|E;)|h(?:ar(?:d;|u(?:;|l;))|blk;)|jcy;|l(?:;|arr;|corner;|hard;|tri;)|m(?:idot;|oust(?:;|ache;))|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|o(?:a(?:ng;|rr;)|brk;|ng(?:left(?:arrow;|rightarrow;)|mapsto;|rightarrow;)|oparrow(?:left;|right;)|p(?:ar;|f;|lus;)|times;|w(?:ast;|bar;)|z(?:;|enge;|f;))|par(?:;|lt;)|r(?:arr;|corner;|har(?:;|d;)|m;|tri;)|s(?:aquo;|cr;|h;|im(?:;|e;|g;)|q(?:b;|uo(?:;|r;))|trok;)|t(?:;|c(?:c;|ir;)|dot;|hree;|imes;|larr;|quest;|r(?:Par;|i(?:;|e;|f;))|)|ur(?:dshar;|uhar;)|v(?:ertneqq;|nE;))|m(?:DDot;|a(?:cr;?|l(?:e;|t(?:;|ese;))|p(?:;|sto(?:;|down;|left;|up;))|rker;)|c(?:omma;|y;)|dash;|easuredangle;|fr;|ho;|i(?:cro;?|d(?:;|ast;|cir;|dot;?)|nus(?:;|b;|d(?:;|u;)))|l(?:cp;|dr;)|nplus;|o(?:dels;|pf;)|p;|s(?:cr;|tpos;)|u(?:;|ltimap;|map;))|n(?:G(?:g;|t(?:;|v;))|L(?:eft(?:arrow;|rightarrow;)|l;|t(?:;|v;))|Rightarrow;|V(?:Dash;|dash;)|a(?:bla;|cute;|ng;|p(?:;|E;|id;|os;|prox;)|tur(?:;|al(?:;|s;)))|b(?:sp;?|ump(?:;|e;))|c(?:a(?:p;|ron;)|edil;|ong(?:;|dot;)|up;|y;)|dash;|e(?:;|Arr;|ar(?:hk;|r(?:;|ow;))|dot;|quiv;|s(?:ear;|im;)|xist(?:;|s;))|fr;|g(?:E;|e(?:;|q(?:;|q;|slant;)|s;)|sim;|t(?:;|r;))|h(?:Arr;|arr;|par;)|i(?:;|s(?:;|d;)|v;)|jcy;|l(?:Arr;|E;|arr;|dr;|e(?:;|ft(?:arrow;|rightarrow;)|q(?:;|q;|slant;)|s(?:;|s;))|sim;|t(?:;|ri(?:;|e;)))|mid;|o(?:pf;|t(?:;|in(?:;|E;|dot;|v(?:a;|b;|c;))|ni(?:;|v(?:a;|b;|c;))|))|p(?:ar(?:;|allel;|sl;|t;)|olint;|r(?:;|cue;|e(?:;|c(?:;|eq;))))|r(?:Arr;|arr(?:;|c;|w;)|ightarrow;|tri(?:;|e;))|s(?:c(?:;|cue;|e;|r;)|hort(?:mid;|parallel;)|im(?:;|e(?:;|q;))|mid;|par;|qsu(?:be;|pe;)|u(?:b(?:;|E;|e;|set(?:;|eq(?:;|q;)))|cc(?:;|eq;)|p(?:;|E;|e;|set(?:;|eq(?:;|q;)))))|t(?:gl;|ilde;?|lg;|riangle(?:left(?:;|eq;)|right(?:;|eq;)))|u(?:;|m(?:;|ero;|sp;))|v(?:Dash;|Harr;|ap;|dash;|g(?:e;|t;)|infin;|l(?:Arr;|e;|t(?:;|rie;))|r(?:Arr;|trie;)|sim;)|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|near;))|o(?:S;|a(?:cute;?|st;)|c(?:ir(?:;|c;?)|y;)|d(?:ash;|blac;|iv;|ot;|sold;)|elig;|f(?:cir;|r;)|g(?:on;|rave;?|t;)|h(?:bar;|m;)|int;|l(?:arr;|c(?:ir;|ross;)|ine;|t;)|m(?:acr;|ega;|i(?:cron;|d;|nus;))|opf;|p(?:ar;|erp;|lus;)|r(?:;|arr;|d(?:;|er(?:;|of;)|f;?|m;?)|igof;|or;|slope;|v;)|s(?:cr;|lash;?|ol;)|ti(?:lde;?|mes(?:;|as;))|uml;?|vbar;)|p(?:ar(?:;|a(?:;|llel;|)|s(?:im;|l;)|t;)|cy;|er(?:cnt;|iod;|mil;|p;|tenk;)|fr;|h(?:i(?:;|v;)|mmat;|one;)|i(?:;|tchfork;|v;)|l(?:an(?:ck(?:;|h;)|kv;)|us(?:;|acir;|b;|cir;|d(?:o;|u;)|e;|mn;?|sim;|two;))|m;|o(?:intint;|pf;|und;?)|r(?:;|E;|ap;|cue;|e(?:;|c(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;))|ime(?:;|s;)|n(?:E;|ap;|sim;)|o(?:d;|f(?:alar;|line;|surf;)|p(?:;|to;))|sim;|urel;)|s(?:cr;|i;)|uncsp;)|q(?:fr;|int;|opf;|prime;|scr;|u(?:at(?:ernions;|int;)|est(?:;|eq;)|ot;?))|r(?:A(?:arr;|rr;|tail;)|Barr;|Har;|a(?:c(?:e;|ute;)|dic;|emptyv;|ng(?:;|d;|e;|le;)|quo;?|rr(?:;|ap;|b(?:;|fs;)|c;|fs;|hk;|lp;|pl;|sim;|tl;|w;)|t(?:ail;|io(?:;|nals;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|ldhar;|quo(?:;|r;)|sh;)|e(?:al(?:;|ine;|part;|s;)|ct;|g;?)|f(?:isht;|loor;|r;)|h(?:ar(?:d;|u(?:;|l;))|o(?:;|v;))|i(?:ght(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|left(?:arrows;|harpoons;)|rightarrows;|squigarrow;|threetimes;)|ng;|singdotseq;)|l(?:arr;|har;|m;)|moust(?:;|ache;)|nmid;|o(?:a(?:ng;|rr;)|brk;|p(?:ar;|f;|lus;)|times;)|p(?:ar(?:;|gt;)|polint;)|rarr;|s(?:aquo;|cr;|h;|q(?:b;|uo(?:;|r;)))|t(?:hree;|imes;|ri(?:;|e;|f;|ltri;))|uluhar;|x;)|s(?:acute;|bquo;|c(?:;|E;|a(?:p;|ron;)|cue;|e(?:;|dil;)|irc;|n(?:E;|ap;|sim;)|polint;|sim;|y;)|dot(?:;|b;|e;)|e(?:Arr;|ar(?:hk;|r(?:;|ow;))|ct;?|mi;|swar;|tm(?:inus;|n;)|xt;)|fr(?:;|own;)|h(?:arp;|c(?:hcy;|y;)|ort(?:mid;|parallel;)|y;?)|i(?:gma(?:;|f;|v;)|m(?:;|dot;|e(?:;|q;)|g(?:;|E;)|l(?:;|E;)|ne;|plus;|rarr;))|larr;|m(?:a(?:llsetminus;|shp;)|eparsl;|i(?:d;|le;)|t(?:;|e(?:;|s;)))|o(?:ftcy;|l(?:;|b(?:;|ar;))|pf;)|pa(?:des(?:;|uit;)|r;)|q(?:c(?:ap(?:;|s;)|up(?:;|s;))|su(?:b(?:;|e;|set(?:;|eq;))|p(?:;|e;|set(?:;|eq;)))|u(?:;|ar(?:e;|f;)|f;))|rarr;|s(?:cr;|etmn;|mile;|tarf;)|t(?:ar(?:;|f;)|r(?:aight(?:epsilon;|phi;)|ns;))|u(?:b(?:;|E;|dot;|e(?:;|dot;)|mult;|n(?:E;|e;)|plus;|rarr;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;)))|cc(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;)|m;|ng;|p(?:1;?|2;?|3;?|;|E;|d(?:ot;|sub;)|e(?:;|dot;)|hs(?:ol;|ub;)|larr;|mult;|n(?:E;|e;)|plus;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;))))|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|nwar;)|zlig;?)|t(?:a(?:rget;|u;)|brk;|c(?:aron;|edil;|y;)|dot;|elrec;|fr;|h(?:e(?:re(?:4;|fore;)|ta(?:;|sym;|v;))|i(?:ck(?:approx;|sim;)|nsp;)|k(?:ap;|sim;)|orn;?)|i(?:lde;|mes(?:;|b(?:;|ar;)|d;|)|nt;)|o(?:ea;|p(?:;|bot;|cir;|f(?:;|ork;))|sa;)|prime;|r(?:ade;|i(?:angle(?:;|down;|left(?:;|eq;)|q;|right(?:;|eq;))|dot;|e;|minus;|plus;|sb;|time;)|pezium;)|s(?:c(?:r;|y;)|hcy;|trok;)|w(?:ixt;|ohead(?:leftarrow;|rightarrow;)))|u(?:Arr;|Har;|a(?:cute;?|rr;)|br(?:cy;|eve;)|c(?:irc;?|y;)|d(?:arr;|blac;|har;)|f(?:isht;|r;)|grave;?|h(?:ar(?:l;|r;)|blk;)|l(?:c(?:orn(?:;|er;)|rop;)|tri;)|m(?:acr;|l;?)|o(?:gon;|pf;)|p(?:arrow;|downarrow;|harpoon(?:left;|right;)|lus;|si(?:;|h;|lon;)|uparrows;)|r(?:c(?:orn(?:;|er;)|rop;)|ing;|tri;)|scr;|t(?:dot;|ilde;|ri(?:;|f;))|u(?:arr;|ml;?)|wangle;)|v(?:Arr;|Bar(?:;|v;)|Dash;|a(?:ngrt;|r(?:epsilon;|kappa;|nothing;|p(?:hi;|i;|ropto;)|r(?:;|ho;)|s(?:igma;|u(?:bsetneq(?:;|q;)|psetneq(?:;|q;)))|t(?:heta;|riangle(?:left;|right;))))|cy;|dash;|e(?:e(?:;|bar;|eq;)|llip;|r(?:bar;|t;))|fr;|ltri;|nsu(?:b;|p;)|opf;|prop;|rtri;|s(?:cr;|u(?:bn(?:E;|e;)|pn(?:E;|e;)))|zigzag;)|w(?:circ;|e(?:d(?:bar;|ge(?:;|q;))|ierp;)|fr;|opf;|p;|r(?:;|eath;)|scr;)|x(?:c(?:ap;|irc;|up;)|dtri;|fr;|h(?:Arr;|arr;)|i;|l(?:Arr;|arr;)|map;|nis;|o(?:dot;|p(?:f;|lus;)|time;)|r(?:Arr;|arr;)|s(?:cr;|qcup;)|u(?:plus;|tri;)|vee;|wedge;)|y(?:ac(?:ute;?|y;)|c(?:irc;|y;)|en;?|fr;|icy;|opf;|scr;|u(?:cy;|ml;?))|z(?:acute;|c(?:aron;|y;)|dot;|e(?:etrf;|ta;)|fr;|hcy;|igrarr;|opf;|scr;|w(?:j;|nj;)))|[\s\S]/g,V=32,z=/[^\r"&\u0000]+/g,W=/[^\r'&\u0000]+/g,G=/[^\r\t\n\f &>\u0000]+/g,Y=/[^\r\t\n\f \/>A-Z\u0000]+/g,K=/[^\r\t\n\f \/=>A-Z\u0000]+/g,$=/[^\]\r\u0000\uffff]*/g,Q=/[^&<\r\u0000\uffff]*/g,X=/[^<\r\u0000\uffff]*/g,Z=/[^\r\u0000\uffff]*/g,J=/(?:(\/)?([a-z]+)>)|[\s\S]/g,ee=/(?:([-a-z]+)[ \t\n\f]*=[ \t\n\f]*('[^'&\r\u0000]*'|"[^"&\r\u0000]*"|[^\t\n\r\f "&'\u0000>][^&> \t\n\r\f\u0000]*[ \t\n\f]))|[\s\S]/g,te=/[^\x09\x0A\x0C\x0D\x20]/,ne=/[^\x09\x0A\x0C\x0D\x20]/g,re=/[^\x00\x09\x0A\x0C\x0D\x20]/,ie=/^[\x09\x0A\x0C\x0D\x20]+/,oe=/\x00/g;function ae(e){if(e.length<16384)return String.fromCharCode.apply(String,e);for(var t="",n=0;n<e.length;n+=16384)t+=String.fromCharCode.apply(String,e.slice(n,n+16384));return t}function se(e,t){if("string"==typeof t)return e.namespaceURI===a.HTML&&e.localName===t;var n=t[e.namespaceURI];return n&&n[e.localName]}function ce(e){return se(e,P)}function le(e){if(se(e,L))return!0;if(e.namespaceURI===a.MATHML&&"annotation-xml"===e.localName){var t=e.getAttribute("encoding");if(t&&(t=t.toLowerCase()),"text/html"===t||"application/xhtml+xml"===t)return!0}return!1}function ue(e){for(var t=0,n=e.length;t<n;t++)e[t][0]in B&&(e[t][0]=B[e[t][0]])}function pe(e){for(var t=0,n=e.length;t<n;t++)if("definitionurl"===e[t][0]){e[t][0]="definitionURL";break}}function he(e){for(var t=0,n=e.length;t<n;t++)e[t][0]in j&&e[t].push(j[e[t][0]])}function de(e,t){for(var n=0,r=e.length;n<r;n++){var i=e[n][0],o=e[n][1];t.hasAttribute(i)||t._setAttribute(i,o)}}function fe(e,t,n){var N,S,D=null,A=0,M=0,I=!1,P=!1,L=0,j=[],B="",ge=!0,me=0,ye=Ot,be="",ve="",_e=[],we="",Ee="",Te=[],ke=[],Ne=[],Se=[],Re=[],Ce=!1,xe=function(e,t,n,r){switch(e){case 1:if(0===(t=t.replace(ie,"")).length)return;break;case 4:return void Ge._appendChild(Ge.createComment(t));case 5:var o=t,a=n,s=r;return Ge.appendChild(new i(o,a,s)),Fe||"html"!==o.toLowerCase()||y.test(a)||s&&s.toLowerCase()===b||void 0===s&&v.test(a)?Ge._quirks=!0:(_.test(a)||void 0!==s&&v.test(a))&&(Ge._limitedQuirks=!0),void(xe=rr)}Ge._quirks=!0,(xe=rr)(e,t,n,r)},Oe=null,De=[],Ae=new fe.ElementStack,Me=new fe.ActiveFormattingElements,Ie=void 0!==t,Pe=null,Le=null,je=!0;t&&(je=t.ownerDocument._scripting_enabled),n&&!1===n.scripting_enabled&&(je=!1);var Be,He,qe=!0,Fe=!1,Ue=[],Ve=!1,ze=!1,We={document:function(){return Ge},pause:function(){me++},resume:function(){me--,this.parse("")},parse:function(e,t){me>0?B+=e:0===L?(B&&(e=B+e,B=""),t&&(e+="￿",I=!0),D=e,A=e.length,M=0,ge&&(ge=!1,65279===D.charCodeAt(0)&&(M=1)),L++,$e(),B=D.substring(M,A),L--):(L++,j.push(D,A,M),D=e,A=e.length,M=0,$e(),B=D.substring(M,A),M=j.pop(),A=j.pop(),D=j.pop(),B&&(D=B+D.substring(M),A=D.length,M=0,B=""),L--)}},Ge=new r(!0,e);if(Ge._parser=We,Ge._scripting_enabled=je,t){if(t.ownerDocument._quirks&&(Ge._quirks=!0),t.ownerDocument._limitedQuirks&&(Ge._limitedQuirks=!0),t.namespaceURI===a.HTML)switch(t.localName){case"title":case"textarea":ye=Dt;break;case"style":case"xmp":case"iframe":case"noembed":case"noframes":case"script":case"plaintext":ye=It;break;case"noscript":je&&(ye=It)}var Ye=Ge.createElement("html");Ge._appendChild(Ye),Ae.push(Ye),t instanceof c.HTMLTemplateElement&&De.push(vr),Tt();for(var Ke=t;null!==Ke;Ke=Ke.parentElement)if(Ke instanceof c.HTMLFormElement){Le=Ke;break}}function $e(){for(var e,t,n,r;M<A;){if(me>0)return;switch(typeof ye.lookahead){case"undefined":if(e=D.charCodeAt(M++),P&&(P=!1,10===e)){M++;continue}switch(e){case 13:M<A?10===D.charCodeAt(M)&&M++:P=!0,ye(10);break;case 65535:if(I&&M===A){ye(u);break}default:ye(e)}break;case"number":e=D.charCodeAt(M);var i=ye.lookahead,o=!0;if(i<0&&(o=!1,i=-i),i<A-M)t=o?D.substring(M,M+i):null,r=!1;else{if(!I)return;t=o?D.substring(M,A):null,r=!0,65535===e&&M===A-1&&(e=u)}ye(e,t,r);break;case"string":e=D.charCodeAt(M),n=ye.lookahead;var a=D.indexOf(n,M);if(-1!==a)t=D.substring(M,a+n.length),r=!1;else{if(!I)return;t=D.substring(M,A),65535===e&&M===A-1&&(e=u),r=!0}ye(e,t,r)}}}function Qe(e,t){for(var n=0;n<Re.length;n++)if(Re[n][0]===e)return;void 0!==t?Re.push([e,t]):Re.push([e])}function Xe(){Ce=!0,be="",Re.length=0}function Ze(){_e.length=0}function Je(){we=""}function et(){Ee=""}function tt(){Te.length=0}function nt(){ke.length=0,Ne=null,Se=null}function rt(){Ne=[]}function it(){Se=[]}function ot(){Fe=!0}function at(e){return ve===e}function st(){if(Ue.length>0){var e=ae(Ue);if(Ue.length=0,ze&&(ze=!1,"\n"===e[0]&&(e=e.substring(1)),0===e.length))return;dt(p,e),Ve=!1}ze=!1}function ct(e){e.lastIndex=M-1;var t=e.exec(D);if(t&&t.index===M-1)return t=t[0],M+=t.length-1,I&&M===A&&(t=t.slice(0,-1),M--),t;throw new Error("should never happen")}function lt(e){e.lastIndex=M-1;var t=e.exec(D)[0];return!!t&&(function(e){Ue.length>0&&st();if(ze&&(ze=!1,"\n"===e[0]&&(e=e.substring(1)),0===e.length))return;dt(p,e)}(t),M+=t.length-1,!0)}function ut(){if(Ce)dt(d,be);else{var e=be;be="",ve=e,dt(h,e,Re)}}function pt(){dt(g,ae(ke),Ne?ae(Ne):void 0,Se?ae(Se):void 0)}function ht(){st(),xe(u),Ge.modclock=1}var dt=We.insertToken=function(e,t,n,r){st();var i=Ae.top;i&&i.namespaceURI!==a.HTML?e!==h&&e!==p?Nr(e,t,n,r):ce(i)&&(e===p||e===h&&"mglyph"!==t&&"malignmark"!==t)||e===h&&"svg"===t&&i.namespaceURI===a.MATHML&&"annotation-xml"===i.localName||le(i)?(He=!0,xe(e,t,n,r),He=!1):Nr(e,t,n,r):xe(e,t,n,r)};function ft(e){var t=Ae.top;yt&&se(t,k)?Et(function(t){return t.createComment(e)}):(t instanceof c.HTMLTemplateElement&&(t=t.content),t._appendChild(t.ownerDocument.createComment(e)))}function gt(e){var t=Ae.top;if(yt&&se(t,k))Et(function(t){return t.createTextNode(e)});else{t instanceof c.HTMLTemplateElement&&(t=t.content);var n=t.lastChild;n&&n.nodeType===o.TEXT_NODE?n.appendData(e):t._appendChild(t.ownerDocument.createTextNode(e))}}function mt(e,t,n){var r=s.createElement(e,t,null);if(n)for(var i=0,o=n.length;i<o;i++)r._setAttribute(n[i][0],n[i][1]);return r}var yt=!1;function bt(e,t){var n=vt(function(n){return mt(n,e,t)});return se(n,O)&&(n._form=Le),n}function vt(e){var t;return yt&&se(Ae.top,k)?t=Et(e):Ae.top instanceof c.HTMLTemplateElement?(t=e(Ae.top.content.ownerDocument),Ae.top.content._appendChild(t)):(t=e(Ae.top.ownerDocument),Ae.top._appendChild(t)),Ae.push(t),t}function _t(e,t,n){return vt(function(r){var i=r.createElementNS(n,e);if(t)for(var o=0,a=t.length;o<a;o++){var s=t[o];2===s.length?i._setAttribute(s[0],s[1]):i._setAttributeNS(s[2],s[0],s[1])}return i})}function wt(e){for(var t=Ae.elements.length-1;t>=0;t--)if(Ae.elements[t]instanceof e)return t;return-1}function Et(e){var t,n,r,i,a,s;if((r=wt(c.HTMLTableElement),(i=wt(c.HTMLTemplateElement))>=0&&(r<0||i>r)?t=Ae.elements[i]:r>=0&&((t=Ae.elements[r].parentNode)?n=Ae.elements[r]:t=Ae.elements[r-1]),t||(t=Ae.elements[0]),t instanceof c.HTMLTemplateElement&&(t=t.content),(a=e(t.ownerDocument)).nodeType===o.TEXT_NODE)&&((s=n?n.previousSibling:t.lastChild)&&s.nodeType===o.TEXT_NODE))return s.appendData(a.data),a;return n?t.insertBefore(a,n):t._appendChild(a),a}function Tt(){for(var e=!1,n=Ae.elements.length-1;n>=0;n--){var r=Ae.elements[n];if(0===n&&(e=!0,Ie&&(r=t)),r.namespaceURI===a.HTML){var i=r.localName;switch(i){case"select":for(var o=n;o>0;){var s=Ae.elements[--o];if(s instanceof c.HTMLTemplateElement)break;if(s instanceof c.HTMLTableElement)return void(xe=br)}return void(xe=yr);case"tr":return void(xe=gr);case"tbody":case"tfoot":case"thead":return void(xe=fr);case"caption":return void(xe=hr);case"colgroup":return void(xe=dr);case"table":return void(xe=ur);case"template":return void(xe=De[De.length-1]);case"body":return void(xe=cr);case"frameset":return void(xe=wr);case"html":return void(xe=null===Pe?ir:sr);default:if(!e){if("head"===i)return void(xe=or);if("td"===i||"th"===i)return void(xe=mr)}}}if(e)return void(xe=cr)}}function kt(e,t){bt(e,t),ye=At,Oe=xe,xe=lr}function Nt(e,t){return{elt:mt(e,Me.list[t].localName,Me.attrs[t]),attrs:Me.attrs[t]}}function St(){if(0!==Me.list.length){var e=Me.list[Me.list.length-1];if(e!==Me.MARKER&&-1===Ae.elements.lastIndexOf(e)){for(var t=Me.list.length-2;t>=0&&(e=Me.list[t])!==Me.MARKER&&-1===Ae.elements.lastIndexOf(e);t--);for(t+=1;t<Me.list.length;t++){var n=vt(function(e){return Nt(e,t).elt});Me.list[t]=n}}}}var Rt={localName:"BM"};function Ct(){delete Ge._parser,Ae.elements.length=0,Ge.defaultView&&Ge.defaultView.dispatchEvent(new c.Event("load",{}))}function xt(e,t){ye=t,M--}function Ot(e){switch(e){case 38:N=Ot,ye=Kn;break;case 60:if(function(){J.lastIndex=M;var e=J.exec(D);if(!e)throw new Error("should never happen");var t=e[2];return!!t&&(e[1]?(M+=t.length+2,dt(d,t)):(M+=t.length+1,ve=t,dt(h,t,m)),!0)}())break;ye=Pt;break;case 0:Ue.push(e),Ve=!0;break;case-1:ht();break;default:lt(Q)||Ue.push(e)}}function Dt(e){switch(e){case 38:N=Dt,ye=Kn;break;case 60:ye=Bt;break;case 0:Ue.push(65533),Ve=!0;break;case-1:ht();break;default:Ue.push(e)}}function At(e){switch(e){case 60:ye=Ft;break;case 0:Ue.push(65533);break;case-1:ht();break;default:lt(X)||Ue.push(e)}}function Mt(e){switch(e){case 60:ye=zt;break;case 0:Ue.push(65533);break;case-1:ht();break;default:lt(X)||Ue.push(e)}}function It(e){switch(e){case 0:Ue.push(65533);break;case-1:ht();break;default:lt(Z)||Ue.push(e)}}function Pt(e){switch(e){case 33:ye=bn;break;case 47:ye=Lt;break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Ce=!1,be="",Re.length=0,xt(0,jt);break;case 63:xt(0,yn);break;default:Ue.push(60),xt(0,Ot)}}function Lt(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),xt(0,jt);break;case 62:ye=Ot;break;case-1:Ue.push(60),Ue.push(47),ht();break;default:xt(0,yn)}}function jt(e){switch(e){case 9:case 10:case 12:case 32:ye=cn;break;case 47:ye=mn;break;case 62:ye=Ot,ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:be+=String.fromCharCode(e+32);break;case 0:be+=String.fromCharCode(65533);break;case-1:ht();break;default:be+=ct(Y)}}function Bt(e){47===e?(Ze(),ye=Ht):(Ue.push(60),xt(0,Dt))}function Ht(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),xt(0,qt);break;default:Ue.push(60),Ue.push(47),xt(0,Dt)}}function qt(e){switch(e){case 9:case 10:case 12:case 32:if(at(be))return void(ye=cn);break;case 47:if(at(be))return void(ye=mn);break;case 62:if(at(be))return ye=Ot,void ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:return be+=String.fromCharCode(e+32),void _e.push(e);case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return be+=String.fromCharCode(e),void _e.push(e)}Ue.push(60),Ue.push(47),l(Ue,_e),xt(0,Dt)}function Ft(e){47===e?(Ze(),ye=Ut):(Ue.push(60),xt(0,At))}function Ut(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),xt(0,Vt);break;default:Ue.push(60),Ue.push(47),xt(0,At)}}function Vt(e){switch(e){case 9:case 10:case 12:case 32:if(at(be))return void(ye=cn);break;case 47:if(at(be))return void(ye=mn);break;case 62:if(at(be))return ye=Ot,void ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:return be+=String.fromCharCode(e+32),void _e.push(e);case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return be+=String.fromCharCode(e),void _e.push(e)}Ue.push(60),Ue.push(47),l(Ue,_e),xt(0,At)}function zt(e){switch(e){case 47:Ze(),ye=Wt;break;case 33:ye=Yt,Ue.push(60),Ue.push(33);break;default:Ue.push(60),xt(0,Mt)}}function Wt(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),xt(0,Gt);break;default:Ue.push(60),Ue.push(47),xt(0,Mt)}}function Gt(e){switch(e){case 9:case 10:case 12:case 32:if(at(be))return void(ye=cn);break;case 47:if(at(be))return void(ye=mn);break;case 62:if(at(be))return ye=Ot,void ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:return be+=String.fromCharCode(e+32),void _e.push(e);case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return be+=String.fromCharCode(e),void _e.push(e)}Ue.push(60),Ue.push(47),l(Ue,_e),xt(0,Mt)}function Yt(e){45===e?(ye=Kt,Ue.push(45)):xt(0,Mt)}function Kt(e){45===e?(ye=Xt,Ue.push(45)):xt(0,Mt)}function $t(e){switch(e){case 45:ye=Qt,Ue.push(45);break;case 60:ye=Zt;break;case 0:Ue.push(65533);break;case-1:ht();break;default:Ue.push(e)}}function Qt(e){switch(e){case 45:ye=Xt,Ue.push(45);break;case 60:ye=Zt;break;case 0:ye=$t,Ue.push(65533);break;case-1:ht();break;default:ye=$t,Ue.push(e)}}function Xt(e){switch(e){case 45:Ue.push(45);break;case 60:ye=Zt;break;case 62:ye=Mt,Ue.push(62);break;case 0:ye=$t,Ue.push(65533);break;case-1:ht();break;default:ye=$t,Ue.push(e)}}function Zt(e){switch(e){case 47:Ze(),ye=Jt;break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Ze(),Ue.push(60),xt(0,tn);break;default:Ue.push(60),xt(0,$t)}}function Jt(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),xt(0,en);break;default:Ue.push(60),Ue.push(47),xt(0,$t)}}function en(e){switch(e){case 9:case 10:case 12:case 32:if(at(be))return void(ye=cn);break;case 47:if(at(be))return void(ye=mn);break;case 62:if(at(be))return ye=Ot,void ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:return be+=String.fromCharCode(e+32),void _e.push(e);case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return be+=String.fromCharCode(e),void _e.push(e)}Ue.push(60),Ue.push(47),l(Ue,_e),xt(0,$t)}function tn(e){switch(e){case 9:case 10:case 12:case 32:case 47:case 62:ye="script"===ae(_e)?nn:$t,Ue.push(e);break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:_e.push(e+32),Ue.push(e);break;case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:_e.push(e),Ue.push(e);break;default:xt(0,$t)}}function nn(e){switch(e){case 45:ye=rn,Ue.push(45);break;case 60:ye=an,Ue.push(60);break;case 0:Ue.push(65533);break;case-1:ht();break;default:Ue.push(e)}}function rn(e){switch(e){case 45:ye=on,Ue.push(45);break;case 60:ye=an,Ue.push(60);break;case 0:ye=nn,Ue.push(65533);break;case-1:ht();break;default:ye=nn,Ue.push(e)}}function on(e){switch(e){case 45:Ue.push(45);break;case 60:ye=an,Ue.push(60);break;case 62:ye=Mt,Ue.push(62);break;case 0:ye=nn,Ue.push(65533);break;case-1:ht();break;default:ye=nn,Ue.push(e)}}function an(e){47===e?(Ze(),ye=sn,Ue.push(47)):xt(0,nn)}function sn(e){switch(e){case 9:case 10:case 12:case 32:case 47:case 62:ye="script"===ae(_e)?$t:nn,Ue.push(e);break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:_e.push(e+32),Ue.push(e);break;case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:_e.push(e),Ue.push(e);break;default:xt(0,nn)}}function cn(e){switch(e){case 9:case 10:case 12:case 32:break;case 47:ye=mn;break;case 62:ye=Ot,ut();break;case-1:ht();break;case 61:Je(),we+=String.fromCharCode(e),ye=ln;break;default:if(function(){ee.lastIndex=M-1;var e=ee.exec(D);if(!e)throw new Error("should never happen");var t=e[1];if(!t)return!1;var n=e[2],r=n.length;switch(n[0]){case'"':case"'":n=n.substring(1,r-1),M+=e[0].length-1,ye=gn;break;default:ye=cn,M+=e[0].length-1,n=n.substring(0,r-1)}for(var i=0;i<Re.length;i++)if(Re[i][0]===t)return!0;return Re.push([t,n]),!0}())break;Je(),xt(0,ln)}}function ln(e){switch(e){case 9:case 10:case 12:case 32:case 47:case 62:case-1:xt(0,un);break;case 61:ye=pn;break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:we+=String.fromCharCode(e+32);break;case 0:we+=String.fromCharCode(65533);break;case 34:case 39:case 60:default:we+=ct(K)}}function un(e){switch(e){case 9:case 10:case 12:case 32:break;case 47:Qe(we),ye=mn;break;case 61:ye=pn;break;case 62:ye=Ot,Qe(we),ut();break;case-1:Qe(we),ht();break;default:Qe(we),Je(),xt(0,ln)}}function pn(e){switch(e){case 9:case 10:case 12:case 32:break;case 34:et(),ye=hn;break;case 39:et(),ye=dn;break;case 62:default:et(),xt(0,fn)}}function hn(e){switch(e){case 34:Qe(we,Ee),ye=gn;break;case 38:N=hn,ye=Kn;break;case 0:Ee+=String.fromCharCode(65533);break;case-1:ht();break;case 10:Ee+=String.fromCharCode(e);break;default:Ee+=ct(z)}}function dn(e){switch(e){case 39:Qe(we,Ee),ye=gn;break;case 38:N=dn,ye=Kn;break;case 0:Ee+=String.fromCharCode(65533);break;case-1:ht();break;case 10:Ee+=String.fromCharCode(e);break;default:Ee+=ct(W)}}function fn(e){switch(e){case 9:case 10:case 12:case 32:Qe(we,Ee),ye=cn;break;case 38:N=fn,ye=Kn;break;case 62:Qe(we,Ee),ye=Ot,ut();break;case 0:Ee+=String.fromCharCode(65533);break;case-1:M--,ye=Ot;break;case 34:case 39:case 60:case 61:case 96:default:Ee+=ct(G)}}function gn(e){switch(e){case 9:case 10:case 12:case 32:ye=cn;break;case 47:ye=mn;break;case 62:ye=Ot,ut();break;case-1:ht();break;default:xt(0,cn)}}function mn(e){switch(e){case 62:ye=Ot,Ce?dt(d,be,null,!0):dt(h,be,Re,!0);break;case-1:ht();break;default:xt(0,cn)}}function yn(e,t,n){var r=t.length;M+=n?r-1:r;var i=t.substring(0,r-1);i=(i=(i=i.replace(/\u0000/g,"�")).replace(/\u000D\u000A/g,"\n")).replace(/\u000D/g,"\n"),dt(f,i),ye=Ot}function bn(e,t,n){if("-"===t[0]&&"-"===t[1])return M+=2,tt(),void(ye=vn);"DOCTYPE"===t.toUpperCase()?(M+=7,ye=xn):"[CDATA["===t&&Ae.top&&"http://www.w3.org/1999/xhtml"!==Ae.top.namespaceURI?(M+=7,ye=Wn):ye=yn}function vn(e){switch(tt(),e){case 45:ye=_n;break;case 62:ye=Ot,dt(f,ae(Te));break;default:xt(0,wn)}}function _n(e){switch(e){case 45:ye=Rn;break;case 62:ye=Ot,dt(f,ae(Te));break;case-1:dt(f,ae(Te)),ht();break;default:Te.push(45),xt(0,wn)}}function wn(e){switch(e){case 60:Te.push(e),ye=En;break;case 45:ye=Sn;break;case 0:Te.push(65533);break;case-1:dt(f,ae(Te)),ht();break;default:Te.push(e)}}function En(e){switch(e){case 33:Te.push(e),ye=Tn;break;case 60:Te.push(e);break;default:xt(0,wn)}}function Tn(e){switch(e){case 45:ye=kn;break;default:xt(0,wn)}}function kn(e){switch(e){case 45:ye=Nn;break;default:xt(0,Sn)}}function Nn(e){switch(e){case 62:case-1:default:xt(0,Rn)}}function Sn(e){switch(e){case 45:ye=Rn;break;case-1:dt(f,ae(Te)),ht();break;default:Te.push(45),xt(0,wn)}}function Rn(e){switch(e){case 62:ye=Ot,dt(f,ae(Te));break;case 33:ye=Cn;break;case 45:Te.push(45);break;case-1:dt(f,ae(Te)),ht();break;default:Te.push(45),Te.push(45),xt(0,wn)}}function Cn(e){switch(e){case 45:Te.push(45),Te.push(45),Te.push(33),ye=Sn;break;case 62:ye=Ot,dt(f,ae(Te));break;case-1:dt(f,ae(Te)),ht();break;default:Te.push(45),Te.push(45),Te.push(33),xt(0,wn)}}function xn(e){switch(e){case 9:case 10:case 12:case 32:ye=On;break;case-1:nt(),ot(),pt(),ht();break;default:xt(0,On)}}function On(e){switch(e){case 9:case 10:case 12:case 32:break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:nt(),ke.push(e+32),ye=Dn;break;case 0:nt(),ke.push(65533),ye=Dn;break;case 62:nt(),ot(),ye=Ot,pt();break;case-1:nt(),ot(),pt(),ht();break;default:nt(),ke.push(e),ye=Dn}}function Dn(e){switch(e){case 9:case 10:case 12:case 32:ye=An;break;case 62:ye=Ot,pt();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:ke.push(e+32);break;case 0:ke.push(65533);break;case-1:ot(),pt(),ht();break;default:ke.push(e)}}function An(e,t,n){switch(e){case 9:case 10:case 12:case 32:M+=1;break;case 62:ye=Ot,M+=1,pt();break;case-1:ot(),pt(),ht();break;default:"PUBLIC"===(t=t.toUpperCase())?(M+=6,ye=Mn):"SYSTEM"===t?(M+=6,ye=Hn):(ot(),ye=zn)}}function Mn(e){switch(e){case 9:case 10:case 12:case 32:ye=In;break;case 34:rt(),ye=Pn;break;case 39:rt(),ye=Ln;break;case 62:ot(),ye=Ot,pt();break;case-1:ot(),pt(),ht();break;default:ot(),ye=zn}}function In(e){switch(e){case 9:case 10:case 12:case 32:break;case 34:rt(),ye=Pn;break;case 39:rt(),ye=Ln;break;case 62:ot(),ye=Ot,pt();break;case-1:ot(),pt(),ht();break;default:ot(),ye=zn}}function Pn(e){switch(e){case 34:ye=jn;break;case 0:Ne.push(65533);break;case 62:ot(),ye=Ot,pt();break;case-1:ot(),pt(),ht();break;default:Ne.push(e)}}function Ln(e){switch(e){case 39:ye=jn;break;case 0:Ne.push(65533);break;case 62:ot(),ye=Ot,pt();break;case-1:ot(),pt(),ht();break;default:Ne.push(e)}}function jn(e){switch(e){case 9:case 10:case 12:case 32:ye=Bn;break;case 62:ye=Ot,pt();break;case 34:it(),ye=Fn;break;case 39:it(),ye=Un;break;case-1:ot(),pt(),ht();break;default:ot(),ye=zn}}function Bn(e){switch(e){case 9:case 10:case 12:case 32:break;case 62:ye=Ot,pt();break;case 34:it(),ye=Fn;break;case 39:it(),ye=Un;break;case-1:ot(),pt(),ht();break;default:ot(),ye=zn}}function Hn(e){switch(e){case 9:case 10:case 12:case 32:ye=qn;break;case 34:it(),ye=Fn;break;case 39:it(),ye=Un;break;case 62:ot(),ye=Ot,pt();break;case-1:ot(),pt(),ht();break;default:ot(),ye=zn}}function qn(e){switch(e){case 9:case 10:case 12:case 32:break;case 34:it(),ye=Fn;break;case 39:it(),ye=Un;break;case 62:ot(),ye=Ot,pt();break;case-1:ot(),pt(),ht();break;default:ot(),ye=zn}}function Fn(e){switch(e){case 34:ye=Vn;break;case 0:Se.push(65533);break;case 62:ot(),ye=Ot,pt();break;case-1:ot(),pt(),ht();break;default:Se.push(e)}}function Un(e){switch(e){case 39:ye=Vn;break;case 0:Se.push(65533);break;case 62:ot(),ye=Ot,pt();break;case-1:ot(),pt(),ht();break;default:Se.push(e)}}function Vn(e){switch(e){case 9:case 10:case 12:case 32:break;case 62:ye=Ot,pt();break;case-1:ot(),pt(),ht();break;default:ye=zn}}function zn(e){switch(e){case 62:ye=Ot,pt();break;case-1:pt(),ht()}}function Wn(e){switch(e){case 93:ye=Gn;break;case-1:ht();break;case 0:Ve=!0;default:lt($)||Ue.push(e)}}function Gn(e){switch(e){case 93:ye=Yn;break;default:Ue.push(93),xt(0,Wn)}}function Yn(e){switch(e){case 93:Ue.push(93);break;case 62:st(),ye=Ot;break;default:Ue.push(93),Ue.push(93),xt(0,Wn)}}function Kn(e){switch(Ze(),_e.push(38),e){case 9:case 10:case 12:case 32:case 60:case 38:case-1:xt(0,nr);break;case 35:_e.push(e),ye=Qn;break;default:xt(0,$n)}}function $n(e){U.lastIndex=M;var t=U.exec(D);if(!t)throw new Error("should never happen");var n=t[1];if(n){switch(M+=n.length,l(_e,function(e){for(var t=[],n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(n)),N){case hn:case dn:case fn:if(";"!==n[n.length-1]&&/[=A-Za-z0-9]/.test(D[M]))return void(ye=nr)}Ze();var r=F[n];"number"==typeof r?_e.push(r):l(_e,r),ye=nr}else ye=nr}function Qn(e){switch(S=0,e){case 120:case 88:_e.push(e),ye=Xn;break;default:xt(0,Zn)}}function Xn(e){switch(e){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:xt(0,Jn);break;default:xt(0,nr)}}function Zn(e){switch(e){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:xt(0,er);break;default:xt(0,nr)}}function Jn(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:S*=16,S+=e-55;break;case 97:case 98:case 99:case 100:case 101:case 102:S*=16,S+=e-87;break;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:S*=16,S+=e-48;break;case 59:ye=tr;break;default:xt(0,tr)}}function er(e){switch(e){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:S*=10,S+=e-48;break;case 59:ye=tr;break;default:xt(0,tr)}}function tr(e){S in q?S=q[S]:(S>1114111||S>=55296&&S<57344)&&(S=65533),Ze(),S<=65535?_e.push(S):(S-=65536,_e.push(55296+(S>>10)),_e.push(56320+(1023&S))),xt(0,nr)}function nr(e){switch(N){case hn:case dn:case fn:Ee+=ae(_e);break;default:l(Ue,_e)}xt(0,N)}function rr(e,t,n,r){var i;switch(e){case 1:if(0===(t=t.replace(ie,"")).length)return;break;case 5:return;case 4:return void Ge._appendChild(Ge.createComment(t));case 2:if("html"===t)return i=mt(Ge,t,n),Ae.push(i),Ge.appendChild(i),void(xe=ir);break;case 3:switch(t){case"html":case"head":case"body":case"br":break;default:return}}i=mt(Ge,"html",null),Ae.push(i),Ge.appendChild(i),(xe=ir)(e,t,n,r)}function ir(e,t,n,r){switch(e){case 1:if(0===(t=t.replace(ie,"")).length)return;break;case 5:return;case 4:return void ft(t);case 2:switch(t){case"html":return void cr(e,t,n,r);case"head":var i=bt(t,n);return Pe=i,void(xe=or)}break;case 3:switch(t){case"html":case"head":case"body":case"br":break;default:return}}ir(h,"head",null),xe(e,t,n,r)}function or(e,t,n,r){switch(e){case 1:var i=t.match(ie);if(i&&(gt(i[0]),t=t.substring(i[0].length)),0===t.length)return;break;case 4:return void ft(t);case 5:return;case 2:switch(t){case"html":return void cr(e,t,n,r);case"meta":case"base":case"basefont":case"bgsound":case"link":return bt(t,n),void Ae.pop();case"title":return bt(t,n),ye=Dt,Oe=xe,void(xe=lr);case"noscript":if(!je)return bt(t,n),void(xe=ar);case"noframes":case"style":return void kt(t,n);case"script":return vt(function(e){var r=mt(e,t,n);return r._parser_inserted=!0,r._force_async=!1,Ie&&(r._already_started=!0),st(),r}),ye=Mt,Oe=xe,void(xe=lr);case"template":return bt(t,n),Me.insertMarker(),qe=!1,xe=vr,void De.push(xe);case"head":return}break;case 3:switch(t){case"head":return Ae.pop(),void(xe=sr);case"body":case"html":case"br":break;case"template":if(!Ae.contains("template"))return;return Ae.generateImpliedEndTags(null,"thorough"),Ae.popTag("template"),Me.clearToMarker(),De.pop(),void Tt();default:return}}or(d,"head",null),xe(e,t,n,r)}function ar(e,t,n,r){switch(e){case 5:return;case 4:return void or(e,t);case 1:var i=t.match(ie);if(i&&(or(e,i[0]),t=t.substring(i[0].length)),0===t.length)return;break;case 2:switch(t){case"html":return void cr(e,t,n,r);case"basefont":case"bgsound":case"link":case"meta":case"noframes":case"style":return void or(e,t,n);case"head":case"noscript":return}break;case 3:switch(t){case"noscript":return Ae.pop(),void(xe=or);case"br":break;default:return}}ar(d,"noscript",null),xe(e,t,n,r)}function sr(e,t,n,r){switch(e){case 1:var i=t.match(ie);if(i&&(gt(i[0]),t=t.substring(i[0].length)),0===t.length)return;break;case 4:return void ft(t);case 5:return;case 2:switch(t){case"html":return void cr(e,t,n,r);case"body":return bt(t,n),qe=!1,void(xe=cr);case"frameset":return bt(t,n),void(xe=wr);case"base":case"basefont":case"bgsound":case"link":case"meta":case"noframes":case"script":case"style":case"template":case"title":return Ae.push(Pe),or(h,t,n),void Ae.removeElement(Pe);case"head":return}break;case 3:switch(t){case"template":return or(e,t,n,r);case"body":case"html":case"br":break;default:return}}sr(h,"body",null),qe=!0,xe(e,t,n,r)}function cr(e,t,n,r){var i,o,s,l;switch(e){case 1:if(Ve&&0===(t=t.replace(oe,"")).length)return;return qe&&te.test(t)&&(qe=!1),St(),void gt(t);case 5:return;case 4:return void ft(t);case-1:return De.length?vr(e):void Ct();case 2:switch(t){case"html":if(Ae.contains("template"))return;return void de(n,Ae.elements[0]);case"base":case"basefont":case"bgsound":case"link":case"meta":case"noframes":case"script":case"style":case"template":case"title":return void or(h,t,n);case"body":if(!(i=Ae.elements[1])||!(i instanceof c.HTMLBodyElement)||Ae.contains("template"))return;return qe=!1,void de(n,i);case"frameset":if(!qe)return;if(!((i=Ae.elements[1])&&i instanceof c.HTMLBodyElement))return;for(i.parentNode&&i.parentNode.removeChild(i);!(Ae.top instanceof c.HTMLHtmlElement);)Ae.pop();return bt(t,n),void(xe=wr);case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"nav":case"ol":case"p":case"section":case"summary":case"ul":return Ae.inButtonScope("p")&&cr(d,"p"),void bt(t,n);case"menu":return Ae.inButtonScope("p")&&cr(d,"p"),se(Ae.top,"menuitem")&&Ae.pop(),void bt(t,n);case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return Ae.inButtonScope("p")&&cr(d,"p"),Ae.top instanceof c.HTMLHeadingElement&&Ae.pop(),void bt(t,n);case"pre":case"listing":return Ae.inButtonScope("p")&&cr(d,"p"),bt(t,n),ze=!0,void(qe=!1);case"form":if(Le&&!Ae.contains("template"))return;return Ae.inButtonScope("p")&&cr(d,"p"),l=bt(t,n),void(Ae.contains("template")||(Le=l));case"li":for(qe=!1,o=Ae.elements.length-1;o>=0;o--){if((s=Ae.elements[o])instanceof c.HTMLLIElement){cr(d,"li");break}if(se(s,w)&&!se(s,E))break}return Ae.inButtonScope("p")&&cr(d,"p"),void bt(t,n);case"dd":case"dt":for(qe=!1,o=Ae.elements.length-1;o>=0;o--){if(se(s=Ae.elements[o],T)){cr(d,s.localName);break}if(se(s,w)&&!se(s,E))break}return Ae.inButtonScope("p")&&cr(d,"p"),void bt(t,n);case"plaintext":return Ae.inButtonScope("p")&&cr(d,"p"),bt(t,n),void(ye=It);case"button":return void(Ae.inScope("button")?(cr(d,"button"),xe(e,t,n,r)):(St(),bt(t,n),qe=!1));case"a":var u=Me.findElementByTag("a");u&&(cr(d,t),Me.remove(u),Ae.removeElement(u));case"b":case"big":case"code":case"em":case"font":case"i":case"s":case"small":case"strike":case"strong":case"tt":case"u":return St(),void Me.push(bt(t,n),n);case"nobr":return St(),Ae.inScope(t)&&(cr(d,t),St()),void Me.push(bt(t,n),n);case"applet":case"marquee":case"object":return St(),bt(t,n),Me.insertMarker(),void(qe=!1);case"table":return!Ge._quirks&&Ae.inButtonScope("p")&&cr(d,"p"),bt(t,n),qe=!1,void(xe=ur);case"area":case"br":case"embed":case"img":case"keygen":case"wbr":return St(),bt(t,n),Ae.pop(),void(qe=!1);case"input":St(),l=bt(t,n),Ae.pop();var p=l.getAttribute("type");return void(p&&"hidden"===p.toLowerCase()||(qe=!1));case"param":case"source":case"track":return bt(t,n),void Ae.pop();case"hr":return Ae.inButtonScope("p")&&cr(d,"p"),se(Ae.top,"menuitem")&&Ae.pop(),bt(t,n),Ae.pop(),void(qe=!1);case"image":return void cr(h,"img",n,r);case"textarea":return bt(t,n),ze=!0,qe=!1,ye=Dt,Oe=xe,void(xe=lr);case"xmp":return Ae.inButtonScope("p")&&cr(d,"p"),St(),qe=!1,void kt(t,n);case"iframe":return qe=!1,void kt(t,n);case"noembed":return void kt(t,n);case"noscript":if(je)return void kt(t,n);break;case"select":return St(),bt(t,n),qe=!1,void(xe=xe===ur||xe===hr||xe===fr||xe===gr||xe===mr?br:yr);case"optgroup":case"option":return Ae.top instanceof c.HTMLOptionElement&&cr(d,"option"),St(),void bt(t,n);case"menuitem":return se(Ae.top,"menuitem")&&Ae.pop(),St(),void bt(t,n);case"rb":case"rtc":return Ae.inScope("ruby")&&Ae.generateImpliedEndTags(),void bt(t,n);case"rp":case"rt":return Ae.inScope("ruby")&&Ae.generateImpliedEndTags("rtc"),void bt(t,n);case"math":return St(),pe(n),he(n),_t(t,n,a.MATHML),void(r&&Ae.pop());case"svg":return St(),ue(n),he(n),_t(t,n,a.SVG),void(r&&Ae.pop());case"caption":case"col":case"colgroup":case"frame":case"head":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return}return St(),void bt(t,n);case 3:switch(t){case"template":return void or(d,t,n);case"body":if(!Ae.inScope("body"))return;return void(xe=_r);case"html":if(!Ae.inScope("body"))return;return void(xe=_r)(e,t,n);case"address":case"article":case"aside":case"blockquote":case"button":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"listing":case"main":case"menu":case"nav":case"ol":case"pre":case"section":case"summary":case"ul":if(!Ae.inScope(t))return;return Ae.generateImpliedEndTags(),void Ae.popTag(t);case"form":if(Ae.contains("template")){if(!Ae.inScope("form"))return;Ae.generateImpliedEndTags(),Ae.popTag("form")}else{var f=Le;if(Le=null,!f||!Ae.elementInScope(f))return;Ae.generateImpliedEndTags(),Ae.removeElement(f)}return;case"p":return void(Ae.inButtonScope(t)?(Ae.generateImpliedEndTags(t),Ae.popTag(t)):(cr(h,t,null),xe(e,t,n,r)));case"li":if(!Ae.inListItemScope(t))return;return Ae.generateImpliedEndTags(t),void Ae.popTag(t);case"dd":case"dt":if(!Ae.inScope(t))return;return Ae.generateImpliedEndTags(t),void Ae.popTag(t);case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":if(!Ae.elementTypeInScope(c.HTMLHeadingElement))return;return Ae.generateImpliedEndTags(),void Ae.popElementType(c.HTMLHeadingElement);case"sarcasm":break;case"a":case"b":case"big":case"code":case"em":case"font":case"i":case"nobr":case"s":case"small":case"strike":case"strong":case"tt":case"u":if(function(e){if(se(Ae.top,e)&&-1===Me.indexOf(Ae.top))return Ae.pop(),!0;for(var t=0;t<8;){t++;var n=Me.findElementByTag(e);if(!n)return!1;var r=Ae.elements.lastIndexOf(n);if(-1===r)return Me.remove(n),!0;if(!Ae.elementInScope(n))return!0;for(var i,o=null,a=r+1;a<Ae.elements.length;a++)if(se(Ae.elements[a],w)){o=Ae.elements[a],i=a;break}if(!o)return Ae.popElement(n),Me.remove(n),!0;var s=Ae.elements[r-1];Me.insertAfter(n,Rt);for(var l,u=o,p=o,h=i,d=0;d++,(u=Ae.elements[--h])!==n;)if(l=Me.indexOf(u),d>3&&-1!==l&&(Me.remove(u),l=-1),-1!==l){var f=Nt(s.ownerDocument,l);Me.replace(u,f.elt,f.attrs),Ae.elements[h]=f.elt,u=f.elt,p===o&&(Me.remove(Rt),Me.insertAfter(f.elt,Rt)),u._appendChild(p),p=u}else Ae.removeElement(u);yt&&se(s,k)?Et(function(){return p}):s instanceof c.HTMLTemplateElement?s.content._appendChild(p):s._appendChild(p);for(var g=Nt(o.ownerDocument,Me.indexOf(n));o.hasChildNodes();)g.elt._appendChild(o.firstChild);o._appendChild(g.elt),Me.remove(n),Me.replace(Rt,g.elt,g.attrs),Ae.removeElement(n);var m=Ae.elements.lastIndexOf(o);Ae.elements.splice(m+1,0,g.elt)}return!0}(t))return;break;case"applet":case"marquee":case"object":if(!Ae.inScope(t))return;return Ae.generateImpliedEndTags(),Ae.popTag(t),void Me.clearToMarker();case"br":return void cr(h,t,null)}for(o=Ae.elements.length-1;o>=0;o--){if(se(s=Ae.elements[o],t)){Ae.generateImpliedEndTags(t),Ae.popElement(s);break}if(se(s,w))return}return}}function lr(e,t,n,r){switch(e){case 1:return void gt(t);case-1:return Ae.top instanceof c.HTMLScriptElement&&(Ae.top._already_started=!0),Ae.pop(),void(xe=Oe)(e);case 3:return Ae.pop(),void(xe=Oe);default:return}}function ur(e,t,n,r){switch(e){case 1:if(He)return void cr(e,t,n,r);if(se(Ae.top,k))return Be=[],Oe=xe,void(xe=pr)(e,t,n,r);break;case 4:return void ft(t);case 5:return;case 2:switch(t){case"caption":return Ae.clearToContext(R),Me.insertMarker(),bt(t,n),void(xe=hr);case"colgroup":return Ae.clearToContext(R),bt(t,n),void(xe=dr);case"col":return ur(h,"colgroup",null),void xe(e,t,n,r);case"tbody":case"tfoot":case"thead":return Ae.clearToContext(R),bt(t,n),void(xe=fr);case"td":case"th":case"tr":return ur(h,"tbody",null),void xe(e,t,n,r);case"table":if(!Ae.inTableScope(t))return;return ur(d,t),void xe(e,t,n,r);case"style":case"script":case"template":return void or(e,t,n,r);case"input":if("hidden"!==function(e){for(var t=0,n=e.length;t<n;t++)if("type"===e[t][0])return e[t][1].toLowerCase();return null}(n))break;return bt(t,n),void Ae.pop();case"form":if(Le||Ae.contains("template"))return;return Le=bt(t,n),void Ae.popElement(Le)}break;case 3:switch(t){case"table":if(!Ae.inTableScope(t))return;return Ae.popTag(t),void Tt();case"body":case"caption":case"col":case"colgroup":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return;case"template":return void or(e,t,n,r)}break;case-1:return void cr(e,t,n,r)}yt=!0,cr(e,t,n,r),yt=!1}function pr(e,t,n,r){if(e===p){if(Ve&&0===(t=t.replace(oe,"")).length)return;Be.push(t)}else{var i=Be.join("");Be.length=0,te.test(i)?(yt=!0,cr(p,i),yt=!1):gt(i),(xe=Oe)(e,t,n,r)}}function hr(e,t,n,r){function i(){return!!Ae.inTableScope("caption")&&(Ae.generateImpliedEndTags(),Ae.popTag("caption"),Me.clearToMarker(),xe=ur,!0)}switch(e){case 2:switch(t){case"caption":case"col":case"colgroup":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return void(i()&&xe(e,t,n,r))}break;case 3:switch(t){case"caption":return void i();case"table":return void(i()&&xe(e,t,n,r));case"body":case"col":case"colgroup":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return}}cr(e,t,n,r)}function dr(e,t,n,r){switch(e){case 1:var i=t.match(ie);if(i&&(gt(i[0]),t=t.substring(i[0].length)),0===t.length)return;break;case 4:return void ft(t);case 5:return;case 2:switch(t){case"html":return void cr(e,t,n,r);case"col":return bt(t,n),void Ae.pop();case"template":return void or(e,t,n,r)}break;case 3:switch(t){case"colgroup":if(!se(Ae.top,"colgroup"))return;return Ae.pop(),void(xe=ur);case"col":return;case"template":return void or(e,t,n,r)}break;case-1:return void cr(e,t,n,r)}se(Ae.top,"colgroup")&&(dr(d,"colgroup"),xe(e,t,n,r))}function fr(e,t,n,r){function i(){(Ae.inTableScope("tbody")||Ae.inTableScope("thead")||Ae.inTableScope("tfoot"))&&(Ae.clearToContext(C),fr(d,Ae.top.localName,null),xe(e,t,n,r))}switch(e){case 2:switch(t){case"tr":return Ae.clearToContext(C),bt(t,n),void(xe=gr);case"th":case"td":return fr(h,"tr",null),void xe(e,t,n,r);case"caption":case"col":case"colgroup":case"tbody":case"tfoot":case"thead":return void i()}break;case 3:switch(t){case"table":return void i();case"tbody":case"tfoot":case"thead":return void(Ae.inTableScope(t)&&(Ae.clearToContext(C),Ae.pop(),xe=ur));case"body":case"caption":case"col":case"colgroup":case"html":case"td":case"th":case"tr":return}}ur(e,t,n,r)}function gr(e,t,n,r){function i(){return!!Ae.inTableScope("tr")&&(Ae.clearToContext(x),Ae.pop(),xe=fr,!0)}switch(e){case 2:switch(t){case"th":case"td":return Ae.clearToContext(x),bt(t,n),xe=mr,void Me.insertMarker();case"caption":case"col":case"colgroup":case"tbody":case"tfoot":case"thead":case"tr":return void(i()&&xe(e,t,n,r))}break;case 3:switch(t){case"tr":return void i();case"table":return void(i()&&xe(e,t,n,r));case"tbody":case"tfoot":case"thead":return void(Ae.inTableScope(t)&&i()&&xe(e,t,n,r));case"body":case"caption":case"col":case"colgroup":case"html":case"td":case"th":return}}ur(e,t,n,r)}function mr(e,t,n,r){switch(e){case 2:switch(t){case"caption":case"col":case"colgroup":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return void(Ae.inTableScope("td")?(mr(d,"td"),xe(e,t,n,r)):Ae.inTableScope("th")&&(mr(d,"th"),xe(e,t,n,r)))}break;case 3:switch(t){case"td":case"th":if(!Ae.inTableScope(t))return;return Ae.generateImpliedEndTags(),Ae.popTag(t),Me.clearToMarker(),void(xe=gr);case"body":case"caption":case"col":case"colgroup":case"html":return;case"table":case"tbody":case"tfoot":case"thead":case"tr":if(!Ae.inTableScope(t))return;return mr(d,Ae.inTableScope("td")?"td":"th"),void xe(e,t,n,r)}}cr(e,t,n,r)}function yr(e,t,n,r){switch(e){case 1:if(Ve&&0===(t=t.replace(oe,"")).length)return;return void gt(t);case 4:return void ft(t);case 5:return;case-1:return void cr(e,t,n,r);case 2:switch(t){case"html":return void cr(e,t,n,r);case"option":return Ae.top instanceof c.HTMLOptionElement&&yr(d,t),void bt(t,n);case"optgroup":return Ae.top instanceof c.HTMLOptionElement&&yr(d,"option"),Ae.top instanceof c.HTMLOptGroupElement&&yr(d,t),void bt(t,n);case"select":return void yr(d,t);case"input":case"keygen":case"textarea":if(!Ae.inSelectScope("select"))return;return yr(d,"select"),void xe(e,t,n,r);case"script":case"template":return void or(e,t,n,r)}break;case 3:switch(t){case"optgroup":return Ae.top instanceof c.HTMLOptionElement&&Ae.elements[Ae.elements.length-2]instanceof c.HTMLOptGroupElement&&yr(d,"option"),void(Ae.top instanceof c.HTMLOptGroupElement&&Ae.pop());case"option":return void(Ae.top instanceof c.HTMLOptionElement&&Ae.pop());case"select":if(!Ae.inSelectScope(t))return;return Ae.popTag(t),void Tt();case"template":return void or(e,t,n,r)}}}function br(e,t,n,r){switch(t){case"caption":case"table":case"tbody":case"tfoot":case"thead":case"tr":case"td":case"th":switch(e){case 2:return br(d,"select"),void xe(e,t,n,r);case 3:return void(Ae.inTableScope(t)&&(br(d,"select"),xe(e,t,n,r)))}}yr(e,t,n,r)}function vr(e,t,n,r){function i(i){xe=i,De[De.length-1]=xe,xe(e,t,n,r)}switch(e){case 1:case 4:case 5:return void cr(e,t,n,r);case-1:return void(Ae.contains("template")?(Ae.popTag("template"),Me.clearToMarker(),De.pop(),Tt(),xe(e,t,n,r)):Ct());case 2:switch(t){case"base":case"basefont":case"bgsound":case"link":case"meta":case"noframes":case"script":case"style":case"template":case"title":return void or(e,t,n,r);case"caption":case"colgroup":case"tbody":case"tfoot":case"thead":return void i(ur);case"col":return void i(dr);case"tr":return void i(fr);case"td":case"th":return void i(gr)}return void i(cr);case 3:switch(t){case"template":return void or(e,t,n,r);default:return}}}function _r(e,t,n,r){switch(e){case 1:if(te.test(t))break;return void cr(e,t);case 4:return void Ae.elements[0]._appendChild(Ge.createComment(t));case 5:return;case-1:return void Ct();case 2:if("html"===t)return void cr(e,t,n,r);break;case 3:if("html"===t){if(Ie)return;return void(xe=Tr)}}(xe=cr)(e,t,n,r)}function wr(e,t,n,r){switch(e){case 1:return void((t=t.replace(ne,"")).length>0&&gt(t));case 4:return void ft(t);case 5:return;case-1:return void Ct();case 2:switch(t){case"html":return void cr(e,t,n,r);case"frameset":return void bt(t,n);case"frame":return bt(t,n),void Ae.pop();case"noframes":return void or(e,t,n,r)}break;case 3:if("frameset"===t){if(Ie&&Ae.top instanceof c.HTMLHtmlElement)return;return Ae.pop(),void(Ie||Ae.top instanceof c.HTMLFrameSetElement||(xe=Er))}}}function Er(e,t,n,r){switch(e){case 1:return void((t=t.replace(ne,"")).length>0&&gt(t));case 4:return void ft(t);case 5:return;case-1:return void Ct();case 2:switch(t){case"html":return void cr(e,t,n,r);case"noframes":return void or(e,t,n,r)}break;case 3:if("html"===t)return void(xe=kr)}}function Tr(e,t,n,r){switch(e){case 1:if(te.test(t))break;return void cr(e,t,n,r);case 4:return void Ge._appendChild(Ge.createComment(t));case 5:return void cr(e,t,n,r);case-1:return void Ct();case 2:if("html"===t)return void cr(e,t,n,r)}(xe=cr)(e,t,n,r)}function kr(e,t,n,r){switch(e){case 1:return void((t=t.replace(ne,"")).length>0&&cr(e,t,n,r));case 4:return void Ge._appendChild(Ge.createComment(t));case 5:return void cr(e,t,n,r);case-1:return void Ct();case 2:switch(t){case"html":return void cr(e,t,n,r);case"noframes":return void or(e,t,n,r)}}}function Nr(e,n,r,i){var o,s;switch(e){case 1:return qe&&re.test(n)&&(qe=!1),Ve&&(n=n.replace(oe,"�")),void gt(n);case 4:return void ft(n);case 5:return;case 2:switch(n){case"font":if(!function(e){for(var t=0,n=e.length;t<n;t++)switch(e[t][0]){case"color":case"face":case"size":return!0}return!1}(r))break;case"b":case"big":case"blockquote":case"body":case"br":case"center":case"code":case"dd":case"div":case"dl":case"dt":case"em":case"embed":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":case"head":case"hr":case"i":case"img":case"li":case"listing":case"menu":case"meta":case"nobr":case"ol":case"p":case"pre":case"ruby":case"s":case"small":case"span":case"strong":case"strike":case"sub":case"sup":case"table":case"tt":case"u":case"ul":case"var":if(Ie)break;do{Ae.pop(),o=Ae.top}while(o.namespaceURI!==a.HTML&&!ce(o)&&!le(o));return void dt(e,n,r,i)}return(o=1===Ae.elements.length&&Ie?t:Ae.top).namespaceURI===a.MATHML?pe(r):o.namespaceURI===a.SVG&&(n=(s=n)in H?H[s]:s,ue(r)),he(r),_t(n,r,o.namespaceURI),void(i&&("script"===n&&(o.namespaceURI,a.SVG),Ae.pop()));case 3:if(o=Ae.top,"script"===n&&o.namespaceURI===a.SVG&&"script"===o.localName)Ae.pop();else for(var c=Ae.elements.length-1,l=Ae.elements[c];;){if(l.localName.toLowerCase()===n){Ae.popElement(l);break}if((l=Ae.elements[--c]).namespaceURI===a.HTML){xe(e,n,r,i);break}}return}}return yn.lookahead=">",bn.lookahead=7,An.lookahead=6,$n.lookahead=-V,We.testTokenizer=function(e,t,n,r){var i=[];switch(t){case"PCDATA state":ye=Ot;break;case"RCDATA state":ye=Dt;break;case"RAWTEXT state":ye=At;break;case"PLAINTEXT state":ye=It}if(n&&(ve=n),dt=function(e,t,n,r){switch(st(),e){case 1:i.length>0&&"Character"===i[i.length-1][0]?i[i.length-1][1]+=t:i.push(["Character",t]);break;case 4:i.push(["Comment",t]);break;case 5:i.push(["DOCTYPE",t,void 0===n?null:n,void 0===r?null:r,!Fe]);break;case 2:for(var o=Object.create(null),a=0;a<n.length;a++){var s=n[a];1===s.length?o[s[0]]="":o[s[0]]=s[1]}var c=["StartTag",t,o];r&&c.push(!0),i.push(c);break;case 3:i.push(["EndTag",t])}},r){for(var o=0;o<e.length;o++)this.parse(e[o]);this.parse("",!0)}else this.parse(e,!0);return i},We}fe.ElementStack=function(){this.elements=[],this.top=null},fe.ElementStack.prototype.push=function(e){this.elements.push(e),this.top=e},fe.ElementStack.prototype.pop=function(e){this.elements.pop(),this.top=this.elements[this.elements.length-1]},fe.ElementStack.prototype.popTag=function(e){for(var t=this.elements.length-1;t>0;t--){if(se(this.elements[t],e))break}this.elements.length=t,this.top=this.elements[t-1]},fe.ElementStack.prototype.popElementType=function(e){for(var t=this.elements.length-1;t>0&&!(this.elements[t]instanceof e);t--);this.elements.length=t,this.top=this.elements[t-1]},fe.ElementStack.prototype.popElement=function(e){for(var t=this.elements.length-1;t>0&&this.elements[t]!==e;t--);this.elements.length=t,this.top=this.elements[t-1]},fe.ElementStack.prototype.removeElement=function(e){if(this.top===e)this.pop();else{var t=this.elements.lastIndexOf(e);-1!==t&&this.elements.splice(t,1)}},fe.ElementStack.prototype.clearToContext=function(e){for(var t=this.elements.length-1;t>0&&!se(this.elements[t],e);t--);this.elements.length=t+1,this.top=this.elements[t]},fe.ElementStack.prototype.contains=function(e){return this.inSpecificScope(e,Object.create(null))},fe.ElementStack.prototype.inSpecificScope=function(e,t){for(var n=this.elements.length-1;n>=0;n--){var r=this.elements[n];if(se(r,e))return!0;if(se(r,t))return!1}return!1},fe.ElementStack.prototype.elementInSpecificScope=function(e,t){for(var n=this.elements.length-1;n>=0;n--){var r=this.elements[n];if(r===e)return!0;if(se(r,t))return!1}return!1},fe.ElementStack.prototype.elementTypeInSpecificScope=function(e,t){for(var n=this.elements.length-1;n>=0;n--){var r=this.elements[n];if(r instanceof e)return!0;if(se(r,t))return!1}return!1},fe.ElementStack.prototype.inScope=function(e){return this.inSpecificScope(e,D)},fe.ElementStack.prototype.elementInScope=function(e){return this.elementInSpecificScope(e,D)},fe.ElementStack.prototype.elementTypeInScope=function(e){return this.elementTypeInSpecificScope(e,D)},fe.ElementStack.prototype.inButtonScope=function(e){return this.inSpecificScope(e,M)},fe.ElementStack.prototype.inListItemScope=function(e){return this.inSpecificScope(e,A)},fe.ElementStack.prototype.inTableScope=function(e){return this.inSpecificScope(e,I)},fe.ElementStack.prototype.inSelectScope=function(e){for(var t=this.elements.length-1;t>=0;t--){var n=this.elements[t];if(n.namespaceURI!==a.HTML)return!1;var r=n.localName;if(r===e)return!0;if("optgroup"!==r&&"option"!==r)return!1}return!1},fe.ElementStack.prototype.generateImpliedEndTags=function(e,t){for(var n=t?S:N,r=this.elements.length-1;r>=0;r--){var i=this.elements[r];if(e&&se(i,e))break;if(!se(this.elements[r],n))break}this.elements.length=r+1,this.top=this.elements[r]},fe.ActiveFormattingElements=function(){this.list=[],this.attrs=[]},fe.ActiveFormattingElements.prototype.MARKER={localName:"|"},fe.ActiveFormattingElements.prototype.insertMarker=function(){this.list.push(this.MARKER),this.attrs.push(this.MARKER)},fe.ActiveFormattingElements.prototype.push=function(e,t){for(var n=0,r=this.list.length-1;r>=0&&this.list[r]!==this.MARKER;r--)if(a(e,this.list[r],this.attrs[r])&&3===++n){this.list.splice(r,1),this.attrs.splice(r,1);break}this.list.push(e);for(var i=[],o=0;o<t.length;o++)i[o]=t[o];function a(e,t,n){if(e.localName!==t.localName)return!1;if(e._numattrs!==n.length)return!1;for(var r=0,i=n.length;r<i;r++){var o=n[r][0],a=n[r][1];if(!e.hasAttribute(o))return!1;if(e.getAttribute(o)!==a)return!1}return!0}this.attrs.push(i)},fe.ActiveFormattingElements.prototype.clearToMarker=function(){for(var e=this.list.length-1;e>=0&&this.list[e]!==this.MARKER;e--);e<0&&(e=0),this.list.length=e,this.attrs.length=e},fe.ActiveFormattingElements.prototype.findElementByTag=function(e){for(var t=this.list.length-1;t>=0;t--){var n=this.list[t];if(n===this.MARKER)break;if(n.localName===e)return n}return null},fe.ActiveFormattingElements.prototype.indexOf=function(e){return this.list.lastIndexOf(e)},fe.ActiveFormattingElements.prototype.remove=function(e){var t=this.list.lastIndexOf(e);-1!==t&&(this.list.splice(t,1),this.attrs.splice(t,1))},fe.ActiveFormattingElements.prototype.replace=function(e,t,n){var r=this.list.lastIndexOf(e);-1!==r&&(this.list[r]=t,this.attrs[r]=n)},fe.ActiveFormattingElements.prototype.insertAfter=function(e,t){var n=this.list.lastIndexOf(e);-1!==n&&(this.list.splice(n,0,t),this.attrs.splice(n,0,t))}},function(e,t,n){"use strict";e.exports=s;var r=n(3),i=n(38),o=n(2),a=n(21);function s(e,t,n){this.nodeType=r.DOCUMENT_TYPE_NODE,this.ownerDocument=null,this.name=e,this.publicId=t||"",this.systemId=n||""}s.prototype=Object.create(i.prototype,{nodeName:{get:function(){return this.name}},nodeValue:{get:function(){return null},set:function(){}},clone:{value:function(){o.DataCloneError()}},isEqual:{value:function(e){return this.name===e.name&&this.publicId===e.publicId&&this.systemId===e.systemId}}}),Object.defineProperties(s.prototype,a)},function(e,t,n){"use strict";var r=n(14),i=n(47),o=n(97),a=n(30),s=n(2);function c(e){this.document=e||(new r).createHTMLDocument(""),this.document._scripting_enabled=!0,this.document.defaultView=this,this.location=new o(this,this.document._address||"about:blank")}e.exports=c,c.prototype=Object.create(i.prototype,{_run:{value:a.Window_run},console:{value:console},history:{value:{back:s.nyi,forward:s.nyi,go:s.nyi}},navigator:{value:n(96)},window:{get:function(){return this}},self:{get:function(){return this}},frames:{get:function(){return this}},parent:{get:function(){return this}},top:{get:function(){return this}},length:{value:0},frameElement:{value:null},opener:{value:null},onload:{get:function(){return this._getEventHandler("load")},set:function(e){this._setEventHandler("load",e)}},getComputedStyle:{value:function(e){return e.style}}}),s.expose(n(95),c),s.expose(n(29),c)},function(e,t,n){"use strict";var r=n(98);function i(e){this._element=e}function o(e){var t=new r.css.Parser,n={property:Object.create(null),priority:Object.create(null)};return t.addListener("property",function(e){e.invalid||(n.property[e.property.text]=e.value.text,e.important&&(n.priority[e.property.text]="important"))}),e=(""+e).replace(/^;/,""),t.parseStyleAttribute(e),n}e.exports=i;var a={};i.prototype=Object.create(Object.prototype,{_parsed:{get:function(){if(!this._parsedStyles||this.cssText!==this._lastParsedText){var e=this.cssText;this._parsedStyles=o(e),this._lastParsedText=e,delete this._names}return this._parsedStyles}},_serialize:{value:function(){var e=this._parsed,t="";for(var n in e.property)t&&(t+=" "),t+=n+": "+e.property[n],e.priority[n]&&(t+=" !"+e.priority[n]),t+=";";this.cssText=t,this._lastParsedText=t,delete this._names}},cssText:{get:function(){return this._element.getAttribute("style")},set:function(e){this._element.setAttribute("style",e)}},length:{get:function(){return this._names||(this._names=Object.getOwnPropertyNames(this._parsed.property)),this._names.length}},item:{value:function(e){return this._names||(this._names=Object.getOwnPropertyNames(this._parsed.property)),this._names[e]}},getPropertyValue:{value:function(e){return e=e.toLowerCase(),this._parsed.property[e]||""}},getPropertyPriority:{value:function(e){return e=e.toLowerCase(),this._parsed.priority[e]||""}},setProperty:{value:function(e,t,n){if(e=e.toLowerCase(),null!==t&&void 0!==t||(t=""),null!==n&&void 0!==n||(n=""),t!==a&&(t=""+t),""!==t){if(""===n||n===a||/^important$/i.test(n)){var r=this._parsed;if(t===a){if(!r.property[e])return;""!==n?r.priority[e]="important":delete r.priority[e]}else{if(-1!==t.indexOf(";"))return;var i=o(e+":"+t);if(0===Object.getOwnPropertyNames(i.property).length)return;if(0!==Object.getOwnPropertyNames(i.priority).length)return;for(var s in i.property)r.property[s]=i.property[s],n!==a&&(""!==n?r.priority[s]="important":r.priority[s]&&delete r.priority[s])}this._serialize()}}else this.removeProperty(e)}},setPropertyValue:{value:function(e,t){return this.setProperty(e,t,a)}},setPropertyPriority:{value:function(e,t){return this.setProperty(e,a,t)}},removeProperty:{value:function(e){e=e.toLowerCase();var t=this._parsed;e in t.property&&(delete t.property[e],delete t.priority[e],this._serialize())}}});var s={background:"background",backgroundAttachment:"background-attachment",backgroundColor:"background-color",backgroundImage:"background-image",backgroundPosition:"background-position",backgroundRepeat:"background-repeat",border:"border",borderCollapse:"border-collapse",borderColor:"border-color",borderSpacing:"border-spacing",borderStyle:"border-style",borderTop:"border-top",borderRight:"border-right",borderBottom:"border-bottom",borderLeft:"border-left",borderTopColor:"border-top-color",borderRightColor:"border-right-color",borderBottomColor:"border-bottom-color",borderLeftColor:"border-left-color",borderTopStyle:"border-top-style",borderRightStyle:"border-right-style",borderBottomStyle:"border-bottom-style",borderLeftStyle:"border-left-style",borderTopWidth:"border-top-width",borderRightWidth:"border-right-width",borderBottomWidth:"border-bottom-width",borderLeftWidth:"border-left-width",borderWidth:"border-width",bottom:"bottom",captionSide:"caption-side",clear:"clear",clip:"clip",color:"color",content:"content",counterIncrement:"counter-increment",counterReset:"counter-reset",cursor:"cursor",direction:"direction",display:"display",emptyCells:"empty-cells",cssFloat:"float",font:"font",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",height:"height",left:"left",letterSpacing:"letter-spacing",lineHeight:"line-height",listStyle:"list-style",listStyleImage:"list-style-image",listStylePosition:"list-style-position",listStyleType:"list-style-type",margin:"margin",marginTop:"margin-top",marginRight:"margin-right",marginBottom:"margin-bottom",marginLeft:"margin-left",markerOffset:"marker-offset",marks:"marks",maxHeight:"max-height",maxWidth:"max-width",minHeight:"min-height",minWidth:"min-width",opacity:"opacity",orphans:"orphans",outline:"outline",outlineColor:"outline-color",outlineStyle:"outline-style",outlineWidth:"outline-width",overflow:"overflow",padding:"padding",paddingTop:"padding-top",paddingRight:"padding-right",paddingBottom:"padding-bottom",paddingLeft:"padding-left",page:"page",pageBreakAfter:"page-break-after",pageBreakBefore:"page-break-before",pageBreakInside:"page-break-inside",position:"position",quotes:"quotes",right:"right",size:"size",tableLayout:"table-layout",textAlign:"text-align",textDecoration:"text-decoration",textIndent:"text-indent",textShadow:"text-shadow",textTransform:"text-transform",top:"top",unicodeBidi:"unicode-bidi",verticalAlign:"vertical-align",visibility:"visibility",whiteSpace:"white-space",widows:"widows",width:"width",wordSpacing:"word-spacing",zIndex:"z-index"};for(var c in s)l(c);function l(e){var t=s[e];Object.defineProperty(i.prototype,e,{get:function(){return this.getPropertyValue(t)},set:function(e){this.setProperty(t,e)}})}},function(e,t,n){"use strict";var r=n(3),i=n(8),o=n(18),a=n(2),s=n(32),c=n(31),l=t.elements={},u=Object.create(null);function p(e){return c(e,y,l,u)}function h(e){return{get:function(){var t=this._getattr(e);if(null===t)return"";var n=this.doc._resolve(t);return null===n?t:n},set:function(t){this._setattr(e,t)}}}function d(e){return{get:function(){var t=this._getattr(e);return null===t?null:"use-credentials"===t.toLowerCase()?"use-credentials":"anonymous"},set:function(t){null===t||void 0===t?this.removeAttribute(e):this._setattr(e,t)}}}t.createElement=function(e,t,n){return new(u[t]||b)(e,t,n)};var f={type:["","no-referrer","no-referrer-when-downgrade","same-origin","origin","strict-origin","origin-when-cross-origin","strict-origin-when-cross-origin","unsafe-url"],missing:""},g={A:!0,LINK:!0,BUTTON:!0,INPUT:!0,SELECT:!0,TEXTAREA:!0,COMMAND:!0},m=function(e,t,n){y.call(this,e,t,n),this._form=null},y=t.HTMLElement=p({superclass:i,ctor:function(e,t,n){i.call(this,e,t,a.NAMESPACE.HTML,n)},props:{innerHTML:{get:function(){return this.serialize()},set:function(e){var t=this.ownerDocument.implementation.mozHTMLParser(this.ownerDocument._address,this);t.parse(e,!0);for(var n=t.document().firstChild,r=this instanceof u.template?this.content:this;r.hasChildNodes();)r.removeChild(r.firstChild);for(r.doc.adoptNode(n);n.hasChildNodes();)r.appendChild(n.firstChild)}},style:{get:function(){return this._style||(this._style=new o(this)),this._style}},click:{value:function(){if(!this._click_in_progress){this._click_in_progress=!0;try{this._pre_click_activation_steps&&this._pre_click_activation_steps();var e=this.ownerDocument.createEvent("MouseEvent");e.initMouseEvent("click",!0,!0,this.ownerDocument.defaultView,1,0,0,0,0,!1,!1,!1,!1,0,null),this.dispatchEvent(e)?this._post_click_activation_steps&&this._post_click_activation_steps(e):this._cancelled_activation_steps&&this._cancelled_activation_steps()}finally{this._click_in_progress=!1}}}}},attributes:{title:String,lang:String,dir:{type:["ltr","rtl","auto"],missing:""},accessKey:String,hidden:Boolean,tabIndex:{type:"long",default:function(){return this.tagName in g||this.contentEditable?0:-1}}},events:["abort","canplay","canplaythrough","change","click","contextmenu","cuechange","dblclick","drag","dragend","dragenter","dragleave","dragover","dragstart","drop","durationchange","emptied","ended","input","invalid","keydown","keypress","keyup","loadeddata","loadedmetadata","loadstart","mousedown","mousemove","mouseout","mouseover","mouseup","mousewheel","pause","play","playing","progress","ratechange","readystatechange","reset","seeked","seeking","select","show","stalled","submit","suspend","timeupdate","volumechange","waiting","blur","error","focus","load","scroll"]}),b=p({ctor:function(e,t,n){y.call(this,e,t,n)}}),v={form:{get:function(){return this._form}}};p({tag:"a",ctor:function(e,t,n){y.call(this,e,t,n)},props:{_post_click_activation_steps:{value:function(e){this.href&&(this.ownerDocument.defaultView.location=this.href)}},blur:{value:function(){}},focus:{value:function(){}}},attributes:{href:h,ping:String,download:String,target:String,rel:String,media:String,hreflang:String,type:String,referrerPolicy:f,coords:String,charset:String,name:String,rev:String,shape:String}}),s._inherit(u.a.prototype),p({tag:"area",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{alt:String,target:String,download:String,rel:String,media:String,href:h,hreflang:String,type:String,shape:String,coords:String,ping:String,referrerPolicy:f,noHref:Boolean}}),p({tag:"br",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{clear:String}}),p({tag:"base",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{target:String}}),p({tag:"body",ctor:function(e,t,n){y.call(this,e,t,n)},events:["afterprint","beforeprint","beforeunload","blur","error","focus","hashchange","load","message","offline","online","pagehide","pageshow","popstate","resize","scroll","storage","unload"],attributes:{text:{type:String,treatNullAsEmptyString:!0},link:{type:String,treatNullAsEmptyString:!0},vLink:{type:String,treatNullAsEmptyString:!0},aLink:{type:String,treatNullAsEmptyString:!0},bgColor:{type:String,treatNullAsEmptyString:!0},background:String}}),p({tag:"button",ctor:function(e,t,n){m.call(this,e,t,n)},props:v,attributes:{name:String,value:String,disabled:Boolean,autofocus:Boolean,type:{type:["submit","reset","button","menu"],missing:"submit"},formTarget:String,formNoValidate:Boolean,formMethod:{type:["get","post","dialog"],invalid:"get",missing:""},formEnctype:{type:["application/x-www-form-urlencoded","multipart/form-data","text/plain"],invalid:"application/x-www-form-urlencoded",missing:""}}}),p({tag:"dl",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{compact:Boolean}}),p({tag:"data",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{value:String}}),p({tag:"datalist",ctor:function(e,t,n){y.call(this,e,t,n)}}),p({tag:"details",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{open:Boolean}}),p({tag:"div",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{align:String}}),p({tag:"embed",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{src:h,type:String,width:String,height:String,align:String,name:String}}),p({tag:"fieldset",ctor:function(e,t,n){m.call(this,e,t,n)},props:v,attributes:{disabled:Boolean,name:String}}),p({tag:"form",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{action:String,autocomplete:{type:["on","off"],missing:"on"},name:String,acceptCharset:{name:"accept-charset"},target:String,noValidate:Boolean,method:{type:["get","post","dialog"],invalid:"get",missing:"get"},enctype:{type:["application/x-www-form-urlencoded","multipart/form-data","text/plain"],invalid:"application/x-www-form-urlencoded",missing:"application/x-www-form-urlencoded"},encoding:{name:"enctype",type:["application/x-www-form-urlencoded","multipart/form-data","text/plain"],invalid:"application/x-www-form-urlencoded",missing:"application/x-www-form-urlencoded"}}}),p({tag:"hr",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{align:String,color:String,noShade:Boolean,size:String,width:String}}),p({tag:"head",ctor:function(e,t,n){y.call(this,e,t,n)}}),p({tags:["h1","h2","h3","h4","h5","h6"],ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{align:String}}),p({tag:"html",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{version:String}}),p({tag:"iframe",ctor:function(e,t,r){y.call(this,e,t,r);var i=n(17);this._contentWindow=new i},props:{contentWindow:{get:function(){return this._contentWindow}},contentDocument:{get:function(){return this.contentWindow.document}}},attributes:{src:h,srcdoc:String,name:String,width:String,height:String,seamless:Boolean,allowFullscreen:Boolean,allowUserMedia:Boolean,allowPaymentRequest:Boolean,referrerPolicy:f,align:String,scrolling:String,frameBorder:String,longDesc:h,marginHeight:{type:String,treatNullAsEmptyString:!0},marginWidth:{type:String,treatNullAsEmptyString:!0}}}),p({tag:"img",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{alt:String,src:h,srcset:String,crossOrigin:d,useMap:String,isMap:Boolean,height:{type:"unsigned long",default:0},width:{type:"unsigned long",default:0},referrerPolicy:f,name:String,lowsrc:h,align:String,hspace:{type:"unsigned long",default:0},vspace:{type:"unsigned long",default:0},longDesc:h,border:{type:String,treatNullAsEmptyString:!0}}}),p({tag:"input",ctor:function(e,t,n){m.call(this,e,t,n)},props:{form:v.form,_post_click_activation_steps:{value:function(e){if("checkbox"===this.type)this.checked=!this.checked;else if("radio"===this.type)for(var t=this.form.getElementsByName(this.name),n=t.length-1;n>=0;n--){var r=t[n];r.checked=r===this}}}},attributes:{name:String,disabled:Boolean,autofocus:Boolean,accept:String,alt:String,max:String,min:String,pattern:String,placeholder:String,step:String,dirName:String,defaultValue:{name:"value"},multiple:Boolean,required:Boolean,readOnly:Boolean,checked:Boolean,value:String,src:h,defaultChecked:{name:"checked",type:Boolean},size:{type:"unsigned long",default:20,min:1,setmin:1},maxLength:{type:"unsigned long",min:0,setmin:0,default:-1},autocomplete:String,type:{type:["text","hidden","search","tel","url","email","password","datetime","date","month","week","time","datetime-local","number","range","color","checkbox","radio","file","submit","image","reset","button"],missing:"text"},formTarget:String,formNoValidate:Boolean,formMethod:{type:["get","post"],invalid:"get",missing:""},formEnctype:{type:["application/x-www-form-urlencoded","multipart/form-data","text/plain"],invalid:"application/x-www-form-urlencoded",missing:""},inputMode:{type:["verbatim","latin","latin-name","latin-prose","full-width-latin","kana","kana-name","katakana","numeric","tel","email","url"],missing:""},align:String,useMap:String}}),p({tag:"keygen",ctor:function(e,t,n){m.call(this,e,t,n)},props:v,attributes:{name:String,disabled:Boolean,autofocus:Boolean,challenge:String,keytype:{type:["rsa"],missing:""}}}),p({tag:"li",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{value:{type:"long",default:0},type:String}}),p({tag:"label",ctor:function(e,t,n){m.call(this,e,t,n)},props:v,attributes:{htmlFor:{name:"for",type:String}}}),p({tag:"legend",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{align:String}}),p({tag:"link",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{href:h,rel:String,media:String,hreflang:String,type:String,crossOrigin:d,nonce:String,integrity:String,referrerPolicy:f,charset:String,rev:String,target:String}}),p({tag:"map",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{name:String}}),p({tag:"menu",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{type:{type:["context","popup","toolbar"],missing:"toolbar"},label:String,compact:Boolean}}),p({tag:"meta",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{name:String,content:String,httpEquiv:{name:"http-equiv",type:String},scheme:String}}),p({tag:"meter",ctor:function(e,t,n){m.call(this,e,t,n)},props:v}),p({tags:["ins","del"],ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{cite:h,dateTime:String}}),p({tag:"ol",ctor:function(e,t,n){y.call(this,e,t,n)},props:{_numitems:{get:function(){var e=0;return this.childNodes.forEach(function(t){t.nodeType===r.ELEMENT_NODE&&"LI"===t.tagName&&e++}),e}}},attributes:{type:String,reversed:Boolean,start:{type:"long",default:function(){return this.reversed?this._numitems:1}},compact:Boolean}}),p({tag:"object",ctor:function(e,t,n){m.call(this,e,t,n)},props:v,attributes:{data:h,type:String,name:String,useMap:String,typeMustMatch:Boolean,width:String,height:String,align:String,archive:String,code:String,declare:Boolean,hspace:{type:"unsigned long",default:0},standby:String,vspace:{type:"unsigned long",default:0},codeBase:h,codeType:String,border:{type:String,treatNullAsEmptyString:!0}}}),p({tag:"optgroup",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{disabled:Boolean,label:String}}),p({tag:"option",ctor:function(e,t,n){y.call(this,e,t,n)},props:{form:{get:function(){for(var e=this.parentNode;e&&e.nodeType===r.ELEMENT_NODE;){if("select"===e.localName)return e.form;e=e.parentNode}}}},attributes:{disabled:Boolean,defaultSelected:{name:"selected",type:Boolean},label:String,value:String}}),p({tag:"output",ctor:function(e,t,n){m.call(this,e,t,n)},props:v,attributes:{name:String}}),p({tag:"p",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{align:String}}),p({tag:"param",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{name:String,value:String,type:String,valueType:String}}),p({tags:["pre","listing","xmp"],ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{width:{type:"long",default:0}}}),p({tag:"progress",ctor:function(e,t,n){m.call(this,e,t,n)},props:v,attributes:{max:{type:Number,float:!0,default:1,min:0}}}),p({tags:["q","blockquote"],ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{cite:h}}),p({tag:"script",ctor:function(e,t,n){y.call(this,e,t,n)},props:{text:{get:function(){for(var e="",t=0,n=this.childNodes.length;t<n;t++){var i=this.childNodes[t];i.nodeType===r.TEXT_NODE&&(e+=i._data)}return e},set:function(e){this.removeChildren(),null!==e&&""!==e&&this.appendChild(this.ownerDocument.createTextNode(e))}}},attributes:{src:h,type:String,charset:String,defer:Boolean,async:Boolean,crossOrigin:d,nonce:String,integrity:String}}),p({tag:"select",ctor:function(e,t,n){m.call(this,e,t,n)},props:{form:v.form,options:{get:function(){return this.getElementsByTagName("option")}}},attributes:{name:String,disabled:Boolean,autofocus:Boolean,multiple:Boolean,required:Boolean,size:{type:"unsigned long",default:0}}}),p({tag:"source",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{src:h,type:String,media:String}}),p({tag:"span",ctor:function(e,t,n){y.call(this,e,t,n)}}),p({tag:"style",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{media:String,type:String,scoped:Boolean}}),p({tag:"caption",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{align:String}}),p({ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{colSpan:{type:"unsigned long",default:1},rowSpan:{type:"unsigned long",default:1},scope:{type:["row","col","rowgroup","colgroup"],missing:""},abbr:String,align:String,axis:String,height:String,width:String,ch:{name:"char",type:String},chOff:{name:"charoff",type:String},noWrap:Boolean,vAlign:String,bgColor:{type:String,treatNullAsEmptyString:!0}}}),p({tags:["col","colgroup"],ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{span:{type:"limited unsigned long with fallback",default:1,min:1},align:String,ch:{name:"char",type:String},chOff:{name:"charoff",type:String},vAlign:String,width:String}}),p({tag:"table",ctor:function(e,t,n){y.call(this,e,t,n)},props:{rows:{get:function(){return this.getElementsByTagName("tr")}}},attributes:{align:String,border:String,frame:String,rules:String,summary:String,width:String,bgColor:{type:String,treatNullAsEmptyString:!0},cellPadding:{type:String,treatNullAsEmptyString:!0},cellSpacing:{type:String,treatNullAsEmptyString:!0}}}),p({tag:"template",ctor:function(e,t,n){y.call(this,e,t,n),this._contentFragment=e._templateDoc.createDocumentFragment()},props:{content:{get:function(){return this._contentFragment}},serialize:{value:function(){return this.content.serialize()}}}}),p({tag:"tr",ctor:function(e,t,n){y.call(this,e,t,n)},props:{cells:{get:function(){return this.querySelectorAll("td,th")}}},attributes:{align:String,ch:{name:"char",type:String},chOff:{name:"charoff",type:String},vAlign:String,bgColor:{type:String,treatNullAsEmptyString:!0}}}),p({tags:["thead","tfoot","tbody"],ctor:function(e,t,n){y.call(this,e,t,n)},props:{rows:{get:function(){return this.getElementsByTagName("tr")}}},attributes:{align:String,ch:{name:"char",type:String},chOff:{name:"charoff",type:String},vAlign:String}}),p({tag:"textarea",ctor:function(e,t,n){m.call(this,e,t,n)},props:v,attributes:{autocomplete:String,name:String,disabled:Boolean,autofocus:Boolean,placeholder:String,wrap:String,dirName:String,required:Boolean,readOnly:Boolean,rows:{type:"limited unsigned long with fallback",default:2},cols:{type:"limited unsigned long with fallback",default:20},maxLength:{type:"unsigned long",min:0,setmin:0,default:-1},inputMode:{type:["verbatim","latin","latin-name","latin-prose","full-width-latin","kana","kana-name","katakana","numeric","tel","email","url"],missing:""}}}),p({tag:"time",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{dateTime:String,pubDate:Boolean}}),p({tag:"title",ctor:function(e,t,n){y.call(this,e,t,n)},props:{text:{get:function(){return this.textContent}}}}),p({tag:"ul",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{type:String,compact:Boolean}}),p({ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{src:h,crossOrigin:d,preload:{type:["metadata","none","auto",{value:"",alias:"auto"}],missing:"auto"},loop:Boolean,autoplay:Boolean,mediaGroup:String,controls:Boolean,defaultMuted:{name:"muted",type:Boolean}}}),p({tag:"audio",superclass:l.HTMLMediaElement,ctor:function(e,t,n){l.HTMLMediaElement.call(this,e,t,n)}}),p({tag:"video",superclass:l.HTMLMediaElement,ctor:function(e,t,n){l.HTMLMediaElement.call(this,e,t,n)},attributes:{poster:h,width:{type:"unsigned long",min:0,default:0},height:{type:"unsigned long",min:0,default:0}}}),p({tag:"td",superclass:l.HTMLTableCellElement,ctor:function(e,t,n){l.HTMLTableCellElement.call(this,e,t,n)}}),p({tag:"th",superclass:l.HTMLTableCellElement,ctor:function(e,t,n){l.HTMLTableCellElement.call(this,e,t,n)}}),p({tag:"frameset",ctor:function(e,t,n){y.call(this,e,t,n)}}),p({tag:"frame",ctor:function(e,t,n){y.call(this,e,t,n)}}),p({tag:"canvas",ctor:function(e,t,n){y.call(this,e,t,n)},props:{getContext:{value:a.nyi},probablySupportsContext:{value:a.nyi},setContext:{value:a.nyi},transferControlToProxy:{value:a.nyi},toDataURL:{value:a.nyi},toBlob:{value:a.nyi}},attributes:{width:{type:"unsigned long",default:300},height:{type:"unsigned long",default:150}}}),p({tag:"dialog",ctor:function(e,t,n){y.call(this,e,t,n)},props:{show:{value:a.nyi},showModal:{value:a.nyi},close:{value:a.nyi}},attributes:{open:Boolean,returnValue:String}}),p({tag:"menuitem",ctor:function(e,t,n){y.call(this,e,t,n)},props:{_label:{get:function(){var e=this._getattr("label");return null!==e&&""!==e?e:(e=this.textContent).replace(/[ \t\n\f\r]+/g," ").trim()}},label:{get:function(){var e=this._getattr("label");return null!==e?e:this._label},set:function(e){this._setattr("label",e)}}},attributes:{type:{type:["command","checkbox","radio"],missing:"command"},icon:h,disabled:Boolean,checked:Boolean,radiogroup:String,default:Boolean}}),p({tag:"source",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{srcset:String,sizes:String,media:String,src:h,type:String}}),p({tag:"track",ctor:function(e,t,n){y.call(this,e,t,n)},attributes:{src:h,srclang:String,label:String,default:Boolean,kind:{type:["subtitles","captions","descriptions","chapters","metadata"],missing:"subtitles",invalid:"metadata"}},props:{NONE:{get:function(){return 0}},LOADING:{get:function(){return 1}},LOADED:{get:function(){return 2}},ERROR:{get:function(){return 3}},readyState:{get:a.nyi},track:{get:a.nyi}}}),p({tags:["abbr","address","article","aside","b","bdi","bdo","cite","code","dd","dfn","dt","em","figcaption","figure","footer","header","hgroup","i","kbd","main","mark","nav","noscript","rb","rp","rt","rtc","ruby","s","samp","section","small","strong","sub","summary","sup","u","var","wbr","acronym","basefont","big","center","nobr","noembed","noframes","plaintext","strike","tt"]})},function(e,t,n){"use strict";function r(e){if(!e)return Object.create(r.prototype);this.url=e.replace(/^[ \t\n\r\f]+|[ \t\n\r\f]+$/g,"");var t=r.pattern.exec(this.url);if(t){if(t[2]&&(this.scheme=t[2]),t[4]){var n=t[4].match(r.userinfoPattern);if(n&&(this.username=n[1],this.password=n[3],t[4]=t[4].substring(n[0].length)),t[4].match(r.portPattern)){var i=t[4].lastIndexOf(":");this.host=t[4].substring(0,i),this.port=t[4].substring(i+1)}else this.host=t[4]}t[5]&&(this.path=t[5]),t[6]&&(this.query=t[7]),t[8]&&(this.fragment=t[9])}}e.exports=r,r.pattern=/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/,r.userinfoPattern=/^([^@:]*)(:([^@]*))?@/,r.portPattern=/:\d+$/,r.authorityPattern=/^[^:\/?#]+:\/\//,r.hierarchyPattern=/^[^:\/?#]+:\//,r.percentEncode=function(e){var t=e.charCodeAt(0);if(t<256)return"%"+t.toString(16);throw Error("can't percent-encode codepoints > 255 yet")},r.prototype={constructor:r,isAbsolute:function(){return!!this.scheme},isAuthorityBased:function(){return r.authorityPattern.test(this.url)},isHierarchical:function(){return r.hierarchyPattern.test(this.url)},toString:function(){var e="";return void 0!==this.scheme&&(e+=this.scheme+":"),this.isAbsolute()&&(e+="//",(this.username||this.password)&&(e+=this.username||"",this.password&&(e+=":"+this.password),e+="@"),e+=this.host),void 0!==this.port&&(e+=":"+this.port),void 0!==this.path&&(e+=this.path),void 0!==this.query&&(e+="?"+this.query),void 0!==this.fragment&&(e+="#"+this.fragment),e},resolve:function(e){var t=this,n=new r(e),i=new r;return void 0!==n.scheme?(i.scheme=n.scheme,i.username=n.username,i.password=n.password,i.host=n.host,i.port=n.port,i.path=o(n.path),i.query=n.query):(i.scheme=t.scheme,void 0!==n.host?(i.username=n.username,i.password=n.password,i.host=n.host,i.port=n.port,i.path=o(n.path),i.query=n.query):(i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,n.path?("/"===n.path.charAt(0)?i.path=o(n.path):(i.path=function(e,n){if(void 0!==t.host&&!t.path)return"/"+n;var r=e.lastIndexOf("/");return-1===r?n:e.substring(0,r+1)+n}(t.path,n.path),i.path=o(i.path)),i.query=n.query):(i.path=t.path,void 0!==n.query?i.query=n.query:i.query=t.query))),i.fragment=n.fragment,i.toString();function o(e){if(!e)return e;for(var t="";e.length>0;){if("."===e||".."===e){e="";break}var n=e.substring(0,2),r=e.substring(0,3),i=e.substring(0,4);if("../"===r)e=e.substring(3);else if("./"===n)e=e.substring(2);else if("/./"===r)e="/"+e.substring(3);else if("/."===n&&2===e.length)e="/";else if("/../"===i||"/.."===r&&3===e.length)e="/"+e.substring(4),t=t.replace(/\/?[^\/]*$/,"");else{var o=e.match(/(\/?([^\/]*))/)[0];t+=o,e=e.substring(o.length)}}return t}}}},function(e,t,n){"use strict";var r=n(3),i=function(e,t){for(var n=e.createDocumentFragment(),i=0;i<t.length;i++){var o=t[i],a=o instanceof r;n.appendChild(a?o:e.createTextNode(String(o)))}return n},o={after:{value:function(){var e=Array.prototype.slice.call(arguments),t=this.parentNode,n=this.nextSibling;if(null!==t){for(;n&&e.some(function(e){return e===n});)n=n.nextSibling;var r=i(this.doc,e);t.insertBefore(r,n)}}},before:{value:function(){var e=Array.prototype.slice.call(arguments),t=this.parentNode,n=this.previousSibling;if(null!==t){for(;n&&e.some(function(e){return e===n});)n=n.previousSibling;var r=i(this.doc,e),o=n?n.nextSibling:t.firstChild;t.insertBefore(r,o)}}},remove:{value:function(){null!==this.parentNode&&(this.rooted&&this.doc&&this.doc.mutateRemove(this),this.parentNode.childNodes.splice(this.index,1),this.parentNode.modify(),this.parentNode=null)}},replaceWith:{value:function(){var e=Array.prototype.slice.call(arguments),t=this.parentNode,n=this.nextSibling;if(null!==t){for(;n&&e.some(function(e){return e===n});)n=n.nextSibling;var r=i(this.doc,e);this.parentNode===t?t.replaceChild(r,this):t.insertBefore(r,n)}}}};e.exports=o},function(e,t,n){"use strict";var r=Object.create(null,{location:{get:function(){throw new Error("window.location is not supported.")}}}),i=function(e,t){return 2&function(e,t){return e.compareDocumentPosition(t)}(e,t)?1:-1},o=function(e){for(;(e=e.nextSibling)&&1!==e.nodeType;);return e},a=function(e){for(;(e=e.previousSibling)&&1!==e.nodeType;);return e},s=function(e){if(e=e.firstChild)for(;1!==e.nodeType&&(e=e.nextSibling););return e},c=function(e){if(e=e.lastChild)for(;1!==e.nodeType&&(e=e.previousSibling););return e},l=function(e){if(!e)return e;var t=e[0];return'"'===t||"'"===t?(e=e[e.length-1]===t?e.slice(1,-1):e.slice(1)).replace(v.str_escape,function(e){var t=/^\\(?:([0-9A-Fa-f]+)|([\r\n\f]+))/.exec(e);if(!t)return e.slice(1);if(t[2])return"";var n=parseInt(t[1],16);return String.fromCodePoint?String.fromCodePoint(n):String.fromCharCode(n)}):v.ident.test(e)?u(e):e},u=function(e){return e.replace(v.escape,function(e){var t=/^\\([0-9A-Fa-f]+)/.exec(e);if(!t)return e[1];var n=parseInt(t[1],16);return String.fromCodePoint?String.fromCodePoint(n):String.fromCharCode(n)})},p=Array.prototype.indexOf?Array.prototype.indexOf:function(e,t){for(var n=this.length;n--;)if(this[n]===t)return n;return-1},h=function(e,t){var n=v.inside.source.replace(/</g,e).replace(/>/g,t);return new RegExp(n)},d=function(e,t,n){return e=(e=e.source).replace(t,n.source||n),new RegExp(e)},f=function(e,t){return e.replace(/^(?:\w+:\/\/|\/+)/,"").replace(/(?:\/+|\/*#.*?)$/,"").split("/",t).join("/")},g=function(e,t,n){var r=function(e,t){var n,r=e.replace(/\s+/g,"");return"even"===r?r="2n+0":"odd"===r?r="2n+1":-1===r.indexOf("n")&&(r="0n"+r),{group:"-"===(n=/^([+-])?(\d+)?n([+-])?(\d+)?$/.exec(r))[1]?-(n[2]||1):+(n[2]||1),offset:n[4]?"-"===n[3]?-n[4]:+n[4]:0}}(e),i=r.group,l=r.offset,u=n?c:s,p=n?a:o;return function(e){if(1===e.parentNode.nodeType)for(var n=u(e.parentNode),r=0;n;){if(t(n,e)&&r++,n===e)return r-=l,i&&r?r%i==0&&r<0==i<0:!r;n=p(n)}}},m={"*":function(){return!0},type:function(e){return e=e.toLowerCase(),function(t){return t.nodeName.toLowerCase()===e}},attr:function(e,t,n,r){return t=y[t],function(i){var o;switch(e){case"for":o=i.htmlFor;break;case"class":""===(o=i.className)&&null==i.getAttribute("class")&&(o=null);break;case"href":o=i.getAttribute("href",2);break;case"title":o=i.getAttribute("title")||null;break;case"id":case"lang":case"dir":case"accessKey":case"hidden":case"tabIndex":case"style":if(i.getAttribute){o=i.getAttribute(e);break}default:if(i.hasAttribute&&!i.hasAttribute(e))break;o=null!=i[e]?i[e]:i.getAttribute&&i.getAttribute(e)}if(null!=o)return o+="",r&&(o=o.toLowerCase(),n=n.toLowerCase()),t(o,n)}},":first-child":function(e){return!a(e)&&1===e.parentNode.nodeType},":last-child":function(e){return!o(e)&&1===e.parentNode.nodeType},":only-child":function(e){return!a(e)&&!o(e)&&1===e.parentNode.nodeType},":nth-child":function(e,t){return g(e,function(){return!0},t)},":nth-last-child":function(e){return m[":nth-child"](e,!0)},":root":function(e){return e.ownerDocument.documentElement===e},":empty":function(e){return!e.firstChild},":not":function(e){var t=N(e);return function(e){return!t(e)}},":first-of-type":function(e){if(1===e.parentNode.nodeType){for(var t=e.nodeName;e=a(e);)if(e.nodeName===t)return;return!0}},":last-of-type":function(e){if(1===e.parentNode.nodeType){for(var t=e.nodeName;e=o(e);)if(e.nodeName===t)return;return!0}},":only-of-type":function(e){return m[":first-of-type"](e)&&m[":last-of-type"](e)},":nth-of-type":function(e,t){return g(e,function(e,t){return e.nodeName===t.nodeName},t)},":nth-last-of-type":function(e){return m[":nth-of-type"](e,!0)},":checked":function(e){return!(!e.checked&&!e.selected)},":indeterminate":function(e){return!m[":checked"](e)},":enabled":function(e){return!e.disabled&&"hidden"!==e.type},":disabled":function(e){return!!e.disabled},":target":function(e){return e.id===r.location.hash.substring(1)},":focus":function(e){return e===e.ownerDocument.activeElement},":matches":function(e){return N(e)},":nth-match":function(e,t){var n=e.split(/\s*,\s*/),r=n.shift(),i=N(n.join(","));return g(r,i,t)},":nth-last-match":function(e){return m[":nth-match"](e,!0)},":links-here":function(e){return e+""==r.location+""},":lang":function(e){return function(t){for(;t;){if(t.lang)return 0===t.lang.indexOf(e);t=t.parentNode}}},":dir":function(e){return function(t){for(;t;){if(t.dir)return t.dir===e;t=t.parentNode}}},":scope":function(e,t){var n=t||e.ownerDocument;return 9===n.nodeType?e===n.documentElement:e===n},":any-link":function(e){return"string"==typeof e.href},":local-link":function(e){if(e.nodeName)return e.href&&e.host===r.location.host;var t=+e+1;return function(e){if(e.href){var n=r.location+"",i=e+"";return f(n,t)===f(i,t)}}},":default":function(e){return!!e.defaultSelected},":valid":function(e){return e.willValidate||e.validity&&e.validity.valid},":invalid":function(e){return!m[":valid"](e)},":in-range":function(e){return e.value>e.min&&e.value<=e.max},":out-of-range":function(e){return!m[":in-range"](e)},":required":function(e){return!!e.required},":optional":function(e){return!e.required},":read-only":function(e){if(e.readOnly)return!0;var t=e.getAttribute("contenteditable"),n=e.contentEditable,r=e.nodeName.toLowerCase();return((r="input"!==r&&"textarea"!==r)||e.disabled)&&null==t&&"true"!==n},":read-write":function(e){return!m[":read-only"](e)},":hover":function(){throw new Error(":hover is not supported.")},":active":function(){throw new Error(":active is not supported.")},":link":function(){throw new Error(":link is not supported.")},":visited":function(){throw new Error(":visited is not supported.")},":column":function(){throw new Error(":column is not supported.")},":nth-column":function(){throw new Error(":nth-column is not supported.")},":nth-last-column":function(){throw new Error(":nth-last-column is not supported.")},":current":function(){throw new Error(":current is not supported.")},":past":function(){throw new Error(":past is not supported.")},":future":function(){throw new Error(":future is not supported.")},":contains":function(e){return function(t){return-1!==(t.innerText||t.textContent||t.value||"").indexOf(e)}},":has":function(e){return function(t){return S(e,t).length>0}}},y={"-":function(){return!0},"=":function(e,t){return e===t},"*=":function(e,t){return-1!==e.indexOf(t)},"~=":function(e,t){var n,r,i=e.indexOf(t);if(-1!==i)return n=e[i-1],r=e[i+t.length],!(n&&" "!==n||r&&" "!==r)},"|=":function(e,t){var n,r=e.indexOf(t);if(0===r)return"-"===(n=e[r+t.length])||!n},"^=":function(e,t){return 0===e.indexOf(t)},"$=":function(e,t){return e.indexOf(t)+t.length===e.length},"!=":function(e,t){return e!==t}},b={" ":function(e){return function(t){for(;t=t.parentNode;)if(e(t))return t}},">":function(e){return function(t){if(t=t.parentNode)return e(t)&&t}},"+":function(e){return function(t){if(t=a(t))return e(t)&&t}},"~":function(e){return function(t){for(;t=a(t);)if(e(t))return t}},noop:function(e){return function(t){return e(t)&&t}},ref:function(e,t){var n;function r(e){for(var t=e.ownerDocument.getElementsByTagName("*"),i=t.length;i--;)if(n=t[i],r.test(e))return n=null,!0;n=null}return r.combinator=function(r){if(n&&n.getAttribute){var i=n.getAttribute(t)||"";return"#"===i[0]&&(i=i.substring(1)),i===r.id&&e(n)?n:void 0}},r}},v={escape:/\\(?:[^0-9A-Fa-f\r\n]|[0-9A-Fa-f]{1,6}[\r\n\t ]?)/g,str_escape:/(escape)|\\(\n|\r\n?|\f)/g,nonascii:/[\u00A0-\uFFFF]/,cssid:/(?:(?!-?[0-9])(?:escape|nonascii|[-_a-zA-Z0-9])+)/,qname:/^ *(cssid|\*)/,simple:/^(?:([.#]cssid)|pseudo|attr)/,ref:/^ *\/(cssid)\/ */,combinator:/^(?: +([^ \w*.#\\]) +|( )+|([^ \w*.#\\]))(?! *$)/,attr:/^\[(cssid)(?:([^\w]?=)(inside))?\]/,pseudo:/^(:cssid)(?:\((inside)\))?/,inside:/(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|<[^"'>]*>|\\["'>]|[^"'>])*/,ident:/^(cssid)$/};v.cssid=d(v.cssid,"nonascii",v.nonascii),v.cssid=d(v.cssid,"escape",v.escape),v.qname=d(v.qname,"cssid",v.cssid),v.simple=d(v.simple,"cssid",v.cssid),v.ref=d(v.ref,"cssid",v.cssid),v.attr=d(v.attr,"cssid",v.cssid),v.pseudo=d(v.pseudo,"cssid",v.cssid),v.inside=d(v.inside,"[^\"'>]*",v.inside),v.attr=d(v.attr,"inside",h("\\[","\\]")),v.pseudo=d(v.pseudo,"inside",h("\\(","\\)")),v.simple=d(v.simple,"pseudo",v.pseudo),v.simple=d(v.simple,"attr",v.attr),v.ident=d(v.ident,"cssid",v.cssid),v.str_escape=d(v.str_escape,"escape",v.escape);var _=function(e){for(var t,n,r,i,o,a,s=e.replace(/^\s+|\s+$/g,""),c=[],l=[];s;){if(i=v.qname.exec(s))s=s.substring(i[0].length),r=i[1],l.push(w(r,!0));else{if(!(i=v.simple.exec(s)))throw new SyntaxError("Invalid selector.");s=s.substring(i[0].length),r="*",l.push(w(r,!0)),l.push(w(i))}for(;i=v.simple.exec(s);)s=s.substring(i[0].length),l.push(w(i));if("!"===s[0]&&(s=s.substring(1),(n=k()).qname=r,l.push(n.simple)),i=v.ref.exec(s))s=s.substring(i[0].length),a=b.ref(E(l),u(i[1])),c.push(a.combinator),l=[];else{if(i=v.combinator.exec(s)){if(s=s.substring(i[0].length),","===(o=i[1]||i[2]||i[3])){c.push(b.noop(E(l)));break}}else o="noop";if(!b[o])throw new SyntaxError("Bad combinator.");c.push(b[o](E(l))),l=[]}}return(t=T(c)).qname=r,t.sel=s,n&&(n.lname=t.qname,n.test=t,n.qname=n.qname,n.sel=t.sel,t=n),a&&(a.test=t,a.qname=t.qname,a.sel=t.sel,t=a),t},w=function(e,t){if(t)return"*"===e?m["*"]:m.type(u(e));if(e[1])return"."===e[1][0]?m.attr("class","~=",u(e[1].substring(1))):m.attr("id","=",u(e[1].substring(1)));if(e[2])return e[3]?m[u(e[2])](l(e[3])):m[u(e[2])];if(e[4])return m.attr(u(e[4]),e[5]||"-",l(e[6]),!1);throw new SyntaxError("Unknown Selector.")},E=function(e){var t,n=e.length;return n<2?e[0]:function(r){if(r){for(t=0;t<n;t++)if(!e[t](r))return;return!0}}},T=function(e){return e.length<2?function(t){return!!e[0](t)}:function(t){for(var n=e.length;n--;)if(!(t=e[n](t)))return;return!0}},k=function(){var e;function t(n){for(var r=n.ownerDocument.getElementsByTagName(t.lname),i=r.length;i--;)if(t.test(r[i])&&e===n)return e=null,!0;e=null}return t.simple=function(t){return e=t,!0},t},N=function(e){for(var t=_(e),n=[t];t.sel;)t=_(t.sel),n.push(t);return n.length<2?t:function(e){for(var t=n.length,r=0;r<t;r++)if(n[r](e))return!0}},S=function(e,t){for(var n,r=[],o=_(e),a=t.getElementsByTagName(o.qname),s=0;n=a[s++];)o(n)&&r.push(n);if(o.sel){for(;o.sel;)for(o=_(o.sel),a=t.getElementsByTagName(o.qname),s=0;n=a[s++];)o(n)&&-1===p.call(r,n)&&r.push(n);r.sort(i)}return r};e.exports=t=function(e,t){var n,r;if(11!==t.nodeType&&-1===e.indexOf(" ")){if("#"===e[0]&&t.rooted&&/^#[A-Z_][-A-Z0-9_]*$/i.test(e)&&t.doc._hasMultipleElementsWithId&&(n=e.substring(1),!t.doc._hasMultipleElementsWithId(n)))return(r=t.doc.getElementById(n))?[r]:[];if("."===e[0]&&/^\.\w+$/.test(e))return t.getElementsByClassName(e.substring(1));if(/^\w+$/.test(e))return t.getElementsByTagName(e)}return S(e,t)},t.selectors=m,t.operators=y,t.combinators=b,t.matches=function(e,t){var n={sel:t};do{if((n=_(n.sel))(e))return!0}while(n.sel);return!1}},function(e,t,n){"use strict";t.isValidName=function(e){if(r.test(e))return!0;if(u.test(e))return!0;if(!h.test(e))return!1;if(!g.test(e))return!1;var t=e.match(d),n=e.match(f);return null!==n&&2*n.length===t.length},t.isValidQName=function(e){if(i.test(e))return!0;if(p.test(e))return!0;if(!h.test(e))return!1;if(!m.test(e))return!1;var t=e.match(d),n=e.match(f);return null!==n&&2*n.length===t.length};var r=/^[_:A-Za-z][-.:\w]+$/,i=/^([_A-Za-z][-.\w]+|[_A-Za-z][-.\w]+:[_A-Za-z][-.\w]+)$/,o="_A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�",a="-._A-Za-z0-9·À-ÖØ-öø-˿̀-ͽͿ-῿‌‍‿⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�",s="["+o+"]["+a+"]*",c=o+":",l=a+":",u=new RegExp("^["+c+"]["+l+"]*$"),p=new RegExp("^("+s+"|"+s+":"+s+")$"),h=/[\uD800-\uDB7F\uDC00-\uDFFF]/,d=/[\uD800-\uDB7F\uDC00-\uDFFF]/g,f=/[\uD800-\uDB7F][\uDC00-\uDFFF]/g;s="["+(o+="\ud800-󯰀-\udfff")+"]["+(a+="\ud800-󯰀-\udfff")+"]*",c=o+":",l=a+":";var g=new RegExp("^["+c+"]["+l+"]*$"),m=new RegExp("^("+s+"|"+s+":"+s+")$")},function(e,t,n){"use strict";e.exports=N;var r=n(3),i=n(13),o=n(8),a=n(39),s=n(37),c=n(9),l=n(36),u=n(35),p=n(14),h=n(101),d=n(100),f=n(11),g=n(20),m=n(22),y=n(33),b=n(23),v=n(19),_=n(28),w=n(2),E=n(94),T=w.NAMESPACE,k=n(43).isApiWritable;function N(e,t){this.nodeType=r.DOCUMENT_NODE,this.isHTML=e,this._address=t||"about:blank",this.readyState="loading",this.implementation=new p,this.ownerDocument=null,this.doctype=null,this.documentElement=null,this.childNodes=new i,this._templateDocCache=null,this._nid=1,this._nextnid=2,this._nodes=[null,this],this.byId=Object.create(null),this.modclock=0}var S={event:"Event",customevent:"CustomEvent",uievent:"UIEvent",mouseevent:"MouseEvent"},R={events:"event",htmlevents:"event",mouseevents:"mouseevent",mutationevents:"mutationevent",uievents:"uievent"},C=function(e,t,n){return{get:function(){var r=e.call(this);return r?r[t]:n},set:function(n){var r=e.call(this);r&&(r[t]=n)}}};N.prototype=Object.create(r.prototype,{_setMutationHandler:{value:function(e){this.mutationHandler=e}},_dispatchRendererEvent:{value:function(e,t,n){var r=this._nodes[e];r&&r._dispatchEvent(new c(t,n),!0)}},nodeName:{value:"#document"},nodeValue:{get:function(){return null},set:function(){}},documentURI:{get:w.nyi,set:w.nyi},compatMode:{get:function(){return this._quirks?"BackCompat":"CSS1Compat"}},parentNode:{value:null},createTextNode:{value:function(e){return new a(this,""+e)}},createComment:{value:function(e){return new s(this,e)}},createDocumentFragment:{value:function(){return new l(this)}},createProcessingInstruction:{value:function(e,t){return b.isValidName(e)&&-1===t.indexOf("?>")||w.InvalidCharacterError(),new u(this,e,t)}},createElement:{value:function(e){return b.isValidName(e)||w.InvalidCharacterError(),this.isHTML&&(e=w.toASCIILowerCase(e)),v.createElement(this,e,null)},writable:k},createElementNS:{value:function(e,t){var n,r,i;return b.isValidName(t)||w.InvalidCharacterError(),b.isValidQName(t)||w.NamespaceError(),-1!==(n=t.indexOf(":"))?(r=t.substring(0,n),i=t.substring(n+1),(""===e||"xml"===r&&e!==T.XML)&&w.NamespaceError()):(r=null,i=t),(("xmlns"===t||"xmlns"===r)&&e!==T.XMLNS||e===T.XMLNS&&"xmlns"!==t&&"xmlns"!==r)&&w.NamespaceError(),e===T.HTML?v.createElement(this,i,r):e===T.SVG?_.createElement(this,i,r):new o(this,i,e,r)},writable:k},createEvent:{value:function(e){e=e.toLowerCase();var t=y[S[R[e]||e]];if(t){var n=new t;return n._initialized=!1,n}w.NotSupportedError()}},createTreeWalker:{value:function(e,t,n){return t=void 0===t?f.SHOW_ALL:t,n&&"object"==typeof n&&"function"==typeof n.acceptNode?n=n.acceptNode.bind(n):"function"!=typeof n&&(n=null),new h(e,t,n)}},createNodeIterator:{value:function(e,t,n){return t=void 0===t?f.SHOW_ALL:t,n&&"object"==typeof n&&"function"==typeof n.acceptNode?n=n.acceptNode.bind(n):"function"!=typeof n&&(n=null),new d(e,t,n)}},_updateDocTypeElement:{value:function(){var e,t,n=this.childNodes,i=n.length;for(this.doctype=this.documentElement=null,e=0;e<i;e++)(t=n[e]).nodeType===r.DOCUMENT_TYPE_NODE?this.doctype=t:t.nodeType===r.ELEMENT_NODE&&(this.documentElement=t)}},insertBefore:{value:function(e,t){return r.prototype.insertBefore.call(this,e,t),this._updateDocTypeElement(),e}},replaceChild:{value:function(e,t){return r.prototype.replaceChild.call(this,e,t),this._updateDocTypeElement(),t}},removeChild:{value:function(e){return r.prototype.removeChild.call(this,e),this._updateDocTypeElement(),e}},getElementById:{value:function(e){var t=this.byId[e];return t?t instanceof O?t.getFirst():t:null}},_hasMultipleElementsWithId:{value:function(e){return this.byId[e]instanceof O}},getElementsByName:{value:o.prototype.getElementsByName},getElementsByTagName:{value:o.prototype.getElementsByTagName},getElementsByTagNameNS:{value:o.prototype.getElementsByTagNameNS},getElementsByClassName:{value:o.prototype.getElementsByClassName},adoptNode:{value:function(e){return e.nodeType===r.DOCUMENT_NODE&&w.NotSupportedError(),e.parentNode&&e.parentNode.removeChild(e),e.ownerDocument!==this&&function e(t,n){t.ownerDocument=n;t._lastModTime=void 0;var r=t.childNodes;for(var i=0,o=r.length;i<o;i++)e(r[i],n)}(e,this),e}},importNode:{value:function(e,t){return this.adoptNode(e.cloneNode(t))},writable:k},URL:{get:w.nyi},domain:{get:w.nyi,set:w.nyi},referrer:{get:w.nyi},cookie:{get:w.nyi,set:w.nyi},lastModified:{get:w.nyi},location:{get:function(){return this.defaultView?this.defaultView.location:null},set:w.nyi},_titleElement:{get:function(){return this.getElementsByTagName("title").item(0)||null}},title:{get:function(){var e=this._titleElement;return(e?e.textContent:"").replace(/[ \t\n\r\f]+/g," ").trim()},set:function(e){var t=this._titleElement,n=this.head;(t||n)&&(t||(t=this.createElement("title"),n.appendChild(t)),t.textContent=e)}},dir:C(function(){var e=this.documentElement;if(e&&"HTML"===e.tagName)return e},"dir",""),fgColor:C(function(){return this.body},"text",""),linkColor:C(function(){return this.body},"link",""),vlinkColor:C(function(){return this.body},"vLink",""),alinkColor:C(function(){return this.body},"aLink",""),bgColor:C(function(){return this.body},"bgColor",""),body:{get:function(){return x(this.documentElement,"body")},set:w.nyi},head:{get:function(){return x(this.documentElement,"head")}},images:{get:w.nyi},embeds:{get:w.nyi},plugins:{get:w.nyi},links:{get:w.nyi},forms:{get:w.nyi},scripts:{get:w.nyi},innerHTML:{get:function(){return this.serialize()},set:w.nyi},outerHTML:{get:function(){return this.serialize()},set:w.nyi},write:{value:function(e){if(this.isHTML||w.InvalidStateError(),this._parser){this._parser;var t=arguments.join("");this._parser.parse(t)}}},writeln:{value:function(e){this.write(Array.prototype.join.call(arguments,"")+"\n")}},open:{value:function(){this.documentElement=null}},close:{value:function(){this.readyState="complete";var e=new c("DOMContentLoaded");this._dispatchEvent(e,!0),this.defaultView&&(e=new c("load"),this.defaultView._dispatchEvent(e,!0))}},clone:{value:function(){w.DataCloneError()}},isEqual:{value:function(e){return!0}},mutateValue:{value:function(e){this.mutationHandler&&this.mutationHandler({type:E.VALUE,target:e,data:e.data})}},mutateAttr:{value:function(e,t){this.mutationHandler&&this.mutationHandler({type:E.ATTR,target:e.ownerElement,attr:e})}},mutateRemoveAttr:{value:function(e){this.mutationHandler&&this.mutationHandler({type:E.REMOVE_ATTR,target:e.ownerElement,attr:e})}},mutateRemove:{value:function(e){this.mutationHandler&&this.mutationHandler({type:E.REMOVE,target:e.parentNode,node:e}),function e(t){!function(e){if(e.nodeType===r.ELEMENT_NODE){var t=e.getAttribute("id");t&&e.ownerDocument.delId(t,e)}e.ownerDocument._nodes[e._nid]=void 0,e._nid=void 0}(t);for(var n=0,i=t.childNodes.length;n<i;n++)e(t.childNodes[n])}(e)}},mutateInsert:{value:function(e){!function e(t){!function(e){if(e._nid=e.ownerDocument._nextnid++,e.ownerDocument._nodes[e._nid]=e,e.nodeType===r.ELEMENT_NODE){var t=e.getAttribute("id");t&&e.ownerDocument.addId(t,e),e._roothook&&e._roothook()}}(t);if(t.nodeType===r.ELEMENT_NODE)for(var n=t.childNodes,i=0,o=n.length;i<o;i++)e(n[i])}(e),this.mutationHandler&&this.mutationHandler({type:E.INSERT,target:e.parentNode,node:e})}},mutateMove:{value:function(e){this.mutationHandler&&this.mutationHandler({type:E.MOVE,target:e})}},addId:{value:function(e,t){var n=this.byId[e];n?(n instanceof O||(n=new O(n),this.byId[e]=n),n.add(t)):this.byId[e]=t}},delId:{value:function(e,t){var n=this.byId[e];w.assert(n),n instanceof O?(n.del(t),1===n.length&&(this.byId[e]=n.downgrade())):this.byId[e]=void 0}},_resolve:{value:function(e){return new g(this._documentBaseURL).resolve(e)}},_documentBaseURL:{get:function(){var e=this._address;"about:blank"===e&&(e="/");var t=this.querySelector("base[href]");return t?new g(e).resolve(t.getAttribute("href")):e}},_templateDoc:{get:function(){if(!this._templateDocCache){var e=new N(this.isHTML,this._address);this._templateDocCache=e._templateDocCache=e}return this._templateDocCache}},querySelector:{value:function(e){return m(e,this)[0]}},querySelectorAll:{value:function(e){var t=m(e,this);return t.item?t:new i(t)}}});function x(e,t){if(e&&e.isHTML)for(var n=e.childNodes,i=0,o=n.length;i<o;i++)if(n[i].nodeType===r.ELEMENT_NODE&&n[i].localName===t&&n[i].namespaceURI===T.HTML)return n[i];return null}function O(e){this.nodes=Object.create(null),this.nodes[e._nid]=e,this.length=1,this.firstNode=void 0}["abort","canplay","canplaythrough","change","click","contextmenu","cuechange","dblclick","drag","dragend","dragenter","dragleave","dragover","dragstart","drop","durationchange","emptied","ended","input","invalid","keydown","keypress","keyup","loadeddata","loadedmetadata","loadstart","mousedown","mousemove","mouseout","mouseover","mouseup","mousewheel","pause","play","playing","progress","ratechange","readystatechange","reset","seeked","seeking","select","show","stalled","submit","suspend","timeupdate","volumechange","waiting","blur","error","focus","load","scroll"].forEach(function(e){Object.defineProperty(N.prototype,"on"+e,{get:function(){return this._getEventHandler(e)},set:function(t){this._setEventHandler(e,t)}})}),O.prototype.add=function(e){this.nodes[e._nid]||(this.nodes[e._nid]=e,this.length++,this.firstNode=void 0)},O.prototype.del=function(e){this.nodes[e._nid]&&(delete this.nodes[e._nid],this.length--,this.firstNode=void 0)},O.prototype.getFirst=function(){var e;if(!this.firstNode)for(e in this.nodes)(void 0===this.firstNode||this.firstNode.compareDocumentPosition(this.nodes[e])&r.DOCUMENT_POSITION_PRECEDING)&&(this.firstNode=this.nodes[e]);return this.firstNode},O.prototype.downgrade=function(){var e;if(1===this.length)for(e in this.nodes)return this.nodes[e];return this}},function(e,t,n){e.exports=n(1)(82)},function(e,t,n){e.exports=n(1)(37)},function(e,t,n){e.exports=n(1)(62)},function(e,t,n){"use strict";var r=n(8),i=n(31),o=n(2),a=n(18),s=t.elements={},c=Object.create(null);function l(e){return i(e,u,s,c)}t.createElement=function(e,t,n){return new(c[t]||u)(e,t,n)};var u=l({superclass:r,ctor:function(e,t,n){r.call(this,e,t,o.NAMESPACE.SVG,n)},props:{style:{get:function(){return this._style||(this._style=new a(this)),this._style}}}});l({ctor:function(e,t,n){u.call(this,e,t,n)},tag:"svg",props:{createSVGRect:{value:function(){return t.createElement(this.ownerDocument,"rect",null)}}}}),l({tags:["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hkern","image","line","linearGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"]})},function(e,t,n){"use strict";var r=n(2);t=e.exports={CSSStyleDeclaration:n(18),CharacterData:n(12),Comment:n(37),DOMException:n(44),DOMImplementation:n(14),DOMTokenList:n(41),Document:n(24),DocumentFragment:n(36),DocumentType:n(16),Element:n(8),HTMLParser:n(15),Node:n(3),NodeList:n(13),NodeFilter:n(11),ProcessingInstruction:n(35),Text:n(39),Window:n(17)},r.merge(t,n(33)),r.merge(t,n(19).elements),r.merge(t,n(28).elements)},function(module,exports){module.exports={Window_run:function _run(code,file){with(file&&(code+="\n//@ sourceURL="+file),this)eval(code)},EventHandlerBuilder_build:function build(){try{with(this.document.defaultView||Object.create(null))with(this.document)with(this.form)with(this.element)return eval("(function(event){"+this.body+"})")}catch(err){return function(){throw err}}}}},function(e,t,n){"use strict";var r=n(42),i=n(30);function o(e,t,n,r){this.body=e,this.document=t,this.form=n,this.element=r}function a(e,t,n,r){var i=e.ownerDocument||Object.create(null),a=e.form||Object.create(null);e[t]=new o(r,i,a,e).build()}e.exports=function(e,t,n,i){var o=e.ctor;if(o){var s=e.props||{};if(e.attributes)for(var c in e.attributes){var l=e.attributes[c];("object"!=typeof l||Array.isArray(l))&&(l={type:l}),l.name||(l.name=c.toLowerCase()),s[c]=r.property(l)}s.constructor={value:o},o.prototype=Object.create((e.superclass||t).prototype,s),e.events&&function(e,t){var n=e.prototype;t.forEach(function(t){Object.defineProperty(n,"on"+t,{get:function(){return this._getEventHandler(t)},set:function(e){this._setEventHandler(t,e)}}),r.registerChangeHandler(e,"on"+t,a)})}(o,e.events),n[o.name]=o}else o=t;return(e.tags||e.tag&&[e.tag]||[]).forEach(function(e){i[e]=o}),o},o.prototype.build=i.EventHandlerBuilder_build},function(e,t,n){"use strict";var r=n(20);function i(){}e.exports=i,i.prototype={constructor:i,get protocol(){var e=new r(this.href);return e.isAbsolute()?e.scheme+":":""},get host(){var e=new r(this.href);return e.isAbsolute()&&e.isAuthorityBased()?e.host+(e.port?":"+e.port:""):""},get hostname(){var e=new r(this.href);return e.isAbsolute()&&e.isAuthorityBased()?e.host:""},get port(){var e=new r(this.href);return e.isAbsolute()&&e.isAuthorityBased()&&void 0!==e.port?e.port:""},get pathname(){var e=new r(this.href);return e.isAbsolute()&&e.isHierarchical()?e.path:""},get search(){var e=new r(this.href);return e.isAbsolute()&&e.isHierarchical()&&void 0!==e.query?"?"+e.query:""},get hash(){var e=new r(this.href);return e.isAbsolute()&&void 0!==e.fragment?"#"+e.fragment:""},get username(){return new r(this.href).username||""},get password(){return new r(this.href).password||""},get origin(){var e=new r(this.href),t=function(t){var n=[e.scheme,e.host,+e.port||t];return n[0]+"://"+n[1]+(n[2]===t?"":":"+n[2])};switch(e.scheme){case"ftp":return t(21);case"gopher":return t(70);case"http":case"ws":return t(80);case"https":case"wss":return t(443);default:return e.scheme+"://"}},set protocol(e){var t=this.href,n=new r(t);n.isAbsolute()&&(e=(e=e.replace(/:+$/,"")).replace(/[^-+\.a-zA-Z0-9]/g,r.percentEncode)).length>0&&(n.scheme=e,t=n.toString()),this.href=t},set host(e){var t=this.href,n=new r(t);n.isAbsolute()&&n.isAuthorityBased()&&(e=e.replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g,r.percentEncode)).length>0&&(n.host=e,delete n.port,t=n.toString()),this.href=t},set hostname(e){var t=this.href,n=new r(t);n.isAbsolute()&&n.isAuthorityBased()&&(e=(e=e.replace(/^\/+/,"")).replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g,r.percentEncode)).length>0&&(n.host=e,t=n.toString()),this.href=t},set port(e){var t=this.href,n=new r(t);n.isAbsolute()&&n.isAuthorityBased()&&(0===(e=(e=(e=""+e).replace(/[^0-9].*$/,"")).replace(/^0+/,"")).length&&(e="0"),parseInt(e,10)<=65535&&(n.port=e,t=n.toString())),this.href=t},set pathname(e){var t=this.href,n=new r(t);n.isAbsolute()&&n.isHierarchical()&&("/"!==e.charAt(0)&&(e="/"+e),e=e.replace(/[^-+\._~!$&'()*,;:=@\/a-zA-Z0-9]/g,r.percentEncode),n.path=e,t=n.toString()),this.href=t},set search(e){var t=this.href,n=new r(t);n.isAbsolute()&&n.isHierarchical()&&("?"===e.charAt(0)&&(e=e.substring(1)),e=e.replace(/[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g,r.percentEncode),n.query=e,t=n.toString()),this.href=t},set hash(e){var t=this.href,n=new r(t);n.isAbsolute()&&("#"===e.charAt(0)&&(e=e.substring(1)),e=e.replace(/[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g,r.percentEncode),n.fragment=e,t=n.toString()),this.href=t},set username(e){var t=this.href,n=new r(t);n.isAbsolute()&&(e=e.replace(/[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\:]/g,r.percentEncode),n.username=e,t=n.toString()),this.href=t},set password(e){var t=this.href,n=new r(t);n.isAbsolute()&&(""===e?n.password=null:(e=e.replace(/[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\]/g,r.percentEncode),n.password=e),t=n.toString()),this.href=t}},i._inherit=function(e){Object.getOwnPropertyNames(i.prototype).forEach(function(t){if("constructor"!==t&&"href"!==t){var n=Object.getOwnPropertyDescriptor(i.prototype,t);Object.defineProperty(e,t,n)}})}},function(e,t,n){"use strict";e.exports={Event:n(9),UIEvent:n(45),MouseEvent:n(46),CustomEvent:n(99)}},function(e,t,n){"use strict";e.exports={nextSkippingChildren:function(e,t){if(e===t)return null;if(null!==e.nextSibling)return e.nextSibling;return r(e,t)},nextAncestorSibling:r,next:function(e,t){var n;if(null!==(n=e.firstChild))return n;if(e===t)return null;if(null!==(n=e.nextSibling))return n;return r(e,t)},previous:function(e,t){var n;if(null!==(n=e.previousSibling))return i(n);if((n=e.parentNode)===t)return null;return n},deepLastChild:i};function r(e,t){for(e=e.parentNode;null!==e;e=e.parentNode){if(e===t)return null;if(null!==e.nextSibling)return e.nextSibling}return null}function i(e){for(;e.lastChild;)e=e.lastChild;return e}},function(e,t,n){"use strict";e.exports=o;var r=n(3),i=n(12);function o(e,t,n){this.nodeType=r.PROCESSING_INSTRUCTION_NODE,this.ownerDocument=e,this.target=t,this._data=n}var a={get:function(){return this._data},set:function(e){this._data=e,this.rooted&&this.ownerDocument.mutateValue(this)}};o.prototype=Object.create(i.prototype,{nodeName:{get:function(){return this.target}},nodeValue:a,textContent:a,data:a,clone:{value:function(){return new o(this.ownerDocument,this.target,this._data)}},isEqual:{value:function(e){return this.target===e.target&&this._data===e._data}}})},function(e,t,n){"use strict";e.exports=c;var r=n(3),i=n(13),o=n(8),a=n(22),s=n(2);function c(e){this.nodeType=r.DOCUMENT_FRAGMENT_NODE,this.ownerDocument=e,this.childNodes=[]}c.prototype=Object.create(r.prototype,{nodeName:{value:"#document-fragment"},nodeValue:{get:function(){return null},set:function(){}},textContent:Object.getOwnPropertyDescriptor(o.prototype,"textContent"),querySelector:{value:function(e){var t=this.querySelectorAll(e);return t.length?t[0]:null}},querySelectorAll:{value:function(e){var t=Object.create(this);t.isHTML=!0,t.getElementsByTagName=o.prototype.getElementsByTagName,t.nextElement=Object.getOwnPropertyDescriptor(o.prototype,"firstElementChild").get;var n=a(e,t);return n.item?n:new i(n)}},clone:{value:function(){return new c(this.ownerDocument)}},isEqual:{value:function(e){return!0}},innerHTML:{get:function(){return this.serialize()},set:s.nyi},outerHTML:{get:function(){return this.serialize()},set:s.nyi}})},function(e,t,n){"use strict";e.exports=o;var r=n(3),i=n(12);function o(e,t){this.nodeType=r.COMMENT_NODE,this.ownerDocument=e,this._data=t,this._index=void 0}var a={get:function(){return this._data},set:function(e){this._data=e,this.rooted&&this.ownerDocument.mutateValue(this)}};o.prototype=Object.create(i.prototype,{nodeName:{value:"#comment"},nodeValue:a,textContent:a,data:a,clone:{value:function(){return new o(this.ownerDocument,this._data)}}})},function(e,t,n){"use strict";e.exports=s;var r=n(3),i=n(2),o=i.HierarchyRequestError,a=i.NotFoundError;function s(){}s.prototype=Object.create(r.prototype,{hasChildNodes:{value:function(){return!1}},firstChild:{value:null},lastChild:{value:null},insertBefore:{value:function(e,t){if(!e.nodeType)throw new TypeError("not a node");o()}},replaceChild:{value:function(e,t){if(!e.nodeType)throw new TypeError("not a node");o()}},removeChild:{value:function(e){if(!e.nodeType)throw new TypeError("not a node");a()}},childNodes:{get:function(){return this._childNodes||(this._childNodes=[]),this._childNodes}}})},function(e,t,n){"use strict";e.exports=a;var r=n(2),i=n(3),o=n(12);function a(e,t){this.nodeType=i.TEXT_NODE,this.ownerDocument=e,this._data=t,this._index=void 0}var s={get:function(){return this._data},set:function(e){e!==this._data&&(this._data=e,this.rooted&&this.ownerDocument.mutateValue(this),this.parentNode&&this.parentNode._textchangehook&&this.parentNode._textchangehook(this))}};a.prototype=Object.create(o.prototype,{nodeName:{value:"#text"},nodeValue:s,textContent:s,data:s,splitText:{value:function(e){(e>this._data.length||e<0)&&r.IndexSizeError();var t=this._data.substring(e),n=this.ownerDocument.createTextNode(t);this.data=this.data.substring(0,e);var i=this.parentNode;return null!==i&&i.insertBefore(n,this.nextSibling),n}},wholeText:{get:r.nyi},replaceWholeText:{value:r.nyi},clone:{value:function(){return new a(this.ownerDocument,this._data)}}})},function(e,t,n){"use strict";var r=n(3),i={nextElementSibling:{get:function(){if(this.parentNode)for(var e=this.parentNode.childNodes,t=this.index+1,n=e.length;t<n;t++)if(e[t].nodeType===r.ELEMENT_NODE)return e[t];return null}},previousElementSibling:{get:function(){if(this.parentNode)for(var e=this.parentNode.childNodes,t=this.index-1;t>=0;t--)if(e[t].nodeType===r.ELEMENT_NODE)return e[t];return null}}};e.exports=i},function(e,t,n){"use strict";var r=n(2);function i(e,t){this._getString=e,this._setString=t,o(this,s(this))}function o(e,t){e.length=t.length;for(var n=0;n<t.length;n++)e[n]=t[n]}function a(e){""!==e&&void 0!==e||r.SyntaxError(),e.indexOf(" ")>-1&&r.InvalidCharacterError()}function s(e){var t=e._getString();return""===t?[]:t.split(" ")}e.exports=i,i.prototype={item:function(e){return e>=this.length?null:this._getString().split(" ")[e]},contains:function(e){return a(e=String(e)),s(this).indexOf(e)>-1},add:function(e){a(e);var t=s(this);t.indexOf(e)>-1||(t.push(e),this._setString(t.join(" ").trim()),o(this,t))},remove:function(e){a(e);var t=s(this),n=t.indexOf(e);n>-1&&(t.splice(n,1),this._setString(t.join(" ").trim())),o(this,t)},toggle:function(e){return this.contains(e)?(this.remove(e),!1):(this.add(e),!0)},toString:function(){return this._getString()}}},function(e,t,n){"use strict";var r=n(2);t.property=function(e){if(Array.isArray(e.type)){var t=Object.create(null);e.type.forEach(function(e){t[e.value||e]=e.alias||e});var n=e.missing;void 0===n&&(n=null);var i=e.invalid;return void 0===i&&(i=n),{get:function(){var r=this._getattr(e.name);return null===r?n:void 0!==(r=t[r.toLowerCase()])?r:null!==i?i:r},set:function(t){this._setattr(e.name,t)}}}if(e.type===Boolean)return{get:function(){return this.hasAttribute(e.name)},set:function(t){t?this._setattr(e.name,""):this.removeAttribute(e.name)}};if(e.type===Number||"long"===e.type||"unsigned long"===e.type||"limited unsigned long with fallback"===e.type)return function(e){var t;t="function"==typeof e.default?e.default:"number"==typeof e.default?function(){return e.default}:function(){r.assert(!1,typeof e.default)};var n="unsigned long"===e.type,i="long"===e.type,o="limited unsigned long with fallback"===e.type,a=e.min,s=e.max,c=e.setmin;void 0===a&&(n&&(a=0),i&&(a=-2147483648),o&&(a=1));void 0===s&&(n||i||o)&&(s=2147483647);return{get:function(){var r=this._getattr(e.name),c=e.float?parseFloat(r):parseInt(r,10);if(null===r||!isFinite(c)||void 0!==a&&c<a||void 0!==s&&c>s)return t.call(this);if(n||i||o){if(!/^[ \t\n\f\r]*[-+]?[0-9]/.test(r))return t.call(this);c|=0}return c},set:function(a){e.float||(a=Math.floor(a)),void 0!==c&&a<c&&r.IndexSizeError(e.name+" set to "+a),n?a=a<0||a>2147483647?t.call(this):0|a:o?a=a<1||a>2147483647?t.call(this):0|a:i&&(a=a<-2147483648||a>2147483647?t.call(this):0|a),this._setattr(e.name,String(a))}}}(e);if(!e.type||e.type===String)return{get:function(){return this._getattr(e.name)||""},set:function(t){e.treatNullAsEmptyString&&null===t&&(t=""),this._setattr(e.name,t)}};if("function"==typeof e.type)return e.type(e.name,e);throw new Error("Invalid attribute definition")},t.registerChangeHandler=function(e,t,n){var r=e.prototype;Object.prototype.hasOwnProperty.call(r,"_attributeChangeHandlers")||(r._attributeChangeHandlers=Object.create(r._attributeChangeHandlers||null)),r._attributeChangeHandlers[t]=n}},function(e,t){t.isApiWritable=!global.__domino_frozen__},function(e,t,n){"use strict";e.exports=a;var r=[null,"INDEX_SIZE_ERR",null,"HIERARCHY_REQUEST_ERR","WRONG_DOCUMENT_ERR","INVALID_CHARACTER_ERR",null,"NO_MODIFICATION_ALLOWED_ERR","NOT_FOUND_ERR","NOT_SUPPORTED_ERR",null,"INVALID_STATE_ERR","SYNTAX_ERR","INVALID_MODIFICATION_ERR","NAMESPACE_ERR","INVALID_ACCESS_ERR",null,"TYPE_MISMATCH_ERR","SECURITY_ERR","NETWORK_ERR","ABORT_ERR","URL_MISMATCH_ERR","QUOTA_EXCEEDED_ERR","TIMEOUT_ERR","INVALID_NODE_TYPE_ERR","DATA_CLONE_ERR"],i=[null,"INDEX_SIZE_ERR (1): the index is not in the allowed range",null,"HIERARCHY_REQUEST_ERR (3): the operation would yield an incorrect nodes model","WRONG_DOCUMENT_ERR (4): the object is in the wrong Document, a call to importNode is required","INVALID_CHARACTER_ERR (5): the string contains invalid characters",null,"NO_MODIFICATION_ALLOWED_ERR (7): the object can not be modified","NOT_FOUND_ERR (8): the object can not be found here","NOT_SUPPORTED_ERR (9): this operation is not supported",null,"INVALID_STATE_ERR (11): the object is in an invalid state","SYNTAX_ERR (12): the string did not match the expected pattern","INVALID_MODIFICATION_ERR (13): the object can not be modified in this way","NAMESPACE_ERR (14): the operation is not allowed by Namespaces in XML","INVALID_ACCESS_ERR (15): the object does not support the operation or argument",null,"TYPE_MISMATCH_ERR (17): the type of the object does not match the expected type","SECURITY_ERR (18): the operation is insecure","NETWORK_ERR (19): a network error occurred","ABORT_ERR (20): the user aborted an operation","URL_MISMATCH_ERR (21): the given URL does not match another URL","QUOTA_EXCEEDED_ERR (22): the quota has been exceeded","TIMEOUT_ERR (23): a timeout occurred","INVALID_NODE_TYPE_ERR (24): the supplied node is invalid or has an invalid ancestor for this operation","DATA_CLONE_ERR (25): the object can not be cloned."],o={INDEX_SIZE_ERR:1,DOMSTRING_SIZE_ERR:2,HIERARCHY_REQUEST_ERR:3,WRONG_DOCUMENT_ERR:4,INVALID_CHARACTER_ERR:5,NO_DATA_ALLOWED_ERR:6,NO_MODIFICATION_ALLOWED_ERR:7,NOT_FOUND_ERR:8,NOT_SUPPORTED_ERR:9,INUSE_ATTRIBUTE_ERR:10,INVALID_STATE_ERR:11,SYNTAX_ERR:12,INVALID_MODIFICATION_ERR:13,NAMESPACE_ERR:14,INVALID_ACCESS_ERR:15,VALIDATION_ERR:16,TYPE_MISMATCH_ERR:17,SECURITY_ERR:18,NETWORK_ERR:19,ABORT_ERR:20,URL_MISMATCH_ERR:21,QUOTA_EXCEEDED_ERR:22,TIMEOUT_ERR:23,INVALID_NODE_TYPE_ERR:24,DATA_CLONE_ERR:25};function a(e){Error.call(this),Error.captureStackTrace(this,this.constructor),this.code=e,this.message=i[e],this.name=r[e]}for(var s in a.prototype.__proto__=Error.prototype,o){var c={value:o[s]};Object.defineProperty(a,s,c),Object.defineProperty(a.prototype,s,c)}},function(e,t,n){"use strict";var r=n(9);function i(){r.call(this),this.view=null,this.detail=0}e.exports=i,i.prototype=Object.create(r.prototype,{constructor:{value:i},initUIEvent:{value:function(e,t,n,r,i){this.initEvent(e,t,n),this.view=r,this.detail=i}}})},function(e,t,n){"use strict";var r=n(45);function i(){r.call(this),this.screenX=this.screenY=this.clientX=this.clientY=0,this.ctrlKey=this.altKey=this.shiftKey=this.metaKey=!1,this.button=0,this.buttons=1,this.relatedTarget=null}e.exports=i,i.prototype=Object.create(r.prototype,{constructor:{value:i},initMouseEvent:{value:function(e,t,n,r,i,o,a,s,c,l,u,p,h,d,f){switch(this.initEvent(e,t,n,r,i),this.screenX=o,this.screenY=a,this.clientX=s,this.clientY=c,this.ctrlKey=l,this.altKey=u,this.shiftKey=p,this.metaKey=h,this.button=d,d){case 0:this.buttons=1;break;case 1:this.buttons=4;break;case 2:this.buttons=2;break;default:this.buttons=0}this.relatedTarget=f}},getModifierState:{value:function(e){switch(e){case"Alt":return this.altKey;case"Control":return this.ctrlKey;case"Shift":return this.shiftKey;case"Meta":return this.metaKey;default:return!1}}}})},function(e,t,n){"use strict";var r=n(9),i=n(46),o=n(2);function a(){}e.exports=a,a.prototype={addEventListener:function(e,t,n){if(t){void 0===n&&(n=!1),this._listeners||(this._listeners=Object.create(null)),this._listeners[e]||(this._listeners[e]=[]);for(var r=this._listeners[e],i=0,o=r.length;i<o;i++){var a=r[i];if(a.listener===t&&a.capture===n)return}var s={listener:t,capture:n};"function"==typeof t&&(s.f=t),r.push(s)}},removeEventListener:function(e,t,n){if(void 0===n&&(n=!1),this._listeners){var r=this._listeners[e];if(r)for(var i=0,o=r.length;i<o;i++){var a=r[i];if(a.listener===t&&a.capture===n)return void(1===r.length?this._listeners[e]=void 0:r.splice(i,1))}}},dispatchEvent:function(e){return this._dispatchEvent(e,!1)},_dispatchEvent:function(e,t){function n(e,t){var n=t.type,i=t.eventPhase;if(t.currentTarget=e,i!==r.CAPTURING_PHASE&&e._handlers&&e._handlers[n]){var o,a=e._handlers[n];if("function"==typeof a)o=a.call(t.currentTarget,t);else{var s=a.handleEvent;if("function"!=typeof s)throw new TypeError("handleEvent property of event handler object isnot a function.");o=s.call(a,t)}switch(t.type){case"mouseover":!0===o&&t.preventDefault();break;case"beforeunload":default:!1===o&&t.preventDefault()}}var c=e._listeners&&e._listeners[n];if(c)for(var l=0,u=(c=c.slice()).length;l<u;l++){if(t._immediatePropagationStopped)return;var p=c[l];if(!(i===r.CAPTURING_PHASE&&!p.capture||i===r.BUBBLING_PHASE&&p.capture))if(p.f)p.f.call(t.currentTarget,t);else{var h=p.listener.handleEvent;if("function"!=typeof h)throw new TypeError("handleEvent property of event listener object is not a function.");h.call(p.listener,t)}}}"boolean"!=typeof t&&(t=!1),e._initialized&&!e._dispatching||o.InvalidStateError(),e.isTrusted=t,e._dispatching=!0,e.target=this;for(var a=[],s=this.parentNode;s;s=s.parentNode)a.push(s);e.eventPhase=r.CAPTURING_PHASE;for(var c=a.length-1;c>=0&&(n(a[c],e),!e._propagationStopped);c--);if(e._propagationStopped||(e.eventPhase=r.AT_TARGET,n(this,e)),e.bubbles&&!e._propagationStopped){e.eventPhase=r.BUBBLING_PHASE;for(var l=0,u=a.length;l<u&&(n(a[l],e),!e._propagationStopped);l++);}if(e._dispatching=!1,e.eventPhase=r.AT_TARGET,e.currentTarget=null,t&&!e.defaultPrevented&&e instanceof i)switch(e.type){case"mousedown":this._armed={x:e.clientX,y:e.clientY,t:e.timeStamp};break;case"mouseout":case"mouseover":this._armed=null;break;case"mouseup":this._isClick(e)&&this._doClick(e),this._armed=null}return!e.defaultPrevented},_isClick:function(e){return null!==this._armed&&"mouseup"===e.type&&e.isTrusted&&0===e.button&&e.timeStamp-this._armed.t<1e3&&Math.abs(e.clientX-this._armed.x)<10&&Math.abs(e.clientY-this._armed.Y)<10},_doClick:function(e){if(!this._click_in_progress){this._click_in_progress=!0;for(var t=this;t&&!t._post_click_activation_steps;)t=t.parentNode;t&&t._pre_click_activation_steps&&t._pre_click_activation_steps();var n=this.ownerDocument.createEvent("MouseEvent");n.initMouseEvent("click",!0,!0,this.ownerDocument.defaultView,1,e.screenX,e.screenY,e.clientX,e.clientY,e.ctrlKey,e.altKey,e.shiftKey,e.metaKey,e.button,null);var r=this._dispatchEvent(n,!0);t&&(r?t._post_click_activation_steps&&t._post_click_activation_steps(n):t._cancelled_activation_steps&&t._cancelled_activation_steps())}},_setEventHandler:function(e,t){this._handlers||(this._handlers=Object.create(null)),this._handlers[e]=t},_getEventHandler:function(e){return this._handlers&&this._handlers[e]||null}}},function(e,t){e.exports=require("url")},function(e,t,n){e.exports=n(1)(6)},function(e,t,n){e.exports=n(1)(26)},function(e,t,n){e.exports=n(1)(36)},function(e,t,n){
/**
 * @license Angular v5.2.9
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
!function(e,t){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function r(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e};
/**
 * @license Angular v5.2.9
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */function o(e){switch(e.length){case 0:return new t.NoopAnimationPlayer;case 1:return e[0];default:return new t.ɵAnimationGroupPlayer(e)}}function a(e,n,r,i,o,a){void 0===o&&(o={}),void 0===a&&(a={});var s=[],c=[],l=-1,u=null;if(i.forEach(function(e){var r=e.offset,i=r==l,p=i&&u||{};Object.keys(e).forEach(function(r){var i=r,c=e[r];if("offset"!==r)switch(i=n.normalizePropertyName(i,s),c){case t.ɵPRE_STYLE:c=o[r];break;case t.AUTO_STYLE:c=a[r];break;default:c=n.normalizeStyleValue(r,i,c,s)}p[i]=c}),i||c.push(p),u=p,l=r}),s.length)throw new Error("Unable to animate due to the following errors:\n - "+s.join("\n - "));return c}function s(e,t,n,r){switch(t){case"start":e.onStart(function(){return r(n&&c(n,"start",e.totalTime))});break;case"done":e.onDone(function(){return r(n&&c(n,"done",e.totalTime))});break;case"destroy":e.onDestroy(function(){return r(n&&c(n,"destroy",e.totalTime))})}}function c(e,t,n){var r=l(e.element,e.triggerName,e.fromState,e.toState,t||e.phaseName,void 0==n?e.totalTime:n),i=e._data;return null!=i&&(r._data=i),r}function l(e,t,n,r,i,o){return void 0===i&&(i=""),void 0===o&&(o=0),{element:e,triggerName:t,fromState:n,toState:r,phaseName:i,totalTime:o}}function u(e,t,n){var r;return e instanceof Map?(r=e.get(t))||e.set(t,r=n):(r=e[t])||(r=e[t]=n),r}function p(e){var t=e.indexOf(":"),n=e.substring(1,t),r=e.substr(t+1);return[n,r]}var h=function(e,t){return!1},d=function(e,t){return!1},f=function(e,t,n){return[]};if("undefined"!=typeof Element){if(h=function(e,t){return e.contains(t)},Element.prototype.matches)d=function(e,t){return e.matches(t)};else{var g=Element.prototype,m=g.matchesSelector||g.mozMatchesSelector||g.msMatchesSelector||g.oMatchesSelector||g.webkitMatchesSelector;m&&(d=function(e,t){return m.apply(e,[t])})}f=function(e,t,n){var r=[];if(n)r.push.apply(r,e.querySelectorAll(t));else{var i=e.querySelector(t);i&&r.push(i)}return r}}var y=null,b=!1;function v(e){y||(y=_()||{},b=!!y.style&&"WebkitAppearance"in y.style);var t=!0;if(y.style&&!function(e){return"ebkit"==e.substring(1,6)}(e)&&!(t=e in y.style)&&b){var n="Webkit"+e.charAt(0).toUpperCase()+e.substr(1);t=n in y.style}return t}function _(){return"undefined"!=typeof document?document.body:null}var w=d,E=h,T=f,k=function(){function e(){}return e.prototype.validateStyleProperty=function(e){return v(e)},e.prototype.matchesElement=function(e,t){return w(e,t)},e.prototype.containsElement=function(e,t){return E(e,t)},e.prototype.query=function(e,t,n){return T(e,t,n)},e.prototype.computeStyle=function(e,t,n){return n||""},e.prototype.animate=function(e,n,r,i,o,a){return void 0===a&&(a=[]),new t.NoopAnimationPlayer},e}(),N=function(){function e(){}return e.NOOP=new k,e}(),S=1e3,R=".ng-trigger",C=".ng-animating";function x(e){if("number"==typeof e)return e;var t=e.match(/^(-?[\.\d]+)(m?s)/);return!t||t.length<2?0:O(parseFloat(t[1]),t[2])}function O(e,t){switch(t){case"s":return e*S;default:return e}}function D(e,t,n){return e.hasOwnProperty("duration")?e:function(e,t,n){var r,i=0,o="";if("string"==typeof e){var a=e.match(/^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i);if(null===a)return t.push('The provided timing value "'+e+'" is invalid.'),{duration:0,delay:0,easing:""};r=O(parseFloat(a[1]),a[2]);var s=a[3];null!=s&&(i=O(Math.floor(parseFloat(s)),a[4]));var c=a[5];c&&(o=c)}else r=e;if(!n){var l=!1,u=t.length;r<0&&(t.push("Duration values below 0 are not allowed for this animation step."),l=!0),i<0&&(t.push("Delay values below 0 are not allowed for this animation step."),l=!0),l&&t.splice(u,0,'The provided timing value "'+e+'" is invalid.')}return{duration:r,delay:i,easing:o}}(e,t,n)}function A(e,t){return void 0===t&&(t={}),Object.keys(e).forEach(function(n){t[n]=e[n]}),t}function M(e){var t={};return Array.isArray(e)?e.forEach(function(e){return I(e,!1,t)}):I(e,!1,t),t}function I(e,t,n){if(void 0===n&&(n={}),t)for(var r in e)n[r]=e[r];else A(e,n);return n}function P(e,t){e.style&&Object.keys(t).forEach(function(n){var r=V(n);e.style[r]=t[n]})}function L(e,t){e.style&&Object.keys(t).forEach(function(t){var n=V(t);e.style[n]=""})}function j(e){return Array.isArray(e)?1==e.length?e[0]:t.sequence(e):e}var B=new RegExp("{{\\s*(.+?)\\s*}}","g");function H(e){var t=[];if("string"==typeof e){for(var n=e.toString(),r=void 0;r=B.exec(n);)t.push(r[1]);B.lastIndex=0}return t}function q(e,t,n){var r=e.toString(),i=r.replace(B,function(e,r){var i=t[r];return t.hasOwnProperty(r)||(n.push("Please provide a value for the animation param "+r),i=""),i.toString()});return i==r?e:i}function F(e){for(var t=[],n=e.next();!n.done;)t.push(n.value),n=e.next();return t}var U=/-+([a-z0-9])/g;function V(e){return e.replace(U,function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e[1].toUpperCase()})}function z(e,t,n){switch(t.type){case 7:return e.visitTrigger(t,n);case 0:return e.visitState(t,n);case 1:return e.visitTransition(t,n);case 2:return e.visitSequence(t,n);case 3:return e.visitGroup(t,n);case 4:return e.visitAnimate(t,n);case 5:return e.visitKeyframes(t,n);case 6:return e.visitStyle(t,n);case 8:return e.visitReference(t,n);case 9:return e.visitAnimateChild(t,n);case 10:return e.visitAnimateRef(t,n);case 11:return e.visitQuery(t,n);case 12:return e.visitStagger(t,n);default:throw new Error("Unable to resolve animation metadata node #"+t.type)}}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var W="*";function G(e,t){var n=[];return"string"==typeof e?e.split(/\s*,\s*/).forEach(function(e){return function(e,t,n){if(":"==e[0]){var r=function(e,t){switch(e){case":enter":return"void => *";case":leave":return"* => void";case":increment":return function(e,t){return parseFloat(t)>parseFloat(e)};case":decrement":return function(e,t){return parseFloat(t)<parseFloat(e)};default:return t.push('The transition alias value "'+e+'" is not supported'),"* => *"}}(e,n);if("function"==typeof r)return void t.push(r);e=r}var i=e.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);if(null==i||i.length<4)return n.push('The provided transition expression "'+e+'" is not supported'),t;var o=i[1],a=i[2],s=i[3];t.push($(o,s));var c=o==W&&s==W;"<"!=a[0]||c||t.push($(s,o))}(e,n,t)}):n.push(e),n}var Y=new Set(["true","1"]),K=new Set(["false","0"]);function $(e,t){var n=Y.has(e)||K.has(e),r=Y.has(t)||K.has(t);return function(i,o){var a=e==W||e==i,s=t==W||t==o;return!a&&n&&"boolean"==typeof i&&(a=i?Y.has(e):K.has(e)),!s&&r&&"boolean"==typeof o&&(s=o?Y.has(t):K.has(t)),a&&s}}var Q=":self",X=new RegExp("s*"+Q+"s*,?","g");function Z(e,t,n){return new J(e).build(t,n)}var J=function(){function e(e){this._driver=e}return e.prototype.build=function(e,t){var n=new ee(t);return this._resetContextStyleTimingState(n),z(this,j(e),n)},e.prototype._resetContextStyleTimingState=function(e){e.currentQuerySelector="",e.collectedStyles={},e.collectedStyles[""]={},e.currentTime=0},e.prototype.visitTrigger=function(e,t){var n=this,r=t.queryCount=0,i=t.depCount=0,o=[],a=[];return"@"==e.name.charAt(0)&&t.errors.push("animation triggers cannot be prefixed with an `@` sign (e.g. trigger('@foo', [...]))"),e.definitions.forEach(function(e){if(n._resetContextStyleTimingState(t),0==e.type){var s=e,c=s.name;c.split(/\s*,\s*/).forEach(function(e){s.name=e,o.push(n.visitState(s,t))}),s.name=c}else if(1==e.type){var l=n.visitTransition(e,t);r+=l.queryCount,i+=l.depCount,a.push(l)}else t.errors.push("only state() and transition() definitions can sit inside of a trigger()")}),{type:7,name:e.name,states:o,transitions:a,queryCount:r,depCount:i,options:null}},e.prototype.visitState=function(e,t){var n=this.visitStyle(e.styles,t),r=e.options&&e.options.params||null;if(n.containsDynamicStyles){var i=new Set,o=r||{};if(n.styles.forEach(function(e){if(te(e)){var t=e;Object.keys(t).forEach(function(e){H(t[e]).forEach(function(e){o.hasOwnProperty(e)||i.add(e)})})}}),i.size){var a=F(i.values());t.errors.push('state("'+e.name+'", ...) must define default values for all the following style substitutions: '+a.join(", "))}}return{type:0,name:e.name,style:n,options:r?{params:r}:null}},e.prototype.visitTransition=function(e,t){t.queryCount=0,t.depCount=0;var n=z(this,j(e.animation),t),r=G(e.expr,t.errors);return{type:1,matchers:r,animation:n,queryCount:t.queryCount,depCount:t.depCount,options:ne(e.options)}},e.prototype.visitSequence=function(e,t){var n=this;return{type:2,steps:e.steps.map(function(e){return z(n,e,t)}),options:ne(e.options)}},e.prototype.visitGroup=function(e,t){var n=this,r=t.currentTime,i=0,o=e.steps.map(function(e){t.currentTime=r;var o=z(n,e,t);return i=Math.max(i,t.currentTime),o});return t.currentTime=i,{type:3,steps:o,options:ne(e.options)}},e.prototype.visitAnimate=function(e,n){var r,i=function(e,t){var n=null;if(e.hasOwnProperty("duration"))n=e;else if("number"==typeof e){var r=D(e,t).duration;return re(r,0,"")}var i=e;if(i.split(/\s+/).some(function(e){return"{"==e.charAt(0)&&"{"==e.charAt(1)})){var o=re(0,0,"");return o.dynamic=!0,o.strValue=i,o}return re((n=n||D(i,t)).duration,n.delay,n.easing)}(e.timings,n.errors);n.currentAnimateTimings=i;var o=e.styles?e.styles:t.style({});if(5==o.type)r=this.visitKeyframes(o,n);else{var a=e.styles,s=!1;if(!a){s=!0;var c={};i.easing&&(c.easing=i.easing),a=t.style(c)}n.currentTime+=i.duration+i.delay;var l=this.visitStyle(a,n);l.isEmptyStep=s,r=l}return n.currentAnimateTimings=null,{type:4,timings:i,style:r,options:null}},e.prototype.visitStyle=function(e,t){var n=this._makeStyleAst(e,t);return this._validateStyleAst(n,t),n},e.prototype._makeStyleAst=function(e,n){var r=[];Array.isArray(e.styles)?e.styles.forEach(function(e){"string"==typeof e?e==t.AUTO_STYLE?r.push(e):n.errors.push("The provided style string value "+e+" is not allowed."):r.push(e)}):r.push(e.styles);var i=!1,o=null;return r.forEach(function(e){if(te(e)){var t=e,n=t.easing;if(n&&(o=n,delete t.easing),!i)for(var r in t){var a=t[r];if(a.toString().indexOf("{{")>=0){i=!0;break}}}}),{type:6,styles:r,easing:o,offset:e.offset,containsDynamicStyles:i,options:null}},e.prototype._validateStyleAst=function(e,t){var n=this,r=t.currentAnimateTimings,i=t.currentTime,o=t.currentTime;r&&o>0&&(o-=r.duration+r.delay),e.styles.forEach(function(e){"string"!=typeof e&&Object.keys(e).forEach(function(r){if(n._driver.validateStyleProperty(r)){var a,s,c,l,u,p=t.collectedStyles[t.currentQuerySelector],h=p[r],d=!0;h&&(o!=i&&o>=h.startTime&&i<=h.endTime&&(t.errors.push('The CSS property "'+r+'" that exists between the times of "'+h.startTime+'ms" and "'+h.endTime+'ms" is also being animated in a parallel animation between the times of "'+o+'ms" and "'+i+'ms"'),d=!1),o=h.startTime),d&&(p[r]={startTime:o,endTime:i}),t.options&&(a=e[r],s=t.options,c=t.errors,l=s.params||{},(u=H(a)).length&&u.forEach(function(e){l.hasOwnProperty(e)||c.push("Unable to resolve the local animation param "+e+" in the given list of values")}))}else t.errors.push('The provided animation property "'+r+'" is not a supported CSS property for animations')})})},e.prototype.visitKeyframes=function(e,t){var n=this,r={type:5,styles:[],options:null};if(!t.currentAnimateTimings)return t.errors.push("keyframes() must be placed inside of a call to animate()"),r;var i=0,o=[],a=!1,s=!1,c=0,l=e.steps.map(function(e){var r=n._makeStyleAst(e,t),l=null!=r.offset?r.offset:function(e){if("string"==typeof e)return null;var t=null;if(Array.isArray(e))e.forEach(function(e){if(te(e)&&e.hasOwnProperty("offset")){var n=e;t=parseFloat(n.offset),delete n.offset}});else if(te(e)&&e.hasOwnProperty("offset")){var n=e;t=parseFloat(n.offset),delete n.offset}return t}(r.styles),u=0;return null!=l&&(i++,u=r.offset=l),s=s||u<0||u>1,a=a||u<c,c=u,o.push(u),r});s&&t.errors.push("Please ensure that all keyframe offsets are between 0 and 1"),a&&t.errors.push("Please ensure that all keyframe offsets are in order");var u=e.steps.length,p=0;i>0&&i<u?t.errors.push("Not all style() steps within the declared keyframes() contain offsets"):0==i&&(p=1/(u-1));var h=u-1,d=t.currentTime,f=t.currentAnimateTimings,g=f.duration;return l.forEach(function(e,i){var a=p>0?i==h?1:p*i:o[i],s=a*g;t.currentTime=d+f.delay+s,f.duration=s,n._validateStyleAst(e,t),e.offset=a,r.styles.push(e)}),r},e.prototype.visitReference=function(e,t){return{type:8,animation:z(this,j(e.animation),t),options:ne(e.options)}},e.prototype.visitAnimateChild=function(e,t){return t.depCount++,{type:9,options:ne(e.options)}},e.prototype.visitAnimateRef=function(e,t){return{type:10,animation:this.visitReference(e.animation,t),options:ne(e.options)}},e.prototype.visitQuery=function(e,t){var n=t.currentQuerySelector,r=e.options||{};t.queryCount++,t.currentQuery=e;var i=function(e){var t=!!e.split(/\s*,\s*/).find(function(e){return e==Q});return t&&(e=e.replace(X,"")),[e=e.replace(/@\*/g,R).replace(/@\w+/g,function(e){return R+"-"+e.substr(1)}).replace(/:animating/g,C),t]}(e.selector),o=i[0],a=i[1];t.currentQuerySelector=n.length?n+" "+o:o,u(t.collectedStyles,t.currentQuerySelector,{});var s=z(this,j(e.animation),t);return t.currentQuery=null,t.currentQuerySelector=n,{type:11,selector:o,limit:r.limit||0,optional:!!r.optional,includeSelf:a,animation:s,originalSelector:e.selector,options:ne(e.options)}},e.prototype.visitStagger=function(e,t){t.currentQuery||t.errors.push("stagger() can only be used inside of query()");var n="full"===e.timings?{duration:0,delay:0,easing:"full"}:D(e.timings,t.errors,!0);return{type:12,animation:z(this,j(e.animation),t),timings:n,options:null}},e}(),ee=function(e){this.errors=e,this.queryCount=0,this.depCount=0,this.currentTransition=null,this.currentQuery=null,this.currentQuerySelector=null,this.currentAnimateTimings=null,this.currentTime=0,this.collectedStyles={},this.options=null};function te(e){return!Array.isArray(e)&&"object"==typeof e}function ne(e){var t;return e?(e=A(e)).params&&(e.params=(t=e.params)?A(t):null):e={},e}function re(e,t,n){return{duration:e,delay:t,easing:n}}function ie(e,t,n,r,i,o,a,s){return void 0===a&&(a=null),void 0===s&&(s=!1),{type:1,element:e,keyframes:t,preStyleProps:n,postStyleProps:r,duration:i,delay:o,totalTime:i+o,easing:a,subTimeline:s}}var oe=function(){function e(){this._map=new Map}return e.prototype.consume=function(e){var t=this._map.get(e);return t?this._map.delete(e):t=[],t},e.prototype.append=function(e,t){var n=this._map.get(e);n||this._map.set(e,n=[]),n.push.apply(n,t)},e.prototype.has=function(e){return this._map.has(e)},e.prototype.clear=function(){this._map.clear()},e}(),ae=new RegExp(":enter","g"),se=new RegExp(":leave","g");function ce(e,t,n,r,i,o,a,s,c,l){return void 0===o&&(o={}),void 0===a&&(a={}),void 0===l&&(l=[]),(new le).buildKeyframes(e,t,n,r,i,o,a,s,c,l)}var le=function(){function e(){}return e.prototype.buildKeyframes=function(e,t,n,r,i,o,a,s,c,l){void 0===l&&(l=[]),c=c||new oe;var u=new pe(e,t,c,r,i,l,[]);u.options=s,u.currentTimeline.setStyles([o],null,u.errors,s),z(this,n,u);var p=u.timelines.filter(function(e){return e.containsAnimation()});if(p.length&&Object.keys(a).length){var h=p[p.length-1];h.allowOnlyTimelineStyles()||h.setStyles([a],null,u.errors,s)}return p.length?p.map(function(e){return e.buildKeyframes()}):[ie(t,[],[],[],0,0,"",!1)]},e.prototype.visitTrigger=function(e,t){},e.prototype.visitState=function(e,t){},e.prototype.visitTransition=function(e,t){},e.prototype.visitAnimateChild=function(e,t){var n=t.subInstructions.consume(t.element);if(n){var r=t.createSubContext(e.options),i=t.currentTimeline.currentTime,o=this._visitSubInstructions(n,r,r.options);i!=o&&t.transformIntoNewTimeline(o)}t.previousNode=e},e.prototype.visitAnimateRef=function(e,t){var n=t.createSubContext(e.options);n.transformIntoNewTimeline(),this.visitReference(e.animation,n),t.transformIntoNewTimeline(n.currentTimeline.currentTime),t.previousNode=e},e.prototype._visitSubInstructions=function(e,t,n){var r=t.currentTimeline.currentTime,i=r,o=null!=n.duration?x(n.duration):null,a=null!=n.delay?x(n.delay):null;return 0!==o&&e.forEach(function(e){var n=t.appendInstructionToTimeline(e,o,a);i=Math.max(i,n.duration+n.delay)}),i},e.prototype.visitReference=function(e,t){t.updateOptions(e.options,!0),z(this,e.animation,t),t.previousNode=e},e.prototype.visitSequence=function(e,t){var n=this,r=t.subContextCount,i=t,o=e.options;if(o&&(o.params||o.delay)&&((i=t.createSubContext(o)).transformIntoNewTimeline(),null!=o.delay)){6==i.previousNode.type&&(i.currentTimeline.snapshotCurrentStyles(),i.previousNode=ue);var a=x(o.delay);i.delayNextStep(a)}e.steps.length&&(e.steps.forEach(function(e){return z(n,e,i)}),i.currentTimeline.applyStylesToKeyframe(),i.subContextCount>r&&i.transformIntoNewTimeline()),t.previousNode=e},e.prototype.visitGroup=function(e,t){var n=this,r=[],i=t.currentTimeline.currentTime,o=e.options&&e.options.delay?x(e.options.delay):0;e.steps.forEach(function(a){var s=t.createSubContext(e.options);o&&s.delayNextStep(o),z(n,a,s),i=Math.max(i,s.currentTimeline.currentTime),r.push(s.currentTimeline)}),r.forEach(function(e){return t.currentTimeline.mergeTimelineCollectedStyles(e)}),t.transformIntoNewTimeline(i),t.previousNode=e},e.prototype._visitTiming=function(e,t){if(e.dynamic){var n=e.strValue,r=t.params?q(n,t.params,t.errors):n;return D(r,t.errors)}return{duration:e.duration,delay:e.delay,easing:e.easing}},e.prototype.visitAnimate=function(e,t){var n=t.currentAnimateTimings=this._visitTiming(e.timings,t),r=t.currentTimeline;n.delay&&(t.incrementTime(n.delay),r.snapshotCurrentStyles());var i=e.style;5==i.type?this.visitKeyframes(i,t):(t.incrementTime(n.duration),this.visitStyle(i,t),r.applyStylesToKeyframe()),t.currentAnimateTimings=null,t.previousNode=e},e.prototype.visitStyle=function(e,t){var n=t.currentTimeline,r=t.currentAnimateTimings;!r&&n.getCurrentStyleProperties().length&&n.forwardFrame();var i=r&&r.easing||e.easing;e.isEmptyStep?n.applyEmptyStep(i):n.setStyles(e.styles,i,t.errors,t.options),t.previousNode=e},e.prototype.visitKeyframes=function(e,t){var n=t.currentAnimateTimings,r=t.currentTimeline.duration,i=n.duration,o=t.createSubContext(),a=o.currentTimeline;a.easing=n.easing,e.styles.forEach(function(e){var n=e.offset||0;a.forwardTime(n*i),a.setStyles(e.styles,e.easing,t.errors,t.options),a.applyStylesToKeyframe()}),t.currentTimeline.mergeTimelineCollectedStyles(a),t.transformIntoNewTimeline(r+i),t.previousNode=e},e.prototype.visitQuery=function(e,t){var n=this,r=t.currentTimeline.currentTime,i=e.options||{},o=i.delay?x(i.delay):0;o&&(6===t.previousNode.type||0==r&&t.currentTimeline.getCurrentStyleProperties().length)&&(t.currentTimeline.snapshotCurrentStyles(),t.previousNode=ue);var a=r,s=t.invokeQuery(e.selector,e.originalSelector,e.limit,e.includeSelf,!!i.optional,t.errors);t.currentQueryTotal=s.length;var c=null;s.forEach(function(r,i){t.currentQueryIndex=i;var s=t.createSubContext(e.options,r);o&&s.delayNextStep(o),r===t.element&&(c=s.currentTimeline),z(n,e.animation,s),s.currentTimeline.applyStylesToKeyframe();var l=s.currentTimeline.currentTime;a=Math.max(a,l)}),t.currentQueryIndex=0,t.currentQueryTotal=0,t.transformIntoNewTimeline(a),c&&(t.currentTimeline.mergeTimelineCollectedStyles(c),t.currentTimeline.snapshotCurrentStyles()),t.previousNode=e},e.prototype.visitStagger=function(e,t){var n=t.parentContext,r=t.currentTimeline,i=e.timings,o=Math.abs(i.duration),a=o*(t.currentQueryTotal-1),s=o*t.currentQueryIndex,c=i.duration<0?"reverse":i.easing;switch(c){case"reverse":s=a-s;break;case"full":s=n.currentStaggerTime}var l=t.currentTimeline;s&&l.delayNextStep(s);var u=l.currentTime;z(this,e.animation,t),t.previousNode=e,n.currentStaggerTime=r.currentTime-u+(r.startTime-n.currentTimeline.startTime)},e}(),ue={},pe=function(){function e(e,t,n,r,i,o,a,s){this._driver=e,this.element=t,this.subInstructions=n,this._enterClassName=r,this._leaveClassName=i,this.errors=o,this.timelines=a,this.parentContext=null,this.currentAnimateTimings=null,this.previousNode=ue,this.subContextCount=0,this.options={},this.currentQueryIndex=0,this.currentQueryTotal=0,this.currentStaggerTime=0,this.currentTimeline=s||new he(this._driver,t,0),a.push(this.currentTimeline)}return Object.defineProperty(e.prototype,"params",{get:function(){return this.options.params},enumerable:!0,configurable:!0}),e.prototype.updateOptions=function(e,t){var n=this;if(e){var r=e,i=this.options;null!=r.duration&&(i.duration=x(r.duration)),null!=r.delay&&(i.delay=x(r.delay));var o=r.params;if(o){var a=i.params;a||(a=this.options.params={}),Object.keys(o).forEach(function(e){t&&a.hasOwnProperty(e)||(a[e]=q(o[e],a,n.errors))})}}},e.prototype._copyOptions=function(){var e={};if(this.options){var t=this.options.params;if(t){var n=e.params={};Object.keys(t).forEach(function(e){n[e]=t[e]})}}return e},e.prototype.createSubContext=function(t,n,r){void 0===t&&(t=null);var i=n||this.element,o=new e(this._driver,i,this.subInstructions,this._enterClassName,this._leaveClassName,this.errors,this.timelines,this.currentTimeline.fork(i,r||0));return o.previousNode=this.previousNode,o.currentAnimateTimings=this.currentAnimateTimings,o.options=this._copyOptions(),o.updateOptions(t),o.currentQueryIndex=this.currentQueryIndex,o.currentQueryTotal=this.currentQueryTotal,o.parentContext=this,this.subContextCount++,o},e.prototype.transformIntoNewTimeline=function(e){return this.previousNode=ue,this.currentTimeline=this.currentTimeline.fork(this.element,e),this.timelines.push(this.currentTimeline),this.currentTimeline},e.prototype.appendInstructionToTimeline=function(e,t,n){var r={duration:null!=t?t:e.duration,delay:this.currentTimeline.currentTime+(null!=n?n:0)+e.delay,easing:""},i=new de(this._driver,e.element,e.keyframes,e.preStyleProps,e.postStyleProps,r,e.stretchStartingKeyframe);return this.timelines.push(i),r},e.prototype.incrementTime=function(e){this.currentTimeline.forwardTime(this.currentTimeline.duration+e)},e.prototype.delayNextStep=function(e){e>0&&this.currentTimeline.delayNextStep(e)},e.prototype.invokeQuery=function(e,t,n,r,i,o){var a=[];if(r&&a.push(this.element),e.length>0){e=(e=e.replace(ae,"."+this._enterClassName)).replace(se,"."+this._leaveClassName);var s=1!=n,c=this._driver.query(this.element,e,s);0!==n&&(c=n<0?c.slice(c.length+n,c.length):c.slice(0,n)),a.push.apply(a,c)}return i||0!=a.length||o.push('`query("'+t+'")` returned zero elements. (Use `query("'+t+'", { optional: true })` if you wish to allow this.)'),a},e}(),he=function(){function e(e,t,n,r){this._driver=e,this.element=t,this.startTime=n,this._elementTimelineStylesLookup=r,this.duration=0,this._previousKeyframe={},this._currentKeyframe={},this._keyframes=new Map,this._styleSummary={},this._pendingStyles={},this._backFill={},this._currentEmptyStepKeyframe=null,this._elementTimelineStylesLookup||(this._elementTimelineStylesLookup=new Map),this._localTimelineStyles=Object.create(this._backFill,{}),this._globalTimelineStyles=this._elementTimelineStylesLookup.get(t),this._globalTimelineStyles||(this._globalTimelineStyles=this._localTimelineStyles,this._elementTimelineStylesLookup.set(t,this._localTimelineStyles)),this._loadKeyframe()}return e.prototype.containsAnimation=function(){switch(this._keyframes.size){case 0:return!1;case 1:return this.getCurrentStyleProperties().length>0;default:return!0}},e.prototype.getCurrentStyleProperties=function(){return Object.keys(this._currentKeyframe)},Object.defineProperty(e.prototype,"currentTime",{get:function(){return this.startTime+this.duration},enumerable:!0,configurable:!0}),e.prototype.delayNextStep=function(e){var t=1==this._keyframes.size&&Object.keys(this._pendingStyles).length;this.duration||t?(this.forwardTime(this.currentTime+e),t&&this.snapshotCurrentStyles()):this.startTime+=e},e.prototype.fork=function(t,n){return this.applyStylesToKeyframe(),new e(this._driver,t,n||this.currentTime,this._elementTimelineStylesLookup)},e.prototype._loadKeyframe=function(){this._currentKeyframe&&(this._previousKeyframe=this._currentKeyframe),this._currentKeyframe=this._keyframes.get(this.duration),this._currentKeyframe||(this._currentKeyframe=Object.create(this._backFill,{}),this._keyframes.set(this.duration,this._currentKeyframe))},e.prototype.forwardFrame=function(){this.duration+=1,this._loadKeyframe()},e.prototype.forwardTime=function(e){this.applyStylesToKeyframe(),this.duration=e,this._loadKeyframe()},e.prototype._updateStyle=function(e,t){this._localTimelineStyles[e]=t,this._globalTimelineStyles[e]=t,this._styleSummary[e]={time:this.currentTime,value:t}},e.prototype.allowOnlyTimelineStyles=function(){return this._currentEmptyStepKeyframe!==this._currentKeyframe},e.prototype.applyEmptyStep=function(e){var n=this;e&&(this._previousKeyframe.easing=e),Object.keys(this._globalTimelineStyles).forEach(function(e){n._backFill[e]=n._globalTimelineStyles[e]||t.AUTO_STYLE,n._currentKeyframe[e]=t.AUTO_STYLE}),this._currentEmptyStepKeyframe=this._currentKeyframe},e.prototype.setStyles=function(e,n,r,i){var o=this;n&&(this._previousKeyframe.easing=n);var a=i&&i.params||{},s=function(e,n){var r,i={};return e.forEach(function(e){"*"===e?(r=r||Object.keys(n)).forEach(function(e){i[e]=t.AUTO_STYLE}):I(e,!1,i)}),i}(e,this._globalTimelineStyles);Object.keys(s).forEach(function(e){var n=q(s[e],a,r);o._pendingStyles[e]=n,o._localTimelineStyles.hasOwnProperty(e)||(o._backFill[e]=o._globalTimelineStyles.hasOwnProperty(e)?o._globalTimelineStyles[e]:t.AUTO_STYLE),o._updateStyle(e,n)})},e.prototype.applyStylesToKeyframe=function(){var e=this,t=this._pendingStyles,n=Object.keys(t);0!=n.length&&(this._pendingStyles={},n.forEach(function(n){var r=t[n];e._currentKeyframe[n]=r}),Object.keys(this._localTimelineStyles).forEach(function(t){e._currentKeyframe.hasOwnProperty(t)||(e._currentKeyframe[t]=e._localTimelineStyles[t])}))},e.prototype.snapshotCurrentStyles=function(){var e=this;Object.keys(this._localTimelineStyles).forEach(function(t){var n=e._localTimelineStyles[t];e._pendingStyles[t]=n,e._updateStyle(t,n)})},e.prototype.getFinalKeyframe=function(){return this._keyframes.get(this.duration)},Object.defineProperty(e.prototype,"properties",{get:function(){var e=[];for(var t in this._currentKeyframe)e.push(t);return e},enumerable:!0,configurable:!0}),e.prototype.mergeTimelineCollectedStyles=function(e){var t=this;Object.keys(e._styleSummary).forEach(function(n){var r=t._styleSummary[n],i=e._styleSummary[n];(!r||i.time>r.time)&&t._updateStyle(n,i.value)})},e.prototype.buildKeyframes=function(){var e=this;this.applyStylesToKeyframe();var n=new Set,r=new Set,i=1===this._keyframes.size&&0===this.duration,o=[];this._keyframes.forEach(function(a,s){var c=I(a,!0);Object.keys(c).forEach(function(e){var i=c[e];i==t.ɵPRE_STYLE?n.add(e):i==t.AUTO_STYLE&&r.add(e)}),i||(c.offset=s/e.duration),o.push(c)});var a=n.size?F(n.values()):[],s=r.size?F(r.values()):[];if(i){var c=o[0],l=A(c);c.offset=0,l.offset=1,o=[c,l]}return ie(this.element,o,a,s,this.duration,this.startTime,this.easing,!1)},e}(),de=function(e){function t(t,n,r,i,o,a,s){void 0===s&&(s=!1);var c=e.call(this,t,n,a.delay)||this;return c.element=n,c.keyframes=r,c.preStyleProps=i,c.postStyleProps=o,c._stretchStartingKeyframe=s,c.timings={duration:a.duration,delay:a.delay,easing:a.easing},c}return r(t,e),t.prototype.containsAnimation=function(){return this.keyframes.length>1},t.prototype.buildKeyframes=function(){var e=this.keyframes,t=this.timings,n=t.delay,r=t.duration,i=t.easing;if(this._stretchStartingKeyframe&&n){var o=[],a=r+n,s=n/a,c=I(e[0],!1);c.offset=0,o.push(c);var l=I(e[0],!1);l.offset=fe(s),o.push(l);for(var u=e.length-1,p=1;p<=u;p++){var h=I(e[p],!1),d=h.offset,f=n+d*r;h.offset=fe(f/a),o.push(h)}r=a,n=0,i="",e=o}return ie(this.element,e,this.preStyleProps,this.postStyleProps,r,n,i,!0)},t}(he);function fe(e,t){void 0===t&&(t=3);var n=Math.pow(10,t-1);return Math.round(e*n)/n}var ge,me,ye=function(){function e(e,t){this._driver=e;var n=[],r=Z(e,t,n);if(n.length){var i="animation validation failed:\n"+n.join("\n");throw new Error(i)}this._animationAst=r}return e.prototype.buildTimelines=function(e,t,n,r,i){var o=Array.isArray(t)?M(t):t,a=Array.isArray(n)?M(n):n,s=[];i=i||new oe;var c=ce(this._driver,e,this._animationAst,"ng-enter","ng-leave",o,a,r,i,s);if(s.length){var l="animation building failed:\n"+s.join("\n");throw new Error(l)}return c},e}(),be=function(){},ve=function(){function e(){}return e.prototype.normalizePropertyName=function(e,t){return e},e.prototype.normalizeStyleValue=function(e,t,n,r){return n},e}(),_e=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.normalizePropertyName=function(e,t){return V(e)},t.prototype.normalizeStyleValue=function(e,t,n,r){var i="",o=n.toString().trim();if(we[t]&&0!==n&&"0"!==n)if("number"==typeof n)i="px";else{var a=n.match(/^[+-]?[\d\.]+([a-z]*)$/);a&&0==a[1].length&&r.push("Please provide a CSS unit value for "+e+":"+n)}return o+i},t}(be),we=(ge="width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective".split(","),me={},ge.forEach(function(e){return me[e]=!0}),me);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function Ee(e,t,n,r,i,o,a,s,c,l,u,p){return{type:0,element:e,triggerName:t,isRemovalTransition:i,fromState:n,fromStyles:o,toState:r,toStyles:a,timelines:s,queriedElements:c,preStyleProps:l,postStyleProps:u,errors:p}}var Te={},ke=function(){function e(e,t,n){this._triggerName=e,this.ast=t,this._stateStyles=n}return e.prototype.match=function(e,t){return function(e,t,n){return e.some(function(e){return e(t,n)})}(this.ast.matchers,e,t)},e.prototype.buildStyles=function(e,t,n){var r=this._stateStyles["*"],i=this._stateStyles[e],o=r?r.buildStyles(t,n):{};return i?i.buildStyles(t,n):o},e.prototype.build=function(e,t,n,r,o,a,s,c,l){var p=[],h=this.ast.options&&this.ast.options.params||Te,d=s&&s.params||Te,f=this.buildStyles(n,d,p),g=c&&c.params||Te,m=this.buildStyles(r,g,p),y=new Set,b=new Map,v=new Map,_="void"===r,w={params:i({},h,g)},E=ce(e,t,this.ast.animation,o,a,f,m,w,l,p);if(p.length)return Ee(t,this._triggerName,n,r,_,f,m,[],[],b,v,p);E.forEach(function(e){var n=e.element,r=u(b,n,{});e.preStyleProps.forEach(function(e){return r[e]=!0});var i=u(v,n,{});e.postStyleProps.forEach(function(e){return i[e]=!0}),n!==t&&y.add(n)});var T=F(y.values());return Ee(t,this._triggerName,n,r,_,f,m,E,T,b,v)},e}(),Ne=function(){function e(e,t){this.styles=e,this.defaultParams=t}return e.prototype.buildStyles=function(e,t){var n={},r=A(this.defaultParams);return Object.keys(e).forEach(function(t){var n=e[t];null!=n&&(r[t]=n)}),this.styles.styles.forEach(function(e){if("string"!=typeof e){var i=e;Object.keys(i).forEach(function(e){var o=i[e];o.length>1&&(o=q(o,r,t)),n[e]=o})}}),n},e}(),Se=function(){function e(e,t){var n,r,i=this;this.name=e,this.ast=t,this.transitionFactories=[],this.states={},t.states.forEach(function(e){var t=e.options&&e.options.params||{};i.states[e.name]=new Ne(e.style,t)}),Re(this.states,"true","1"),Re(this.states,"false","0"),t.transitions.forEach(function(t){i.transitionFactories.push(new ke(e,t,i.states))}),this.fallbackTransition=(n=e,r=this.states,new ke(n,{type:1,animation:{type:2,steps:[],options:null},matchers:[function(e,t){return!0}],options:null,queryCount:0,depCount:0},r))}return Object.defineProperty(e.prototype,"containsQueries",{get:function(){return this.ast.queryCount>0},enumerable:!0,configurable:!0}),e.prototype.matchTransition=function(e,t){var n=this.transitionFactories.find(function(n){return n.match(e,t)});return n||null},e.prototype.matchStyles=function(e,t,n){return this.fallbackTransition.buildStyles(e,t,n)},e}();function Re(e,t,n){e.hasOwnProperty(t)?e.hasOwnProperty(n)||(e[n]=e[t]):e.hasOwnProperty(n)&&(e[t]=e[n])}var Ce=new oe,xe=function(){function e(e,t){this._driver=e,this._normalizer=t,this._animations={},this._playersById={},this.players=[]}return e.prototype.register=function(e,t){var n=[],r=Z(this._driver,t,n);if(n.length)throw new Error("Unable to build the animation due to the following errors: "+n.join("\n"));this._animations[e]=r},e.prototype._buildPlayer=function(e,t,n){var r=e.element,i=a(this._driver,this._normalizer,0,e.keyframes,t,n);return this._driver.animate(r,i,e.duration,e.delay,e.easing,[])},e.prototype.create=function(e,n,r){var i=this;void 0===r&&(r={});var a,s=[],c=this._animations[e],l=new Map;if(c?(a=ce(this._driver,n,c,"ng-enter","ng-leave",{},{},r,Ce,s)).forEach(function(e){var t=u(l,e.element,{});e.postStyleProps.forEach(function(e){return t[e]=null})}):(s.push("The requested animation doesn't exist or has already been destroyed"),a=[]),s.length)throw new Error("Unable to create the animation due to the following errors: "+s.join("\n"));l.forEach(function(e,n){Object.keys(e).forEach(function(r){e[r]=i._driver.computeStyle(n,r,t.AUTO_STYLE)})});var p=a.map(function(e){var t=l.get(e.element);return i._buildPlayer(e,{},t)}),h=o(p);return this._playersById[e]=h,h.onDestroy(function(){return i.destroy(e)}),this.players.push(h),h},e.prototype.destroy=function(e){var t=this._getPlayer(e);t.destroy(),delete this._playersById[e];var n=this.players.indexOf(t);n>=0&&this.players.splice(n,1)},e.prototype._getPlayer=function(e){var t=this._playersById[e];if(!t)throw new Error("Unable to find the timeline player referenced by "+e);return t},e.prototype.listen=function(e,t,n,r){var i=l(t,"","","");return s(this._getPlayer(e),n,i,r),function(){}},e.prototype.command=function(e,t,n,r){if("register"!=n)if("create"!=n){var i=this._getPlayer(e);switch(n){case"play":i.play();break;case"pause":i.pause();break;case"reset":i.reset();break;case"restart":i.restart();break;case"finish":i.finish();break;case"init":i.init();break;case"setPosition":i.setPosition(parseFloat(r[0]));break;case"destroy":this.destroy(e)}}else{var o=r[0]||{};this.create(e,t,o)}else this.register(e,r[0])},e}(),Oe=[],De={namespaceId:"",setForRemoval:null,hasAnimation:!1,removedBeforeQueried:!1},Ae={namespaceId:"",setForRemoval:null,hasAnimation:!1,removedBeforeQueried:!0},Me="__ng_removed",Ie=function(){function e(e,t){void 0===t&&(t=""),this.namespaceId=t;var n=e&&e.hasOwnProperty("value"),r=n?e.value:e;if(this.value=function(e){return null!=e?e:null}(r),n){var i=A(e);delete i.value,this.options=i}else this.options={};this.options.params||(this.options.params={})}return Object.defineProperty(e.prototype,"params",{get:function(){return this.options.params},enumerable:!0,configurable:!0}),e.prototype.absorbOptions=function(e){var t=e.params;if(t){var n=this.options.params;Object.keys(t).forEach(function(e){null==n[e]&&(n[e]=t[e])})}},e}(),Pe=new Ie("void"),Le=new Ie("DELETED"),je=function(){function e(e,t,n){this.id=e,this.hostElement=t,this._engine=n,this.players=[],this._triggers={},this._queue=[],this._elementListeners=new Map,this._hostClassName="ng-tns-"+e,We(t,this._hostClassName)}return e.prototype.listen=function(e,t,n,r){var i,o=this;if(!this._triggers.hasOwnProperty(t))throw new Error('Unable to listen on the animation trigger event "'+n+'" because the animation trigger "'+t+"\" doesn't exist!");if(null==n||0==n.length)throw new Error('Unable to listen on the animation trigger "'+t+'" because the provided event is undefined!');if("start"!=(i=n)&&"done"!=i)throw new Error('The provided animation trigger event "'+n+'" for the animation trigger "'+t+'" is not supported!');var a=u(this._elementListeners,e,[]),s={name:t,phase:n,callback:r};a.push(s);var c=u(this._engine.statesByElement,e,{});return c.hasOwnProperty(t)||(We(e,"ng-trigger"),We(e,"ng-trigger-"+t),c[t]=Pe),function(){o._engine.afterFlush(function(){var e=a.indexOf(s);e>=0&&a.splice(e,1),o._triggers[t]||delete c[t]})}},e.prototype.register=function(e,t){return!this._triggers[e]&&(this._triggers[e]=t,!0)},e.prototype._getTrigger=function(e){var t=this._triggers[e];if(!t)throw new Error('The provided animation trigger "'+e+'" has not been registered!');return t},e.prototype.trigger=function(e,t,n,r){var i=this;void 0===r&&(r=!0);var o=this._getTrigger(t),a=new He(this.id,t,e),s=this._engine.statesByElement.get(e);s||(We(e,"ng-trigger"),We(e,"ng-trigger-"+t),this._engine.statesByElement.set(e,s={}));var c=s[t],l=new Ie(n,this.id),p=n&&n.hasOwnProperty("value");if(!p&&c&&l.absorbOptions(c.options),s[t]=l,c){if(c===Le)return a}else c=Pe;var h="void"===l.value;if(h||c.value!==l.value){var d=u(this._engine.playersByElement,e,[]);d.forEach(function(e){e.namespaceId==i.id&&e.triggerName==t&&e.queued&&e.destroy()});var f=o.matchTransition(c.value,l.value),g=!1;if(!f){if(!r)return;f=o.fallbackTransition,g=!0}return this._engine.totalQueuedPlayers++,this._queue.push({element:e,triggerName:t,transition:f,fromState:c,toState:l,player:a,isFallbackTransition:g}),g||(We(e,"ng-animate-queued"),a.onStart(function(){Ge(e,"ng-animate-queued")})),a.onDone(function(){var t=i.players.indexOf(a);t>=0&&i.players.splice(t,1);var n=i._engine.playersByElement.get(e);if(n){var r=n.indexOf(a);r>=0&&n.splice(r,1)}}),this.players.push(a),d.push(a),a}if(!function(e,t){var n=Object.keys(e),r=Object.keys(t);if(n.length!=r.length)return!1;for(var i=0;i<n.length;i++){var o=n[i];if(!t.hasOwnProperty(o)||e[o]!==t[o])return!1}return!0}(c.params,l.params)){var m=[],y=o.matchStyles(c.value,c.params,m),b=o.matchStyles(l.value,l.params,m);m.length?this._engine.reportError(m):this._engine.afterFlush(function(){L(e,y),P(e,b)})}},e.prototype.deregister=function(e){var t=this;delete this._triggers[e],this._engine.statesByElement.forEach(function(t,n){delete t[e]}),this._elementListeners.forEach(function(n,r){t._elementListeners.set(r,n.filter(function(t){return t.name!=e}))})},e.prototype.clearElementCache=function(e){this._engine.statesByElement.delete(e),this._elementListeners.delete(e);var t=this._engine.playersByElement.get(e);t&&(t.forEach(function(e){return e.destroy()}),this._engine.playersByElement.delete(e))},e.prototype._signalRemovalForInnerTriggers=function(e,t,n){var r=this;void 0===n&&(n=!1),this._engine.driver.query(e,R,!0).forEach(function(e){if(!e[Me]){var n=r._engine.fetchNamespacesByElement(e);n.size?n.forEach(function(n){return n.triggerLeaveAnimation(e,t,!1,!0)}):r.clearElementCache(e)}})},e.prototype.triggerLeaveAnimation=function(e,t,n,r){var i=this,a=this._engine.statesByElement.get(e);if(a){var s=[];if(Object.keys(a).forEach(function(t){if(i._triggers[t]){var n=i.trigger(e,t,"void",r);n&&s.push(n)}}),s.length)return this._engine.markElementAsRemoved(this.id,e,!0,t),n&&o(s).onDone(function(){return i._engine.processLeaveNode(e)}),!0}return!1},e.prototype.prepareLeaveAnimationListeners=function(e){var t=this,n=this._elementListeners.get(e);if(n){var r=new Set;n.forEach(function(n){var i=n.name;if(!r.has(i)){r.add(i);var o=t._triggers[i],a=o.fallbackTransition,s=t._engine.statesByElement.get(e),c=s[i]||Pe,l=new Ie("void"),u=new He(t.id,i,e);t._engine.totalQueuedPlayers++,t._queue.push({element:e,triggerName:i,transition:a,fromState:c,toState:l,player:u,isFallbackTransition:!0})}})}},e.prototype.removeNode=function(e,t){var n=this,r=this._engine;if(e.childElementCount&&this._signalRemovalForInnerTriggers(e,t,!0),!this.triggerLeaveAnimation(e,t,!0)){var i=!1;if(r.totalAnimations){var o=r.players.length?r.playersByQueriedElement.get(e):[];if(o&&o.length)i=!0;else for(var a=e;a=a.parentNode;){var s=r.statesByElement.get(a);if(s){i=!0;break}}}this.prepareLeaveAnimationListeners(e),i?r.markElementAsRemoved(this.id,e,!1,t):(r.afterFlush(function(){return n.clearElementCache(e)}),r.destroyInnerAnimations(e),r._onRemovalComplete(e,t))}},e.prototype.insertNode=function(e,t){We(e,this._hostClassName)},e.prototype.drainQueuedTransitions=function(e){var t=this,n=[];return this._queue.forEach(function(r){var i=r.player;if(!i.destroyed){var o=r.element,a=t._elementListeners.get(o);a&&a.forEach(function(t){if(t.name==r.triggerName){var n=l(o,r.triggerName,r.fromState.value,r.toState.value);n._data=e,s(r.player,t.phase,n,t.callback)}}),i.markedForDestroy?t._engine.afterFlush(function(){i.destroy()}):n.push(r)}}),this._queue=[],n.sort(function(e,n){var r=e.transition.ast.depCount,i=n.transition.ast.depCount;return 0==r||0==i?r-i:t._engine.driver.containsElement(e.element,n.element)?1:-1})},e.prototype.destroy=function(e){this.players.forEach(function(e){return e.destroy()}),this._signalRemovalForInnerTriggers(this.hostElement,e)},e.prototype.elementContainsData=function(e){var t=!1;return this._elementListeners.has(e)&&(t=!0),t=!!this._queue.find(function(t){return t.element===e})||t},e}(),Be=function(){function e(e,t){this.driver=e,this._normalizer=t,this.players=[],this.newHostElements=new Map,this.playersByElement=new Map,this.playersByQueriedElement=new Map,this.statesByElement=new Map,this.disabledNodes=new Set,this.totalAnimations=0,this.totalQueuedPlayers=0,this._namespaceLookup={},this._namespaceList=[],this._flushFns=[],this._whenQuietFns=[],this.namespacesByHostElement=new Map,this.collectedEnterElements=[],this.collectedLeaveElements=[],this.onRemovalComplete=function(e,t){}}return e.prototype._onRemovalComplete=function(e,t){this.onRemovalComplete(e,t)},Object.defineProperty(e.prototype,"queuedPlayers",{get:function(){var e=[];return this._namespaceList.forEach(function(t){t.players.forEach(function(t){t.queued&&e.push(t)})}),e},enumerable:!0,configurable:!0}),e.prototype.createNamespace=function(e,t){var n=new je(e,t,this);return t.parentNode?this._balanceNamespaceList(n,t):(this.newHostElements.set(t,n),this.collectEnterElement(t)),this._namespaceLookup[e]=n},e.prototype._balanceNamespaceList=function(e,t){var n=this._namespaceList.length-1;if(n>=0){for(var r=!1,i=n;i>=0;i--){var o=this._namespaceList[i];if(this.driver.containsElement(o.hostElement,t)){this._namespaceList.splice(i+1,0,e),r=!0;break}}r||this._namespaceList.splice(0,0,e)}else this._namespaceList.push(e);return this.namespacesByHostElement.set(t,e),e},e.prototype.register=function(e,t){var n=this._namespaceLookup[e];return n||(n=this.createNamespace(e,t)),n},e.prototype.registerTrigger=function(e,t,n){var r=this._namespaceLookup[e];r&&r.register(t,n)&&this.totalAnimations++},e.prototype.destroy=function(e,t){var n=this;if(e){var r=this._fetchNamespace(e);this.afterFlush(function(){n.namespacesByHostElement.delete(r.hostElement),delete n._namespaceLookup[e];var t=n._namespaceList.indexOf(r);t>=0&&n._namespaceList.splice(t,1)}),this.afterFlushAnimationsDone(function(){return r.destroy(t)})}},e.prototype._fetchNamespace=function(e){return this._namespaceLookup[e]},e.prototype.fetchNamespacesByElement=function(e){var t=new Set,n=this.statesByElement.get(e);if(n)for(var r=Object.keys(n),i=0;i<r.length;i++){var o=n[r[i]].namespaceId;if(o){var a=this._fetchNamespace(o);a&&t.add(a)}}return t},e.prototype.trigger=function(e,t,n,r){return!!qe(t)&&(this._fetchNamespace(e).trigger(t,n,r),!0)},e.prototype.insertNode=function(e,t,n,r){if(qe(t)){var i=t[Me];i&&i.setForRemoval&&(i.setForRemoval=!1),e&&this._fetchNamespace(e).insertNode(t,n),r&&this.collectEnterElement(t)}},e.prototype.collectEnterElement=function(e){this.collectedEnterElements.push(e)},e.prototype.markElementAsDisabled=function(e,t){t?this.disabledNodes.has(e)||(this.disabledNodes.add(e),We(e,"ng-animate-disabled")):this.disabledNodes.has(e)&&(this.disabledNodes.delete(e),Ge(e,"ng-animate-disabled"))},e.prototype.removeNode=function(e,t,n){if(qe(t)){var r=e?this._fetchNamespace(e):null;r?r.removeNode(t,n):this.markElementAsRemoved(e,t,!1,n)}else this._onRemovalComplete(t,n)},e.prototype.markElementAsRemoved=function(e,t,n,r){this.collectedLeaveElements.push(t),t[Me]={namespaceId:e,setForRemoval:r,hasAnimation:n,removedBeforeQueried:!1}},e.prototype.listen=function(e,t,n,r,i){return qe(t)?this._fetchNamespace(e).listen(t,n,r,i):function(){}},e.prototype._buildInstruction=function(e,t,n,r){return e.transition.build(this.driver,e.element,e.fromState.value,e.toState.value,n,r,e.fromState.options,e.toState.options,t)},e.prototype.destroyInnerAnimations=function(e){var t=this,n=this.driver.query(e,R,!0);n.forEach(function(e){return t.destroyActiveAnimationsForElement(e)}),0!=this.playersByQueriedElement.size&&(n=this.driver.query(e,C,!0)).forEach(function(e){return t.finishActiveQueriedAnimationOnElement(e)})},e.prototype.destroyActiveAnimationsForElement=function(e){var t=this.playersByElement.get(e);t&&t.forEach(function(e){e.queued?e.markedForDestroy=!0:e.destroy()});var n=this.statesByElement.get(e);n&&Object.keys(n).forEach(function(e){return n[e]=Le})},e.prototype.finishActiveQueriedAnimationOnElement=function(e){var t=this.playersByQueriedElement.get(e);t&&t.forEach(function(e){return e.finish()})},e.prototype.whenRenderingDone=function(){var e=this;return new Promise(function(t){if(e.players.length)return o(e.players).onDone(function(){return t()});t()})},e.prototype.processLeaveNode=function(e){var t=this,n=e[Me];if(n&&n.setForRemoval){if(e[Me]=De,n.namespaceId){this.destroyInnerAnimations(e);var r=this._fetchNamespace(n.namespaceId);r&&r.clearElementCache(e)}this._onRemovalComplete(e,n.setForRemoval)}this.driver.matchesElement(e,".ng-animate-disabled")&&this.markElementAsDisabled(e,!1),this.driver.query(e,".ng-animate-disabled",!0).forEach(function(n){t.markElementAsDisabled(e,!1)})},e.prototype.flush=function(e){var t=this;void 0===e&&(e=-1);var n=[];if(this.newHostElements.size&&(this.newHostElements.forEach(function(e,n){return t._balanceNamespaceList(e,n)}),this.newHostElements.clear()),this.totalAnimations&&this.collectedEnterElements.length)for(var r=0;r<this.collectedEnterElements.length;r++){var i=this.collectedEnterElements[r];We(i,"ng-star-inserted")}if(this._namespaceList.length&&(this.totalQueuedPlayers||this.collectedLeaveElements.length)){var a=[];try{n=this._flushAnimations(a,e)}finally{for(var r=0;r<a.length;r++)a[r]()}}else for(var r=0;r<this.collectedLeaveElements.length;r++){var s=this.collectedLeaveElements[r];this.processLeaveNode(s)}if(this.totalQueuedPlayers=0,this.collectedEnterElements.length=0,this.collectedLeaveElements.length=0,this._flushFns.forEach(function(e){return e()}),this._flushFns=[],this._whenQuietFns.length){var c=this._whenQuietFns;this._whenQuietFns=[],n.length?o(n).onDone(function(){c.forEach(function(e){return e()})}):c.forEach(function(e){return e()})}},e.prototype.reportError=function(e){throw new Error("Unable to process animations due to the following failed trigger transitions\n "+e.join("\n"))},e.prototype._flushAnimations=function(e,n){var r=this,a=new oe,s=[],c=new Map,l=[],p=new Map,h=new Map,d=new Map,f=new Set;this.disabledNodes.forEach(function(e){f.add(e);for(var t=r.driver.query(e,".ng-animate-queued",!0),n=0;n<t.length;n++)f.add(t[n])});var g=_(),m=Array.from(this.statesByElement.keys()),y=Ve(m,this.collectedEnterElements),b=new Map,v=0;y.forEach(function(e,t){var n="ng-enter"+v++;b.set(t,n),e.forEach(function(e){return We(e,n)})});for(var w=[],E=new Set,T=new Set,k=0;k<this.collectedLeaveElements.length;k++){var N=this.collectedLeaveElements[k],S=N[Me];S&&S.setForRemoval&&(w.push(N),E.add(N),S.hasAnimation?this.driver.query(N,".ng-star-inserted",!0).forEach(function(e){return E.add(e)}):T.add(N))}var R=new Map,x=Ve(m,Array.from(E));x.forEach(function(e,t){var n="ng-leave"+v++;R.set(t,n),e.forEach(function(e){return We(e,n)})}),e.push(function(){y.forEach(function(e,t){var n=b.get(t);e.forEach(function(e){return Ge(e,n)})}),x.forEach(function(e,t){var n=R.get(t);e.forEach(function(e){return Ge(e,n)})}),w.forEach(function(e){r.processLeaveNode(e)})});for(var O=[],D=[],A=this._namespaceList.length-1;A>=0;A--){var M=this._namespaceList[A];M.drainQueuedTransitions(n).forEach(function(e){var t=e.player;O.push(t);var n=e.element;if(g&&r.driver.containsElement(g,n)){var i=R.get(n),o=b.get(n),c=r._buildInstruction(e,a,o,i);if(c.errors&&c.errors.length)D.push(c);else{if(e.isFallbackTransition)return t.onStart(function(){return L(n,c.fromStyles)}),t.onDestroy(function(){return P(n,c.toStyles)}),void s.push(t);c.timelines.forEach(function(e){return e.stretchStartingKeyframe=!0}),a.append(n,c.timelines);var f={instruction:c,player:t,element:n};l.push(f),c.queriedElements.forEach(function(e){return u(p,e,[]).push(t)}),c.preStyleProps.forEach(function(e,t){var n=Object.keys(e);if(n.length){var r=h.get(t);r||h.set(t,r=new Set),n.forEach(function(e){return r.add(e)})}}),c.postStyleProps.forEach(function(e,t){var n=Object.keys(e),r=d.get(t);r||d.set(t,r=new Set),n.forEach(function(e){return r.add(e)})})}}else t.destroy()})}if(D.length){var I=[];D.forEach(function(e){I.push("@"+e.triggerName+" has failed due to:\n"),e.errors.forEach(function(e){return I.push("- "+e+"\n")})}),O.forEach(function(e){return e.destroy()}),this.reportError(I)}var j=new Map,B=new Map;l.forEach(function(e){var t=e.element;a.has(t)&&(B.set(t,t),r._beforeAnimationBuild(e.player.namespaceId,e.instruction,j))}),s.forEach(function(e){var t=e.element,n=r._getPreviousPlayers(t,!1,e.namespaceId,e.triggerName,null);n.forEach(function(e){u(j,t,[]).push(e),e.destroy()})});var H=w.filter(function(e){return Ke(e,h,d)}),q=new Map,F=Ue(q,this.driver,T,d,t.AUTO_STYLE);F.forEach(function(e){Ke(e,h,d)&&H.push(e)});var U=new Map;y.forEach(function(e,n){Ue(U,r.driver,new Set(e),h,t.ɵPRE_STYLE)}),H.forEach(function(e){var t=q.get(e),n=U.get(e);q.set(e,i({},t,n))});var V=[],z=[],W={};l.forEach(function(e){var t=e.element,n=e.player,i=e.instruction;if(a.has(t)){if(f.has(t))return n.onDestroy(function(){return P(t,i.toStyles)}),void s.push(n);var l=W;if(B.size>1){for(var u=t,p=[];u=u.parentNode;){var h=B.get(u);if(h){l=h;break}p.push(u)}p.forEach(function(e){return B.set(e,l)})}var d=r._buildAnimation(n.namespaceId,i,j,c,U,q);if(n.setRealPlayer(d),l===W)V.push(n);else{var g=r.playersByElement.get(l);g&&g.length&&(n.parentPlayer=o(g)),s.push(n)}}else L(t,i.fromStyles),n.onDestroy(function(){return P(t,i.toStyles)}),z.push(n),f.has(t)&&s.push(n)}),z.forEach(function(e){var t=c.get(e.element);if(t&&t.length){var n=o(t);e.setRealPlayer(n)}}),s.forEach(function(e){e.parentPlayer?e.syncPlayerEvents(e.parentPlayer):e.destroy()});for(var G=0;G<w.length;G++){var N=w[G],S=N[Me];if(Ge(N,"ng-leave"),!S||!S.hasAnimation){var Y=[];if(p.size){var K=p.get(N);K&&K.length&&Y.push.apply(Y,K);for(var $=this.driver.query(N,C,!0),Q=0;Q<$.length;Q++){var X=p.get($[Q]);X&&X.length&&Y.push.apply(Y,X)}}var Z=Y.filter(function(e){return!e.destroyed});Z.length?Ye(this,N,Z):this.processLeaveNode(N)}}return w.length=0,V.forEach(function(e){r.players.push(e),e.onDone(function(){e.destroy();var t=r.players.indexOf(e);r.players.splice(t,1)}),e.play()}),V},e.prototype.elementContainsData=function(e,t){var n=!1,r=t[Me];return r&&r.setForRemoval&&(n=!0),this.playersByElement.has(t)&&(n=!0),this.playersByQueriedElement.has(t)&&(n=!0),this.statesByElement.has(t)&&(n=!0),this._fetchNamespace(e).elementContainsData(t)||n},e.prototype.afterFlush=function(e){this._flushFns.push(e)},e.prototype.afterFlushAnimationsDone=function(e){this._whenQuietFns.push(e)},e.prototype._getPreviousPlayers=function(e,t,n,r,i){var o=[];if(t){var a=this.playersByQueriedElement.get(e);a&&(o=a)}else{var s=this.playersByElement.get(e);if(s){var c=!i||"void"==i;s.forEach(function(e){e.queued||(c||e.triggerName==r)&&o.push(e)})}}return(n||r)&&(o=o.filter(function(e){return!(n&&n!=e.namespaceId||r&&r!=e.triggerName)})),o},e.prototype._beforeAnimationBuild=function(e,t,n){for(var r=t.triggerName,i=t.element,o=t.isRemovalTransition?void 0:e,a=t.isRemovalTransition?void 0:r,s=function(e){var r=e.element,s=r!==i,l=u(n,r,[]),p=c._getPreviousPlayers(r,s,o,a,t.toState);p.forEach(function(e){var t=e.getRealPlayer();t.beforeDestroy&&t.beforeDestroy(),e.destroy(),l.push(e)})},c=this,l=0,p=t.timelines;l<p.length;l++){var h=p[l];s(h)}L(i,t.fromStyles)},e.prototype._buildAnimation=function(e,n,r,i,s,c){var l=this,p=n.triggerName,h=n.element,d=[],f=new Set,g=new Set,m=n.timelines.map(function(n){var o=n.element;f.add(o);var u=o[Me];if(u&&u.removedBeforeQueried)return new t.NoopAnimationPlayer;var m,y,b=o!==h,v=(m=(r.get(o)||Oe).map(function(e){return e.getRealPlayer()}),y=[],function e(n,r){for(var i=0;i<n.length;i++){var o=n[i];o instanceof t.ɵAnimationGroupPlayer?e(o.players,r):r.push(o)}}(m,y),y).filter(function(e){var t=e;return!!t.element&&t.element===o}),_=s.get(o),w=c.get(o),E=a(l.driver,l._normalizer,0,n.keyframes,_,w),T=l._buildPlayer(n,E,v);if(n.subTimeline&&i&&g.add(o),b){var k=new He(e,p,o);k.setRealPlayer(T),d.push(k)}return T});d.forEach(function(e){u(l.playersByQueriedElement,e.element,[]).push(e),e.onDone(function(){return function(e,t,n){var r;if(e instanceof Map){if(r=e.get(t)){if(r.length){var i=r.indexOf(n);r.splice(i,1)}0==r.length&&e.delete(t)}}else if(r=e[t]){if(r.length){var i=r.indexOf(n);r.splice(i,1)}0==r.length&&delete e[t]}return r}(l.playersByQueriedElement,e.element,e)})}),f.forEach(function(e){return We(e,"ng-animating")});var y=o(m);return y.onDestroy(function(){f.forEach(function(e){return Ge(e,"ng-animating")}),P(h,n.toStyles)}),g.forEach(function(e){u(i,e,[]).push(y)}),y},e.prototype._buildPlayer=function(e,n,r){return n.length>0?this.driver.animate(e.element,n,e.duration,e.delay,e.easing,r):new t.NoopAnimationPlayer},e}(),He=function(){function e(e,n,r){this.namespaceId=e,this.triggerName=n,this.element=r,this._player=new t.NoopAnimationPlayer,this._containsRealPlayer=!1,this._queuedCallbacks={},this.destroyed=!1,this.markedForDestroy=!1,this.queued=!0}return e.prototype.setRealPlayer=function(e){var t=this;this._containsRealPlayer||(this._player=e,Object.keys(this._queuedCallbacks).forEach(function(n){t._queuedCallbacks[n].forEach(function(t){return s(e,n,void 0,t)})}),this._queuedCallbacks={},this._containsRealPlayer=!0,this.queued=!1)},e.prototype.getRealPlayer=function(){return this._player},e.prototype.syncPlayerEvents=function(e){var t=this,n=this._player;n.triggerCallback&&e.onStart(function(){return n.triggerCallback("start")}),e.onDone(function(){return t.finish()}),e.onDestroy(function(){return t.destroy()})},e.prototype._queueEvent=function(e,t){u(this._queuedCallbacks,e,[]).push(t)},e.prototype.onDone=function(e){this.queued&&this._queueEvent("done",e),this._player.onDone(e)},e.prototype.onStart=function(e){this.queued&&this._queueEvent("start",e),this._player.onStart(e)},e.prototype.onDestroy=function(e){this.queued&&this._queueEvent("destroy",e),this._player.onDestroy(e)},e.prototype.init=function(){this._player.init()},e.prototype.hasStarted=function(){return!this.queued&&this._player.hasStarted()},e.prototype.play=function(){!this.queued&&this._player.play()},e.prototype.pause=function(){!this.queued&&this._player.pause()},e.prototype.restart=function(){!this.queued&&this._player.restart()},e.prototype.finish=function(){this._player.finish()},e.prototype.destroy=function(){this.destroyed=!0,this._player.destroy()},e.prototype.reset=function(){!this.queued&&this._player.reset()},e.prototype.setPosition=function(e){this.queued||this._player.setPosition(e)},e.prototype.getPosition=function(){return this.queued?0:this._player.getPosition()},Object.defineProperty(e.prototype,"totalTime",{get:function(){return this._player.totalTime},enumerable:!0,configurable:!0}),e.prototype.triggerCallback=function(e){var t=this._player;t.triggerCallback&&t.triggerCallback(e)},e}();function qe(e){return e&&1===e.nodeType}function Fe(e,t){var n=e.style.display;return e.style.display=null!=t?t:"none",n}function Ue(e,t,n,r,i){var o=[];n.forEach(function(e){return o.push(Fe(e))});var a=[];r.forEach(function(n,r){var o={};n.forEach(function(e){var n=o[e]=t.computeStyle(r,e,i);n&&0!=n.length||(r[Me]=Ae,a.push(r))}),e.set(r,o)});var s=0;return n.forEach(function(e){return Fe(e,o[s++])}),a}function Ve(e,t){var n=new Map;if(e.forEach(function(e){return n.set(e,[])}),0==t.length)return n;var r=1,i=new Set(t),o=new Map;return t.forEach(function(e){var t=function e(t){if(!t)return r;var a=o.get(t);if(a)return a;var s=t.parentNode;return a=n.has(s)?s:i.has(s)?r:e(s),o.set(t,a),a}(e);t!==r&&n.get(t).push(e)}),n}var ze="$$classes";function We(e,t){if(e.classList)e.classList.add(t);else{var n=e[ze];n||(n=e[ze]={}),n[t]=!0}}function Ge(e,t){if(e.classList)e.classList.remove(t);else{var n=e[ze];n&&delete n[t]}}function Ye(e,t,n){o(n).onDone(function(){return e.processLeaveNode(t)})}function Ke(e,t,n){var r=n.get(e);if(!r)return!1;var i=t.get(e);return i?r.forEach(function(e){return i.add(e)}):t.set(e,r),n.delete(e),!0}var $e=function(){function e(e,t){var n=this;this._driver=e,this._triggerCache={},this.onRemovalComplete=function(e,t){},this._transitionEngine=new Be(e,t),this._timelineEngine=new xe(e,t),this._transitionEngine.onRemovalComplete=function(e,t){return n.onRemovalComplete(e,t)}}return e.prototype.registerTrigger=function(e,t,n,r,i){var o=e+"-"+r,a=this._triggerCache[o];if(!a){var s=[],c=Z(this._driver,i,s);if(s.length)throw new Error('The animation trigger "'+r+'" has failed to build due to the following errors:\n - '+s.join("\n - "));a=function(e,t){return new Se(e,t)}(r,c),this._triggerCache[o]=a}this._transitionEngine.registerTrigger(t,r,a)},e.prototype.register=function(e,t){this._transitionEngine.register(e,t)},e.prototype.destroy=function(e,t){this._transitionEngine.destroy(e,t)},e.prototype.onInsert=function(e,t,n,r){this._transitionEngine.insertNode(e,t,n,r)},e.prototype.onRemove=function(e,t,n){this._transitionEngine.removeNode(e,t,n)},e.prototype.disableAnimations=function(e,t){this._transitionEngine.markElementAsDisabled(e,t)},e.prototype.process=function(e,t,n,r){if("@"==n.charAt(0)){var i=p(n),o=i[0],a=i[1],s=r;this._timelineEngine.command(o,t,a,s)}else this._transitionEngine.trigger(e,t,n,r)},e.prototype.listen=function(e,t,n,r,i){if("@"==n.charAt(0)){var o=p(n),a=o[0],s=o[1];return this._timelineEngine.listen(a,t,s,i)}return this._transitionEngine.listen(e,t,n,r,i)},e.prototype.flush=function(e){void 0===e&&(e=-1),this._transitionEngine.flush(e)},Object.defineProperty(e.prototype,"players",{get:function(){return this._transitionEngine.players.concat(this._timelineEngine.players)},enumerable:!0,configurable:!0}),e.prototype.whenRenderingDone=function(){return this._transitionEngine.whenRenderingDone()},e}(),Qe=function(){function e(e,t,n,r){void 0===r&&(r=[]);var i,o,a=this;this.element=e,this.keyframes=t,this.options=n,this.previousPlayers=r,this._onDoneFns=[],this._onStartFns=[],this._onDestroyFns=[],this._initialized=!1,this._finished=!1,this._started=!1,this._destroyed=!1,this.time=0,this.parentPlayer=null,this.previousStyles={},this.currentSnapshot={},this._duration=n.duration,this._delay=n.delay||0,this.time=this._duration+this._delay,i=this._duration,o=this._delay,(0===i||0===o)&&r.forEach(function(e){var t=e.currentSnapshot;Object.keys(t).forEach(function(e){return a.previousStyles[e]=t[e]})})}return e.prototype._onFinish=function(){this._finished||(this._finished=!0,this._onDoneFns.forEach(function(e){return e()}),this._onDoneFns=[])},e.prototype.init=function(){this._buildPlayer(),this._preparePlayerBeforeStart()},e.prototype._buildPlayer=function(){var e=this;if(!this._initialized){this._initialized=!0;var t=this.keyframes.map(function(e){return I(e,!1)}),n=Object.keys(this.previousStyles);if(n.length&&t.length){var r=t[0],i=[];if(n.forEach(function(t){r.hasOwnProperty(t)||i.push(t),r[t]=e.previousStyles[t]}),i.length)for(var o=this,a=function(){var e=t[s];i.forEach(function(t){e[t]=Xe(o.element,t)})},s=1;s<t.length;s++)a()}this.domPlayer=this._triggerWebAnimation(this.element,t,this.options),this._finalKeyframe=t.length?t[t.length-1]:{},this.domPlayer.addEventListener("finish",function(){return e._onFinish()})}},e.prototype._preparePlayerBeforeStart=function(){this._delay?this._resetDomPlayerState():this.domPlayer.pause()},e.prototype._triggerWebAnimation=function(e,t,n){return e.animate(t,n)},e.prototype.onStart=function(e){this._onStartFns.push(e)},e.prototype.onDone=function(e){this._onDoneFns.push(e)},e.prototype.onDestroy=function(e){this._onDestroyFns.push(e)},e.prototype.play=function(){this._buildPlayer(),this.hasStarted()||(this._onStartFns.forEach(function(e){return e()}),this._onStartFns=[],this._started=!0),this.domPlayer.play()},e.prototype.pause=function(){this.init(),this.domPlayer.pause()},e.prototype.finish=function(){this.init(),this._onFinish(),this.domPlayer.finish()},e.prototype.reset=function(){this._resetDomPlayerState(),this._destroyed=!1,this._finished=!1,this._started=!1},e.prototype._resetDomPlayerState=function(){this.domPlayer&&this.domPlayer.cancel()},e.prototype.restart=function(){this.reset(),this.play()},e.prototype.hasStarted=function(){return this._started},e.prototype.destroy=function(){this._destroyed||(this._destroyed=!0,this._resetDomPlayerState(),this._onFinish(),this._onDestroyFns.forEach(function(e){return e()}),this._onDestroyFns=[])},e.prototype.setPosition=function(e){this.domPlayer.currentTime=e*this.time},e.prototype.getPosition=function(){return this.domPlayer.currentTime/this.time},Object.defineProperty(e.prototype,"totalTime",{get:function(){return this._delay+this._duration},enumerable:!0,configurable:!0}),e.prototype.beforeDestroy=function(){var e=this,t={};this.hasStarted()&&Object.keys(this._finalKeyframe).forEach(function(n){"offset"!=n&&(t[n]=e._finished?e._finalKeyframe[n]:Xe(e.element,n))}),this.currentSnapshot=t},e.prototype.triggerCallback=function(e){var t="start"==e?this._onStartFns:this._onDoneFns;t.forEach(function(e){return e()}),t.length=0},e}();function Xe(e,t){return window.getComputedStyle(e)[t]}var Ze=function(){function e(){}return e.prototype.validateStyleProperty=function(e){return v(e)},e.prototype.matchesElement=function(e,t){return w(e,t)},e.prototype.containsElement=function(e,t){return E(e,t)},e.prototype.query=function(e,t,n){return T(e,t,n)},e.prototype.computeStyle=function(e,t,n){return window.getComputedStyle(e)[t]},e.prototype.animate=function(e,t,n,r,i,o){void 0===o&&(o=[]);var a=0==r?"both":"forwards",s={duration:n,delay:r,fill:a};i&&(s.easing=i);var c=o.filter(function(e){return e instanceof Qe});return new Qe(e,t,s,c)},e}();e.AnimationDriver=N,e.ɵAnimation=ye,e.ɵAnimationStyleNormalizer=be,e.ɵNoopAnimationStyleNormalizer=ve,e.ɵWebAnimationsStyleNormalizer=_e,e.ɵNoopAnimationDriver=k,e.ɵAnimationEngine=$e,e.ɵWebAnimationsDriver=Ze,e.ɵsupportsWebAnimations=function(){return"undefined"!=typeof Element&&"function"==typeof Element.prototype.animate},e.ɵWebAnimationsPlayer=Qe,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(51))},function(e,t,n){e.exports=n(1)(5)},function(e,t,n){e.exports=n(1)(83)},function(e,t,n){var r;"undefined"!=typeof self&&self,r=function(e,t,n,r,i,o,a,s,c,l){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=76)}([function(t,n){t.exports=e},function(e,t,n){"use strict";function r(e){return parseInt(""+e,10)}function i(e){return!isNaN(r(e))}Object.defineProperty(t,"__esModule",{value:!0}),t.toInteger=r,t.toString=function(e){return void 0!==e&&null!==e?""+e:""},t.getValueInRange=function(e,t,n){return void 0===n&&(n=0),Math.max(Math.min(e,t),n)},t.isString=function(e){return"string"==typeof e},t.isNumber=i,t.isInteger=function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},t.isDefined=function(e){return void 0!==e&&null!==e},t.padNumber=function(e){return i(e)?("0"+e).slice(-2):""},t.regExpEscape=function(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}},function(e,n){e.exports=t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t,n){this.year=e,this.month=t,this.day=n}return e.from=function(t){return t?new e(t.year,t.month,t.day?t.day:1):null},e.prototype.equals=function(e){return e&&this.year===e.year&&this.month===e.month&&this.day===e.day},e.prototype.before=function(e){return!!e&&(this.year===e.year?this.month===e.month?this.day!==e.day&&this.day<e.day:this.month<e.month:this.year<e.year)},e.prototype.after=function(e){return!!e&&(this.year===e.year?this.month===e.month?this.day!==e.day&&this.day>e.day:this.month>e.month:this.year>e.year)},e.prototype.toStruct=function(){return{year:this.year,month:this.month,day:this.day}},e.prototype.toString=function(){return this.year+"-"+this.month+"-"+this.day},e}();t.NgbDate=r},function(e,t){e.exports=n},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(3),s=n(0),c=n(1);function l(e){return new a.NgbDate(e.getFullYear(),e.getMonth()+1,e.getDate())}function u(e){var t=new Date(e.year,e.month-1,e.day,12);return isNaN(t.getTime())||t.setFullYear(e.year),t}var p=function(){function e(){}return e=o([s.Injectable()],e)}();t.NgbCalendar=p;var h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.getDaysPerWeek=function(){return 7},t.prototype.getMonths=function(){return[1,2,3,4,5,6,7,8,9,10,11,12]},t.prototype.getWeeksPerMonth=function(){return 6},t.prototype.getNext=function(e,t,n){void 0===t&&(t="d"),void 0===n&&(n=1);var r=u(e);switch(t){case"y":return new a.NgbDate(e.year+n,1,1);case"m":r=new Date(e.year,e.month+n-1,1,12);break;case"d":r.setDate(r.getDate()+n);break;default:return e}return l(r)},t.prototype.getPrev=function(e,t,n){return void 0===t&&(t="d"),void 0===n&&(n=1),this.getNext(e,t,-n)},t.prototype.getWeekday=function(e){var t=u(e).getDay();return 0===t?7:t},t.prototype.getWeekNumber=function(e,t){7===t&&(t=0);var n=u(e[(11-t)%7]);n.setDate(n.getDate()+4-(n.getDay()||7));var r=n.getTime();return n.setMonth(0),n.setDate(1),Math.floor(Math.round((r-n.getTime())/864e5)/7)+1},t.prototype.getToday=function(){return l(new Date)},t.prototype.isValid=function(e){if(!(e&&c.isInteger(e.year)&&c.isInteger(e.month)&&c.isInteger(e.day)))return!1;var t=u(e);return!isNaN(t.getTime())&&t.getFullYear()===e.year&&t.getMonth()+1===e.month&&t.getDate()===e.day},t=o([s.Injectable()],t)}(p);t.NgbCalendarGregorian=h},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=["Mo","Tu","We","Th","Fr","Sa","Su"],c=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],l=["January","February","March","April","May","June","July","August","September","October","November","December"],u=function(){function e(){}return e=o([a.Injectable()],e)}();t.NgbDatepickerI18n=u;var p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.getWeekdayShortName=function(e){return s[e-1]},t.prototype.getMonthShortName=function(e){return c[e-1]},t.prototype.getMonthFullName=function(e){return l[e-1]},t=o([a.Injectable()],t)}(u);t.NgbDatepickerI18nDefault=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.getAllStyles=function(e){return window.getComputedStyle(e)},e.prototype.getStyle=function(e,t){return this.getAllStyles(e)[t]},e.prototype.isStaticPositioned=function(e){return"static"===(this.getStyle(e,"position")||"static")},e.prototype.offsetParent=function(e){for(var t=e.offsetParent||document.documentElement;t&&t!==document.documentElement&&this.isStaticPositioned(t);)t=t.offsetParent;return t||document.documentElement},e.prototype.position=function(e,t){var n;void 0===t&&(t=!0);var r={width:0,height:0,top:0,bottom:0,left:0,right:0};if("fixed"===this.getStyle(e,"position"))n=e.getBoundingClientRect();else{var i=this.offsetParent(e);n=this.offset(e,!1),i!==document.documentElement&&(r=this.offset(i,!1)),r.top+=i.clientTop,r.left+=i.clientLeft}return n.top-=r.top,n.bottom-=r.top,n.left-=r.left,n.right-=r.left,t&&(n.top=Math.round(n.top),n.bottom=Math.round(n.bottom),n.left=Math.round(n.left),n.right=Math.round(n.right)),n},e.prototype.offset=function(e,t){void 0===t&&(t=!0);var n=e.getBoundingClientRect(),r=window.pageYOffset-document.documentElement.clientTop,i=window.pageXOffset-document.documentElement.clientLeft,o={height:n.height||e.offsetHeight,width:n.width||e.offsetWidth,top:n.top+r,bottom:n.bottom+r,left:n.left+i,right:n.right+i};return t&&(o.height=Math.round(o.height),o.width=Math.round(o.width),o.top=Math.round(o.top),o.bottom=Math.round(o.bottom),o.left=Math.round(o.left),o.right=Math.round(o.right)),o},e.prototype.positionElements=function(e,t,n,r){var i=r?this.offset(e,!1):this.position(e,!1),o=this.getAllStyles(t),a=t.getBoundingClientRect(),s=n.split("-")[0]||"top",c=n.split("-")[1]||"center",l={height:a.height||t.offsetHeight,width:a.width||t.offsetWidth,top:0,bottom:a.height||t.offsetHeight,left:0,right:a.width||t.offsetWidth};switch(s){case"top":l.top=i.top-(t.offsetHeight+parseFloat(o.marginBottom));break;case"bottom":l.top=i.top+i.height;break;case"left":l.left=i.left-(t.offsetWidth+parseFloat(o.marginRight));break;case"right":l.left=i.left+i.width}switch(c){case"top":l.top=i.top;break;case"bottom":l.top=i.top+i.height-t.offsetHeight;break;case"left":l.left=i.left;break;case"right":l.left=i.left+i.width-t.offsetWidth;break;case"center":"top"===s||"bottom"===s?l.left=i.left+i.width/2-t.offsetWidth/2:l.top=i.top+i.height/2-t.offsetHeight/2}return l.top=Math.round(l.top),l.bottom=Math.round(l.bottom),l.left=Math.round(l.left),l.right=Math.round(l.right),l},e.prototype.getAvailablePlacements=function(e,t){var n=[],r=e.getBoundingClientRect(),i=t.getBoundingClientRect(),o=document.documentElement;return i.width<r.left&&(r.top+r.height/2-t.offsetHeight/2>0&&n.splice(n.length,1,"left"),this.setSecondaryPlacementForLeftRight(r,i,"left",n)),i.height<r.top&&(n.splice(n.length,1,"top"),this.setSecondaryPlacementForTopBottom(r,i,"top",n)),(window.innerWidth||o.clientWidth)-r.right>i.width&&(r.top+r.height/2-t.offsetHeight/2>0&&n.splice(n.length,1,"right"),this.setSecondaryPlacementForLeftRight(r,i,"right",n)),(window.innerHeight||o.clientHeight)-r.bottom>i.height&&(n.splice(n.length,1,"bottom"),this.setSecondaryPlacementForTopBottom(r,i,"bottom",n)),n},e.prototype.setSecondaryPlacementForLeftRight=function(e,t,n,r){var i=document.documentElement;t.height<=e.bottom&&r.splice(r.length,1,n+"-bottom"),(window.innerHeight||i.clientHeight)-e.top>=t.height&&r.splice(r.length,1,n+"-top")},e.prototype.setSecondaryPlacementForTopBottom=function(e,t,n,r){var i=document.documentElement;(window.innerWidth||i.clientWidth)-e.left>=t.width&&r.splice(r.length,1,n+"-left"),t.width<=e.right&&r.splice(r.length,1,n+"-right")},e}();t.Positioning=r;var i=new r;t.positionElements=function(e,t,n,r){var o=Array.isArray(n)?n:[n],a=o.findIndex(function(e){return"auto"===e});a>=0&&["top","right","bottom","left"].forEach(function(e){null==o.find(function(t){return-1!==t.search("^"+e+"|^"+e+"-")})&&o.splice(a++,1,e)});for(var s,c=0,l=0,u=i.getAvailablePlacements(e,t),p=function(n,a){if(null!=u.find(function(e){return e===n})||o.length===a+1){s=n;var p=i.positionElements(e,t,n,r);return c=p.top,l=p.left,"break"}},h=0,d=o.map(function(e,t){return{item:e,index:t}});h<d.length;h++){var f=d[h];if("break"===p(f.item,f.index))break}return t.style.top=c+"px",t.style.left=l+"px",s}},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){}return e=r([i.Directive({selector:"[ngbButtonLabel]",host:{"[class.btn]":"true","[class.active]":"active","[class.disabled]":"disabled","[class.focus]":"focused"}})],e)}();t.NgbButtonLabel=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=function(){function e(){}return e=o([a.Injectable()],e)}();t.NgbDateAdapter=s;var c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.fromModel=function(e){return e&&e.year&&e.month&&e.day?{year:e.year,month:e.month,day:e.day}:null},t.prototype.toModel=function(e){return e&&e.year&&e.month&&e.day?{year:e.year,month:e.month,day:e.day}:null},t=o([a.Injectable()],t)}(s);t.NgbDateStructAdapter=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){return function(e,t,n){this.nodes=e,this.viewRef=t,this.componentRef=n}}();t.ContentRef=i;var o=function(){function e(e,t,n,r,i){this._type=e,this._injector=t,this._viewContainerRef=n,this._renderer=r,this._componentFactoryResolver=i}return e.prototype.open=function(e,t){return this._windowRef||(this._contentRef=this._getContentRef(e,t),this._windowRef=this._viewContainerRef.createComponent(this._componentFactoryResolver.resolveComponentFactory(this._type),0,this._injector,this._contentRef.nodes)),this._windowRef},e.prototype.close=function(){this._windowRef&&(this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView)),this._windowRef=null,this._contentRef.viewRef&&(this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef)),this._contentRef=null))},e.prototype._getContentRef=function(e,t){if(e){if(e instanceof r.TemplateRef){var n=this._viewContainerRef.createEmbeddedView(e,t);return new i([n.rootNodes],n)}return new i([[this._renderer.createText(""+e)]])}return new i([])},e}();t.PopupService=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.closeOthers=!1}return e=r([i.Injectable()],e)}();t.NgbAccordionConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.dismissible=!0,this.type="warning"}return e=r([i.Injectable()],e)}();t.NgbAlertConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.interval=5e3,this.wrap=!0,this.keyboard=!0}return e=r([i.Injectable()],e)}();t.NgbCarouselConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(4),s=n(5),c=n(3),l=n(15),u=n(79),p=n(41),h=n(1),d=n(16),f=n(9),g=n(6),m=n(40),y={provide:a.NG_VALUE_ACCESSOR,useExisting:o.forwardRef(function(){return b}),multi:!0},b=function(){function e(e,t,n,r,i,a,s,c){var l=this;this._keyMapService=e,this._service=t,this._calendar=n,this.i18n=r,this._cd=a,this._elementRef=s,this._ngbDateAdapter=c,this.navigate=new o.EventEmitter,this.select=new o.EventEmitter,this.onChange=function(e){},this.onTouched=function(){},this.dayTemplate=i.dayTemplate,this.displayMonths=i.displayMonths,this.firstDayOfWeek=i.firstDayOfWeek,this.markDisabled=i.markDisabled,this.minDate=i.minDate,this.maxDate=i.maxDate,this.navigation=i.navigation,this.outsideDays=i.outsideDays,this.showWeekdays=i.showWeekdays,this.showWeekNumbers=i.showWeekNumbers,this.startDate=i.startDate,this._selectSubscription=t.select$.subscribe(function(e){l.select.emit(e.toStruct())}),this._subscription=t.model$.subscribe(function(e){var t=e.firstDate,n=l.model?l.model.firstDate:null,r=e.selectedDate,i=l.model?l.model.selectedDate:null;l.model=e,m.isChangedDate(r,i)&&(l.onTouched(),l.onChange(l._ngbDateAdapter.toModel(r))),t.equals(n)||l.navigate.emit({current:n?{year:n.year,month:n.month}:null,next:{year:t.year,month:t.month}}),a.markForCheck()})}return e.prototype.focus=function(){this._elementRef.nativeElement.focus()},e.prototype.navigateTo=function(e){this._service.open(c.NgbDate.from(e))},e.prototype.ngOnDestroy=function(){this._subscription.unsubscribe(),this._selectSubscription.unsubscribe()},e.prototype.ngOnInit=function(){void 0===this.model&&(this._service.displayMonths=h.toInteger(this.displayMonths),this._service.markDisabled=this.markDisabled,this._service.firstDayOfWeek=this.firstDayOfWeek,this._service.navigation=this.navigation,this._service.minDate=c.NgbDate.from(this.minDate),this._service.maxDate=c.NgbDate.from(this.maxDate),this.navigateTo(this.startDate))},e.prototype.ngOnChanges=function(e){e.displayMonths&&(this._service.displayMonths=h.toInteger(this.displayMonths)),e.markDisabled&&(this._service.markDisabled=this.markDisabled),e.firstDayOfWeek&&(this._service.firstDayOfWeek=this.firstDayOfWeek),e.navigation&&(this._service.navigation=this.navigation),e.minDate&&(this._service.minDate=c.NgbDate.from(this.minDate)),e.maxDate&&(this._service.maxDate=c.NgbDate.from(this.maxDate)),e.startDate&&this.navigateTo(this.startDate)},e.prototype.onDateSelect=function(e){this._service.focus(e),this._service.select(e,{emitEvent:!0})},e.prototype.onKeyDown=function(e){this._keyMapService.processKey(e)},e.prototype.onNavigateDateSelect=function(e){this._service.open(e)},e.prototype.onNavigateEvent=function(e){switch(e){case p.NavigationEvent.PREV:this._service.open(this._calendar.getPrev(this.model.firstDate,"m",1));break;case p.NavigationEvent.NEXT:this._service.open(this._calendar.getNext(this.model.firstDate,"m",1))}},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.setDisabledState=function(e){this._service.disabled=e},e.prototype.showFocus=function(e){this._service.focusVisible=e},e.prototype.writeValue=function(e){this._service.select(c.NgbDate.from(this._ngbDateAdapter.fromModel(e)))},r([o.Input(),i("design:type",o.TemplateRef)],e.prototype,"dayTemplate",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"displayMonths",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"firstDayOfWeek",void 0),r([o.Input(),i("design:type",Function)],e.prototype,"markDisabled",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"maxDate",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"minDate",void 0),r([o.Input(),i("design:type",String)],e.prototype,"navigation",void 0),r([o.Input(),i("design:type",String)],e.prototype,"outsideDays",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"showWeekdays",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"showWeekNumbers",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"startDate",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"navigate",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"select",void 0),e=r([o.Component({exportAs:"ngbDatepicker",selector:"ngb-datepicker",changeDetection:o.ChangeDetectionStrategy.OnPush,host:{tabindex:"0","[attr.tabindex]":'model.disabled ? undefined : "0"',"(blur)":"showFocus(false)","(focus)":"showFocus(true)","(keydown)":"onKeyDown($event)"},styles:["\n    :host {\n      border: 1px solid rgba(0, 0, 0, 0.125);\n      border-radius: 0.25rem;\n      display: inline-block;\n    }\n    .ngb-dp-month {\n      pointer-events: none;\n    }\n    .ngb-dp-header {\n      border-bottom: 0px;\n      border-radius: .25rem 0.25rem 0rem 0rem;\n      padding-top: 0.25rem;\n    }\n    ngb-datepicker-month-view {\n      pointer-events: auto;\n    }\n    .ngb-dp-month-name {\n      font-size: larger;\n      height: 2rem;\n      line-height: 2rem;\n      text-align: center;\n    }\n    /deep/ .ngb-dp-month + .ngb-dp-month > ngb-datepicker-month-view > .ngb-dp-week {\n      padding-left: 1rem;\n    }\n    /deep/ .ngb-dp-month + .ngb-dp-month > .ngb-dp-month-name {\n      padding-left: 1rem;\n    }\n    /deep/ .ngb-dp-month:last-child .ngb-dp-week {\n      padding-right: .25rem;\n    }\n    /deep/ .ngb-dp-month:first-child .ngb-dp-week {\n      padding-left: .25rem;\n    }\n    /deep/ .ngb-dp-month > ngb-datepicker-month-view > .ngb-dp-week:last-child {\n      padding-bottom: .25rem;\n    }\n    .ngb-dp-months {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n    }\n  "],template:'\n    <ng-template #dt let-date="date" let-currentMonth="currentMonth" let-selected="selected" let-disabled="disabled" let-focused="focused">\n      <div ngbDatepickerDayView\n        [date]="date"\n        [currentMonth]="currentMonth"\n        [selected]="selected"\n        [disabled]="disabled"\n        [focused]="focused">\n      </div>\n    </ng-template>\n\n    <div class="ngb-dp-header bg-light">\n      <ngb-datepicker-navigation *ngIf="navigation !== \'none\'"\n        [date]="model.firstDate"\n        [months]="model.months"\n        [disabled]="model.disabled"\n        [showSelect]="model.navigation === \'select\'"\n        [prevDisabled]="model.prevDisabled"\n        [nextDisabled]="model.nextDisabled"\n        [selectBoxes]="model.selectBoxes"\n        (navigate)="onNavigateEvent($event)"\n        (select)="onNavigateDateSelect($event)">\n      </ngb-datepicker-navigation>\n    </div>\n\n    <div class="ngb-dp-months">\n      <ng-template ngFor let-month [ngForOf]="model.months" let-i="index">\n        <div class="ngb-dp-month d-block">\n          <div *ngIf="navigation === \'none\' || (displayMonths > 1 && navigation === \'select\')"\n                class="ngb-dp-month-name bg-light">\n            {{ i18n.getMonthFullName(month.number) }} {{ month.year }}\n          </div>\n          <ngb-datepicker-month-view\n            [month]="month"\n            [dayTemplate]="dayTemplate || dt"\n            [showWeekdays]="showWeekdays"\n            [showWeekNumbers]="showWeekNumbers"\n            [outsideDays]="(displayMonths === 1 ? outsideDays : \'hidden\')"\n            (select)="onDateSelect($event)">\n          </ngb-datepicker-month-view>\n        </div>\n      </ng-template>\n    </div>\n  ',providers:[y,l.NgbDatepickerService,u.NgbDatepickerKeyMapService]}),i("design:paramtypes",[u.NgbDatepickerKeyMapService,l.NgbDatepickerService,s.NgbCalendar,g.NgbDatepickerI18n,d.NgbDatepickerConfig,o.ChangeDetectorRef,o.ElementRef,f.NgbDateAdapter])],e)}();t.NgbDatepicker=b},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),a=n(3),s=n(0),c=n(1),l=n(77),u=n(40),p=n(78),h=function(){function e(e){this._calendar=e,this._model$=new l.Subject,this._select$=new l.Subject,this._state={disabled:!1,displayMonths:1,firstDayOfWeek:1,focusVisible:!1,months:[],navigation:"select",prevDisabled:!1,nextDisabled:!1,selectBoxes:{years:[],months:[]},selectedDate:null}}return Object.defineProperty(e.prototype,"model$",{get:function(){return p.filter.call(this._model$.asObservable(),function(e){return e.months.length>0})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"select$",{get:function(){return p.filter.call(this._select$.asObservable(),function(e){return null!==e})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"disabled",{set:function(e){this._state.disabled!==e&&this._nextState({disabled:e})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"displayMonths",{set:function(e){c.isInteger(e)&&e>0&&this._state.displayMonths!==e&&this._nextState({displayMonths:e})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"firstDayOfWeek",{set:function(e){c.isInteger(e)&&e>=0&&this._state.firstDayOfWeek!==e&&this._nextState({firstDayOfWeek:e})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"focusVisible",{set:function(e){this._state.focusVisible===e||this._state.disabled||this._nextState({focusVisible:e})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxDate",{set:function(e){(null==e||this._calendar.isValid(e)&&u.isChangedDate(this._state.maxDate,e))&&this._nextState({maxDate:e})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"markDisabled",{set:function(e){this._state.markDisabled!==e&&this._nextState({markDisabled:e})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"minDate",{set:function(e){(null==e||this._calendar.isValid(e)&&u.isChangedDate(this._state.minDate,e))&&this._nextState({minDate:e})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"navigation",{set:function(e){this._state.navigation!==e&&this._nextState({navigation:e})},enumerable:!0,configurable:!0}),e.prototype.focus=function(e){!this._state.disabled&&this._calendar.isValid(e)&&u.isChangedDate(this._state.focusDate,e)&&this._nextState({focusDate:e})},e.prototype.focusMove=function(e,t){this.focus(this._calendar.getNext(this._state.focusDate,e,t))},e.prototype.focusSelect=function(){u.isDateSelectable(this._state.focusDate,this._state.minDate,this._state.maxDate,this._state.disabled,this._state.markDisabled)&&this.select(this._state.focusDate,{emitEvent:!0})},e.prototype.open=function(e){var t=this.toValidDate(e,this._calendar.getToday());this._state.disabled||this._nextState({firstDate:t})},e.prototype.select=function(e,t){void 0===t&&(t={});var n=this.toValidDate(e,null);this._state.disabled||(u.isChangedDate(this._state.selectedDate,n)&&this._nextState({selectedDate:n}),t.emitEvent&&u.isDateSelectable(n,this._state.minDate,this._state.maxDate,this._state.disabled,this._state.markDisabled)&&this._select$.next(n))},e.prototype.toValidDate=function(e,t){var n=a.NgbDate.from(e);return void 0===t&&(t=this._calendar.getToday()),this._calendar.isValid(n)?n:t},e.prototype._nextState=function(e){var t=this._updateState(e);this._patchContexts(t),this._state=t,this._model$.next(this._state)},e.prototype._patchContexts=function(e){e.months.forEach(function(t){t.weeks.forEach(function(t){t.days.forEach(function(t){e.focusDate&&(t.context.focused=e.focusDate.equals(t.date)&&e.focusVisible),!0===e.disabled&&(t.context.disabled=!0),void 0!==e.selectedDate&&(t.context.selected=null!==e.selectedDate&&e.selectedDate.equals(t.date))})})})},e.prototype._updateState=function(e){var t=Object.assign({},this._state,e),n=t.firstDate;if(("minDate"in e||"maxDate"in e)&&(u.checkMinBeforeMax(t.minDate,t.maxDate),t.focusDate=u.checkDateInRange(t.focusDate,t.minDate,t.maxDate),t.firstDate=u.checkDateInRange(t.firstDate,t.minDate,t.maxDate),n=t.focusDate),"disabled"in e&&(t.focusVisible=!1),"selectedDate"in e&&0===this._state.months.length&&(n=t.selectedDate),"focusDate"in e&&(t.focusDate=u.checkDateInRange(t.focusDate,t.minDate,t.maxDate),n=t.focusDate,0!==t.months.length&&!t.focusDate.before(t.firstDate)&&!t.focusDate.after(t.lastDate)))return t;if("firstDate"in e&&(t.firstDate=u.checkDateInRange(t.firstDate,t.minDate,t.maxDate),n=t.firstDate),n){var r="firstDayOfWeek"in e||"markDisabled"in e||"minDate"in e||"maxDate"in e||"disabled"in e,i=u.buildMonths(this._calendar,t.months,n,t.minDate,t.maxDate,t.displayMonths,t.firstDayOfWeek,t.markDisabled,r);t.months=i,t.firstDate=i.length>0?i[0].firstDate:void 0,t.lastDate=i.length>0?i[i.length-1].lastDate:void 0,"selectedDate"in e&&null!==t.selectedDate&&(u.isDateSelectable(t.selectedDate,t.minDate,t.maxDate,t.disabled,t.markDisabled)||(t.selectedDate=null)),"firstDate"in e&&(void 0===t.focusDate||t.focusDate.before(t.firstDate)||t.focusDate.after(t.lastDate))&&(t.focusDate=n);var o=!this._state.firstDate||this._state.firstDate.year!==t.firstDate.year,a=!this._state.firstDate||this._state.firstDate.month!==t.firstDate.month;"select"===t.navigation?(("minDate"in e||"maxDate"in e||0===t.selectBoxes.years.length||o)&&(t.selectBoxes.years=u.generateSelectBoxYears(t.focusDate,t.minDate,t.maxDate)),("minDate"in e||"maxDate"in e||0===t.selectBoxes.months.length||o)&&(t.selectBoxes.months=u.generateSelectBoxMonths(this._calendar,t.focusDate,t.minDate,t.maxDate))):t.selectBoxes={years:[],months:[]},"arrows"!==t.navigation&&"select"!==t.navigation||!(a||o||"minDate"in e||"maxDate"in e||"disabled"in e)||(t.prevDisabled=t.disabled||u.prevMonthDisabled(this._calendar,t.firstDate,t.minDate),t.nextDisabled=t.disabled||u.nextMonthDisabled(this._calendar,t.lastDate,t.maxDate))}return t},e=r([s.Injectable(),i("design:paramtypes",[o.NgbCalendar])],e)}();t.NgbDatepickerService=h},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.displayMonths=1,this.firstDayOfWeek=1,this.navigation="select",this.outsideDays="visible",this.showWeekdays=!0,this.showWeekNumbers=!1}return e=r([i.Injectable()],e)}();t.NgbDatepickerConfig=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=function(){return function(){}}();t.NgbDateParserFormatter=a;var s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.parse=function(e){if(e){var t=e.trim().split("-");if(1===t.length&&o.isNumber(t[0]))return{year:o.toInteger(t[0]),month:null,day:null};if(2===t.length&&o.isNumber(t[0])&&o.isNumber(t[1]))return{year:o.toInteger(t[0]),month:o.toInteger(t[1]),day:null};if(3===t.length&&o.isNumber(t[0])&&o.isNumber(t[1])&&o.isNumber(t[2]))return{year:o.toInteger(t[0]),month:o.toInteger(t[1]),day:o.toInteger(t[2])}}return null},t.prototype.format=function(e){return e?e.year+"-"+(o.isNumber(e.month)?o.padNumber(e.month):"")+"-"+(o.isNumber(e.day)?o.padNumber(e.day):""):""},t}(a);t.NgbDateISOParserFormatter=s},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.autoClose=!0,this.placement="bottom-left"}return e=r([i.Injectable()],e)}();t.NgbDropdownConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.disabled=!1,this.boundaryLinks=!1,this.directionLinks=!0,this.ellipses=!0,this.maxSize=0,this.pageSize=10,this.rotate=!1}return e=r([i.Injectable()],e)}();t.NgbPaginationConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.placement="top",this.triggers="click"}return e=r([i.Injectable()],e)}();t.NgbPopoverConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.max=100,this.animated=!1,this.striped=!1,this.showValue=!1}return e=r([i.Injectable()],e)}();t.NgbProgressbarConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.max=10,this.readonly=!1,this.resettable=!1}return e=r([i.Injectable()],e)}();t.NgbRatingConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.justify="start",this.orientation="horizontal",this.type="tabs"}return e=r([i.Injectable()],e)}();t.NgbTabsetConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.meridian=!1,this.spinners=!0,this.seconds=!1,this.hourStep=1,this.minuteStep=1,this.secondStep=1,this.disabled=!1,this.readonlyInputs=!1,this.size="medium"}return e=r([i.Injectable()],e)}();t.NgbTimepickerConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.placement="top",this.triggers="hover"}return e=r([i.Injectable()],e)}();t.NgbTooltipConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(1),s=function(){function e(){this.activeIdx=0,this.focusFirst=!0,this.formatter=a.toString,this.selectEvent=new o.EventEmitter,this.activeChangeEvent=new o.EventEmitter}return e.prototype.hasActive=function(){return this.activeIdx>-1&&this.activeIdx<this.results.length},e.prototype.getActive=function(){return this.results[this.activeIdx]},e.prototype.markActive=function(e){this.activeIdx=e,this._activeChanged()},e.prototype.next=function(){this.activeIdx===this.results.length-1?this.activeIdx=this.focusFirst?(this.activeIdx+1)%this.results.length:-1:this.activeIdx++,this._activeChanged()},e.prototype.prev=function(){this.activeIdx<0?this.activeIdx=this.results.length-1:0===this.activeIdx?this.activeIdx=this.focusFirst?this.results.length-1:-1:this.activeIdx--,this._activeChanged()},e.prototype.select=function(e){this.selectEvent.emit(e)},e.prototype.ngOnInit=function(){this.activeIdx=this.focusFirst?0:-1,this._activeChanged()},e.prototype._activeChanged=function(){this.activeChangeEvent.emit(this.activeIdx>=0?this.id+"-"+this.activeIdx:void 0)},r([o.Input(),i("design:type",String)],e.prototype,"id",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"focusFirst",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"results",void 0),r([o.Input(),i("design:type",String)],e.prototype,"term",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"formatter",void 0),r([o.Input(),i("design:type",o.TemplateRef)],e.prototype,"resultTemplate",void 0),r([o.Output("select"),i("design:type",Object)],e.prototype,"selectEvent",void 0),r([o.Output("activeChange"),i("design:type",Object)],e.prototype,"activeChangeEvent",void 0),e=r([o.Component({selector:"ngb-typeahead-window",exportAs:"ngbTypeaheadWindow",host:{class:"dropdown-menu show",role:"listbox","[id]":"id"},template:'\n    <ng-template #rt let-result="result" let-term="term" let-formatter="formatter">\n      <ngb-highlight [result]="formatter(result)" [term]="term"></ngb-highlight>\n    </ng-template>\n    <ng-template ngFor [ngForOf]="results" let-result let-idx="index">\n      <button type="button" class="dropdown-item" role="option"\n        [id]="id + \'-\' + idx"\n        [class.active]="idx === activeIdx"\n        (mouseenter)="markActive(idx)"\n        (click)="select(result)">\n          <ng-template [ngTemplateOutlet]="resultTemplate || rt"\n          [ngTemplateOutletContext]="{result: result, term: term, formatter: formatter}"></ng-template>\n      </button>\n    </ng-template>\n  '})],e)}();t.NgbTypeaheadWindow=s},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){this.editable=!0,this.focusFirst=!0,this.showHint=!1,this.placement="bottom-left"}return e=r([i.Injectable()],e)}();t.NgbTypeaheadConfig=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(29),s=n(11),c=n(29);t.NgbAccordion=c.NgbAccordion,t.NgbPanel=c.NgbPanel,t.NgbPanelTitle=c.NgbPanelTitle,t.NgbPanelContent=c.NgbPanelContent;var l=n(11);t.NgbAccordionConfig=l.NgbAccordionConfig;var u=[a.NgbAccordion,a.NgbPanel,a.NgbPanelTitle,a.NgbPanelContent],p=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[s.NgbAccordionConfig]}},e=t=r([i.NgModule({declarations:u,exports:u,imports:[o.CommonModule]})],e);var t}();t.NgbAccordionModule=p},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(1),s=n(11),c=0,l=function(){function e(e){this.templateRef=e}return e=r([o.Directive({selector:"ng-template[ngbPanelTitle]"}),i("design:paramtypes",[o.TemplateRef])],e)}();t.NgbPanelTitle=l;var u=function(){function e(e){this.templateRef=e}return e=r([o.Directive({selector:"ng-template[ngbPanelContent]"}),i("design:paramtypes",[o.TemplateRef])],e)}();t.NgbPanelContent=u;var p=function(){function e(){this.disabled=!1,this.id="ngb-panel-"+c++,this.isOpen=!1}return e.prototype.ngAfterContentChecked=function(){this.titleTpl=this.titleTpls.first,this.contentTpl=this.contentTpls.first},r([o.Input(),i("design:type",Object)],e.prototype,"disabled",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"id",void 0),r([o.Input(),i("design:type",String)],e.prototype,"title",void 0),r([o.Input(),i("design:type",String)],e.prototype,"type",void 0),r([o.ContentChildren(l,{descendants:!1}),i("design:type",o.QueryList)],e.prototype,"titleTpls",void 0),r([o.ContentChildren(u,{descendants:!1}),i("design:type",o.QueryList)],e.prototype,"contentTpls",void 0),e=r([o.Directive({selector:"ngb-panel"})],e)}();t.NgbPanel=p;var h=function(){function e(e){this.activeIds=[],this.destroyOnHide=!0,this.panelChange=new o.EventEmitter,this.type=e.type,this.closeOtherPanels=e.closeOthers}return e.prototype.toggle=function(e){var t=this.panels.find(function(t){return t.id===e});if(t&&!t.disabled){var n=!1;this.panelChange.emit({panelId:e,nextState:!t.isOpen,preventDefault:function(){n=!0}}),n||(t.isOpen=!t.isOpen,this.closeOtherPanels&&this._closeOthers(e),this._updateActiveIds())}},e.prototype.ngAfterContentChecked=function(){var e=this;a.isString(this.activeIds)&&(this.activeIds=this.activeIds.split(/\s*,\s*/)),this.panels.forEach(function(t){return t.isOpen=!t.disabled&&e.activeIds.indexOf(t.id)>-1}),this.activeIds.length>1&&this.closeOtherPanels&&(this._closeOthers(this.activeIds[0]),this._updateActiveIds())},e.prototype._closeOthers=function(e){this.panels.forEach(function(t){t.id!==e&&(t.isOpen=!1)})},e.prototype._updateActiveIds=function(){this.activeIds=this.panels.filter(function(e){return e.isOpen&&!e.disabled}).map(function(e){return e.id})},r([o.ContentChildren(p),i("design:type",o.QueryList)],e.prototype,"panels",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"activeIds",void 0),r([o.Input("closeOthers"),i("design:type",Boolean)],e.prototype,"closeOtherPanels",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"destroyOnHide",void 0),r([o.Input(),i("design:type",String)],e.prototype,"type",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"panelChange",void 0),e=r([o.Component({selector:"ngb-accordion",exportAs:"ngbAccordion",host:{role:"tablist","[attr.aria-multiselectable]":"!closeOtherPanels"},template:'\n    <ng-template ngFor let-panel [ngForOf]="panels">\n      <div class="card">\n        <div role="tab" id="{{panel.id}}-header"\n          [class]="\'card-header \' + (panel.type ? \'bg-\'+panel.type: type ? \'bg-\'+type : \'\')" [class.active]="panel.isOpen">\n          <a href (click)="!!toggle(panel.id)" [class.text-muted]="panel.disabled" [attr.tabindex]="(panel.disabled ? \'-1\' : null)"\n            [attr.aria-expanded]="panel.isOpen" [attr.aria-controls]="(panel.isOpen ? panel.id : null)"\n            [attr.aria-disabled]="panel.disabled">\n            {{panel.title}}<ng-template [ngTemplateOutlet]="panel.titleTpl?.templateRef"></ng-template>\n          </a>\n        </div>\n        <div id="{{panel.id}}" role="tabpanel" [attr.aria-labelledby]="panel.id + \'-header\'"\n             class="card-body collapse {{panel.isOpen ? \'show\' : null}}" *ngIf="!destroyOnHide || panel.isOpen">\n             <ng-template [ngTemplateOutlet]="panel.contentTpl.templateRef"></ng-template>\n        </div>\n      </div>\n    </ng-template>\n  '}),i("design:paramtypes",[s.NgbAccordionConfig])],e)}();t.NgbAccordion=h},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(31),s=n(12),c=n(31);t.NgbAlert=c.NgbAlert;var l=n(12);t.NgbAlertConfig=l.NgbAlertConfig;var u=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[s.NgbAlertConfig]}},e=t=r([i.NgModule({declarations:[a.NgbAlert],exports:[a.NgbAlert],imports:[o.CommonModule],entryComponents:[a.NgbAlert]})],e);var t}();t.NgbAlertModule=u},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(12),s=function(){function e(e){this.close=new o.EventEmitter,this.dismissible=e.dismissible,this.type=e.type}return e.prototype.closeHandler=function(){this.close.emit(null)},r([o.Input(),i("design:type",Boolean)],e.prototype,"dismissible",void 0),r([o.Input(),i("design:type",String)],e.prototype,"type",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"close",void 0),e=r([o.Component({selector:"ngb-alert",changeDetection:o.ChangeDetectionStrategy.OnPush,template:'\n    <div [class]="\'alert alert-\' + type + (dismissible ? \' alert-dismissible\' : \'\')" role="alert">\n      <button *ngIf="dismissible" type="button" class="close" aria-label="Close" (click)="closeHandler()">\n            <span aria-hidden="true">&times;</span>\n      </button>\n      <ng-content></ng-content>\n    </div>\n    '}),i("design:paramtypes",[a.NgbAlertConfig])],e)}();t.NgbAlert=s},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(8),a=n(33),s=n(34),c=n(8);t.NgbButtonLabel=c.NgbButtonLabel;var l=n(33);t.NgbCheckBox=l.NgbCheckBox;var u=n(34);t.NgbRadio=u.NgbRadio,t.NgbRadioGroup=u.NgbRadioGroup;var p=[o.NgbButtonLabel,a.NgbCheckBox,s.NgbRadioGroup,s.NgbRadio],h=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[]}},e=t=r([i.NgModule({declarations:p,exports:p})],e);var t}();t.NgbButtonsModule=h},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(4),s=n(8),c={provide:a.NG_VALUE_ACCESSOR,useExisting:o.forwardRef(function(){return l}),multi:!0},l=function(){function e(e){this._label=e,this.disabled=!1,this.valueChecked=!0,this.valueUnChecked=!1,this.onChange=function(e){},this.onTouched=function(){}}return Object.defineProperty(e.prototype,"focused",{set:function(e){this._label.focused=e,e||this.onTouched()},enumerable:!0,configurable:!0}),e.prototype.onInputChange=function(e){var t=e.target.checked?this.valueChecked:this.valueUnChecked;this.onChange(t),this.onTouched(),this.writeValue(t)},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.setDisabledState=function(e){this.disabled=e,this._label.disabled=e},e.prototype.writeValue=function(e){this.checked=e===this.valueChecked,this._label.active=this.checked},r([o.Input(),i("design:type",Object)],e.prototype,"disabled",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"valueChecked",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"valueUnChecked",void 0),e=r([o.Directive({selector:"[ngbButton][type=checkbox]",host:{autocomplete:"off","[checked]":"checked","[disabled]":"disabled","(change)":"onInputChange($event)","(focus)":"focused = true","(blur)":"focused = false"},providers:[c]}),i("design:paramtypes",[s.NgbButtonLabel])],e)}();t.NgbCheckBox=l},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(4),s=n(8),c={provide:a.NG_VALUE_ACCESSOR,useExisting:o.forwardRef(function(){return u}),multi:!0},l=0,u=function(){function e(){this._radios=new Set,this._value=null,this.name="ngb-radio-"+l++,this.onChange=function(e){},this.onTouched=function(){}}return Object.defineProperty(e.prototype,"disabled",{get:function(){return this._disabled},set:function(e){this.setDisabledState(e)},enumerable:!0,configurable:!0}),e.prototype.onRadioChange=function(e){this.writeValue(e.value),this.onChange(e.value)},e.prototype.onRadioValueUpdate=function(){this._updateRadiosValue()},e.prototype.register=function(e){this._radios.add(e)},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.setDisabledState=function(e){this._disabled=e,this._updateRadiosDisabled()},e.prototype.unregister=function(e){this._radios.delete(e)},e.prototype.writeValue=function(e){this._value=e,this._updateRadiosValue()},e.prototype._updateRadiosValue=function(){var e=this;this._radios.forEach(function(t){return t.updateValue(e._value)})},e.prototype._updateRadiosDisabled=function(){this._radios.forEach(function(e){return e.updateDisabled()})},r([o.Input(),i("design:type",Object)],e.prototype,"name",void 0),e=r([o.Directive({selector:"[ngbRadioGroup]",host:{role:"group"},providers:[c]})],e)}();t.NgbRadioGroup=u;var p=function(){function e(e,t,n,r){this._group=e,this._label=t,this._renderer=n,this._element=r,this._value=null,this._group.register(this)}return Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(e){this._value=e;var t=e?e.toString():"";this._renderer.setProperty(this._element.nativeElement,"value",t),this._group.onRadioValueUpdate()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"disabled",{get:function(){return this._group.disabled||this._disabled},set:function(e){this._disabled=!1!==e,this.updateDisabled()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"focused",{set:function(e){this._label&&(this._label.focused=e),e||this._group.onTouched()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"checked",{get:function(){return this._checked},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nameAttr",{get:function(){return this.name||this._group.name},enumerable:!0,configurable:!0}),e.prototype.ngOnDestroy=function(){this._group.unregister(this)},e.prototype.onChange=function(){this._group.onRadioChange(this)},e.prototype.updateValue=function(e){this._checked=this.value===e,this._label.active=this._checked},e.prototype.updateDisabled=function(){this._label.disabled=this.disabled},r([o.Input(),i("design:type",String)],e.prototype,"name",void 0),r([o.Input("value"),i("design:type",Object),i("design:paramtypes",[Object])],e.prototype,"value",null),r([o.Input("disabled"),i("design:type",Boolean),i("design:paramtypes",[Boolean])],e.prototype,"disabled",null),e=r([o.Directive({selector:"[ngbButton][type=radio]",host:{"[checked]":"checked","[disabled]":"disabled","[name]":"nameAttr","(change)":"onChange()","(focus)":"focused = true","(blur)":"focused = false"}}),i("design:paramtypes",[u,s.NgbButtonLabel,o.Renderer2,o.ElementRef])],e)}();t.NgbRadio=p},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(36),s=n(13),c=n(36);t.NgbCarousel=c.NgbCarousel,t.NgbSlide=c.NgbSlide;var l=n(13);t.NgbCarouselConfig=l.NgbCarouselConfig;var u=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[s.NgbCarouselConfig]}},e=t=r([i.NgModule({declarations:a.NGB_CAROUSEL_DIRECTIVES,exports:a.NGB_CAROUSEL_DIRECTIVES,imports:[o.CommonModule]})],e);var t}();t.NgbCarouselModule=u},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(13),s=0,c=function(){function e(e){this.tplRef=e,this.id="ngb-slide-"+s++}return r([o.Input(),i("design:type",Object)],e.prototype,"id",void 0),e=r([o.Directive({selector:"ng-template[ngbSlide]"}),i("design:paramtypes",[o.TemplateRef])],e)}();t.NgbSlide=c;var l,u=function(){function e(e){this.slide=new o.EventEmitter,this.interval=e.interval,this.wrap=e.wrap,this.keyboard=e.keyboard}return e.prototype.ngAfterContentChecked=function(){var e=this._getSlideById(this.activeId);this.activeId=e?e.id:this.slides.length?this.slides.first.id:null},e.prototype.ngOnInit=function(){this._startTimer()},e.prototype.ngOnChanges=function(e){"interval"in e&&!e.interval.isFirstChange()&&this._restartTimer()},e.prototype.ngOnDestroy=function(){clearInterval(this._slideChangeInterval)},e.prototype.select=function(e){this.cycleToSelected(e,this.getSlideEventDirection(this.activeId,e)),this._restartTimer()},e.prototype.prev=function(){this.cycleToPrev(),this._restartTimer()},e.prototype.next=function(){this.cycleToNext(),this._restartTimer()},e.prototype.pause=function(){this._stopTimer()},e.prototype.cycle=function(){this._startTimer()},e.prototype.cycleToNext=function(){this.cycleToSelected(this._getNextSlide(this.activeId),l.LEFT)},e.prototype.cycleToPrev=function(){this.cycleToSelected(this._getPrevSlide(this.activeId),l.RIGHT)},e.prototype.cycleToSelected=function(e,t){var n=this._getSlideById(e);n&&(n.id!==this.activeId&&this.slide.emit({prev:this.activeId,current:n.id,direction:t}),this.activeId=n.id)},e.prototype.getSlideEventDirection=function(e,t){return this._getSlideIdxById(e)>this._getSlideIdxById(t)?l.RIGHT:l.LEFT},e.prototype.keyPrev=function(){this.keyboard&&this.prev()},e.prototype.keyNext=function(){this.keyboard&&this.next()},e.prototype._restartTimer=function(){this._stopTimer(),this._startTimer()},e.prototype._startTimer=function(){var e=this;this.interval>0&&(this._slideChangeInterval=setInterval(function(){e.cycleToNext()},this.interval))},e.prototype._stopTimer=function(){clearInterval(this._slideChangeInterval)},e.prototype._getSlideById=function(e){var t=this.slides.filter(function(t){return t.id===e});return t.length?t[0]:null},e.prototype._getSlideIdxById=function(e){return this.slides.toArray().indexOf(this._getSlideById(e))},e.prototype._getNextSlide=function(e){var t=this.slides.toArray(),n=this._getSlideIdxById(e);return n===t.length-1?this.wrap?t[0].id:t[t.length-1].id:t[n+1].id},e.prototype._getPrevSlide=function(e){var t=this.slides.toArray(),n=this._getSlideIdxById(e);return 0===n?this.wrap?t[t.length-1].id:t[0].id:t[n-1].id},r([o.ContentChildren(c),i("design:type",o.QueryList)],e.prototype,"slides",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"interval",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"wrap",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"keyboard",void 0),r([o.Input(),i("design:type",String)],e.prototype,"activeId",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"slide",void 0),e=r([o.Component({selector:"ngb-carousel",exportAs:"ngbCarousel",host:{class:"carousel slide","[style.display]":'"block"',tabIndex:"0","(mouseenter)":"pause()","(mouseleave)":"cycle()","(keydown.arrowLeft)":"keyPrev()","(keydown.arrowRight)":"keyNext()"},template:'\n    <ol class="carousel-indicators">\n      <li *ngFor="let slide of slides" [id]="slide.id" [class.active]="slide.id === activeId"\n          (click)="cycleToSelected(slide.id, getSlideEventDirection(activeId, slide.id))"></li>\n    </ol>\n    <div class="carousel-inner">\n      <div *ngFor="let slide of slides" class="carousel-item" [class.active]="slide.id === activeId">\n        <ng-template [ngTemplateOutlet]="slide.tplRef"></ng-template>\n      </div>\n    </div>\n    <a class="carousel-control-prev" role="button" (click)="cycleToPrev()">\n      <span class="carousel-control-prev-icon" aria-hidden="true"></span>\n      <span class="sr-only">Previous</span>\n    </a>\n    <a class="carousel-control-next" role="button" (click)="cycleToNext()">\n      <span class="carousel-control-next-icon" aria-hidden="true"></span>\n      <span class="sr-only">Next</span>\n    </a>\n    '}),i("design:paramtypes",[a.NgbCarouselConfig])],e)}();t.NgbCarousel=u,function(e){e[e.LEFT="left"]="LEFT",e[e.RIGHT="right"]="RIGHT"}(l=t.NgbSlideEventDirection||(t.NgbSlideEventDirection={})),t.NGB_CAROUSEL_DIRECTIVES=[u,c]},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(38),a=n(38);t.NgbCollapse=a.NgbCollapse;var s=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[]}},e=t=r([i.NgModule({declarations:[o.NgbCollapse],exports:[o.NgbCollapse]})],e);var t}();t.NgbCollapseModule=s},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=function(){function e(){this.collapsed=!1}return r([o.Input("ngbCollapse"),i("design:type",Object)],e.prototype,"collapsed",void 0),e=r([o.Directive({selector:"[ngbCollapse]",exportAs:"ngbCollapse",host:{"[class.collapse]":"true","[class.show]":"!collapsed"}})],e)}();t.NgbCollapse=a},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(14),s=n(42),c=n(43),l=n(44),u=n(4),p=n(45),h=n(6),d=n(5),f=n(17),g=n(9),m=n(46),y=n(16),b=n(14);t.NgbDatepicker=b.NgbDatepicker;var v=n(44);t.NgbInputDatepicker=v.NgbInputDatepicker;var _=n(5);t.NgbCalendar=_.NgbCalendar;var w=n(47);t.NgbCalendarIslamicCivil=w.NgbCalendarIslamicCivil;var E=n(80);t.NgbCalendarIslamicUmalqura=E.NgbCalendarIslamicUmalqura;var T=n(42);t.NgbDatepickerMonthView=T.NgbDatepickerMonthView;var k=n(45);t.NgbDatepickerDayView=k.NgbDatepickerDayView;var N=n(43);t.NgbDatepickerNavigation=N.NgbDatepickerNavigation;var S=n(46);t.NgbDatepickerNavigationSelect=S.NgbDatepickerNavigationSelect;var R=n(16);t.NgbDatepickerConfig=R.NgbDatepickerConfig;var C=n(6);t.NgbDatepickerI18n=C.NgbDatepickerI18n;var x=n(9);t.NgbDateAdapter=x.NgbDateAdapter;var O=n(17);t.NgbDateParserFormatter=O.NgbDateParserFormatter;var D=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[{provide:d.NgbCalendar,useClass:d.NgbCalendarGregorian},{provide:h.NgbDatepickerI18n,useClass:h.NgbDatepickerI18nDefault},{provide:f.NgbDateParserFormatter,useClass:f.NgbDateISOParserFormatter},{provide:g.NgbDateAdapter,useClass:g.NgbDateStructAdapter},y.NgbDatepickerConfig]}},e=t=r([i.NgModule({declarations:[a.NgbDatepicker,s.NgbDatepickerMonthView,c.NgbDatepickerNavigation,m.NgbDatepickerNavigationSelect,p.NgbDatepickerDayView,l.NgbInputDatepicker],exports:[a.NgbDatepicker,l.NgbInputDatepicker],imports:[o.CommonModule,u.FormsModule],entryComponents:[a.NgbDatepicker]})],e);var t}();t.NgbDatepickerModule=D},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(1);function o(e,t){return!e&&!t||!!e&&!!t&&e.equals(t)}function a(e,t,n,i,o,a){var c={firstDate:null,lastDate:null,number:t.month,year:t.year,weeks:[],weekdays:[]};t=s(e,t,o);for(var l=0;l<e.getWeeksPerMonth();l++){for(var u=[],p=0;p<e.getDaysPerWeek();p++){0===l&&c.weekdays.push(e.getWeekday(t));var h=new r.NgbDate(t.year,t.month,t.day),d=e.getNext(h),f=!!(n&&h.before(n)||i&&h.after(i));!f&&a&&(f=a(h,{month:c.number,year:c.year})),null===c.firstDate&&h.month===c.number&&(c.firstDate=h),h.month===c.number&&d.month!==c.number&&(c.lastDate=h),u.push({date:h,context:{date:{year:h.year,month:h.month,day:h.day},currentMonth:c.number,disabled:f,focused:!1,selected:!1}}),t=d}c.weeks.push({number:e.getWeekNumber(u.map(function(e){return r.NgbDate.from(e.date)}),o),days:u})}return c}function s(e,t,n){for(var i=t.month,o=new r.NgbDate(t.year,t.month,t.day),a=e.getPrev(o);!(o.month!==i&&n===e.getWeekday(o)||o.month!==a.month&&n===e.getWeekday(o));)o=new r.NgbDate(a.year,a.month,a.day),a=e.getPrev(a);return o}t.isChangedDate=function(e,t){return!o(e,t)},t.dateComparator=o,t.checkMinBeforeMax=function(e,t){if(t&&e&&t.before(e))throw new Error("'maxDate' "+t+" should be greater than 'minDate' "+e)},t.checkDateInRange=function(e,t,n){return e&&t&&e.before(t)?r.NgbDate.from(t):e&&n&&e.after(n)?r.NgbDate.from(n):e},t.isDateSelectable=function(e,t,n,r,o){return!(!i.isDefined(e)||r||o&&o(e,{year:e.year,month:e.month})||t&&e.before(t)||n&&e.after(n))},t.generateSelectBoxMonths=function(e,t,n,r){if(!t)return[];var i=e.getMonths();if(n&&t.year===n.year){var o=i.findIndex(function(e){return e===n.month});i=i.slice(o)}r&&t.year===r.year&&(o=i.findIndex(function(e){return e===r.month}),i=i.slice(0,o+1));return i},t.generateSelectBoxYears=function(e,t,n){if(!e)return[];var r=t&&t.year||e.year-10,i=n&&n.year||e.year+10;return Array.from({length:i-r+1},function(e,t){return r+t})},t.nextMonthDisabled=function(e,t,n){return n&&e.getNext(t,"m").after(n)},t.prevMonthDisabled=function(e,t,n){var r=e.getPrev(t,"m");return n&&(r.year===n.year&&r.month<n.month||r.year<n.year&&1===n.month)},t.buildMonths=function(e,t,n,r,i,o,s,c,l){for(var u=[],p=function(o){var p=e.getNext(n,"m",o),h=t.findIndex(function(e){return e.firstDate.equals(p)});l||-1===h?u.push(a(e,p,r,i,s,c)):u.push(t[h])},h=0;h<o;h++)p(h);return u},t.buildMonth=a,t.getFirstViewDate=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.PREV=0]="PREV",e[e.NEXT=1]="NEXT"}(t.NavigationEvent||(t.NavigationEvent={}))},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(3),s=n(6),c=function(){function e(e){this.i18n=e,this.select=new o.EventEmitter}return e.prototype.doSelect=function(e){e.context.disabled||this.isHidden(e)||this.select.emit(a.NgbDate.from(e.date))},e.prototype.isCollapsed=function(e){return"collapsed"===this.outsideDays&&e.days[0].date.month!==this.month.number&&e.days[e.days.length-1].date.month!==this.month.number},e.prototype.isHidden=function(e){return("hidden"===this.outsideDays||"collapsed"===this.outsideDays)&&this.month.number!==e.date.month},r([o.Input(),i("design:type",o.TemplateRef)],e.prototype,"dayTemplate",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"month",void 0),r([o.Input(),i("design:type",String)],e.prototype,"outsideDays",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"showWeekdays",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"showWeekNumbers",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"select",void 0),e=r([o.Component({selector:"ngb-datepicker-month-view",host:{class:"d-block"},styles:["\n    .ngb-dp-weekday, .ngb-dp-week-number {\n      line-height: 2rem;\n    }\n    .ngb-dp-weekday {\n      color: #5bc0de;\n    }\n    .ngb-dp-week {\n        border-radius: 0.25rem;\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n    }\n    .ngb-dp-weekdays {\n      border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n      border-radius: 0rem;\n    }\n    .ngb-dp-day, .ngb-dp-weekday, .ngb-dp-week-number {\n      width: 2rem;\n      height: 2rem;\n    }\n    .ngb-dp-day {\n      cursor: pointer;\n    }\n    .ngb-dp-day.disabled, .ngb-dp-day.hidden {\n      cursor: default;\n    }\n  "],template:'\n    <div *ngIf="showWeekdays" class="ngb-dp-week ngb-dp-weekdays bg-light">\n      <div *ngIf="showWeekNumbers" class="ngb-dp-weekday ngb-dp-showweek"></div>\n      <div *ngFor="let w of month.weekdays" class="ngb-dp-weekday small text-center font-italic">\n        {{ i18n.getWeekdayShortName(w) }}\n      </div>\n    </div>\n    <ng-template ngFor let-week [ngForOf]="month.weeks">\n      <div *ngIf="!isCollapsed(week)" class="ngb-dp-week">\n        <div *ngIf="showWeekNumbers" class="ngb-dp-week-number small text-center font-italic text-muted">{{ week.number }}</div>\n        <div *ngFor="let day of week.days" (click)="doSelect(day)" class="ngb-dp-day" [class.disabled]="day.context.disabled"\n         [class.hidden]="isHidden(day)">\n          <ng-template [ngIf]="!isHidden(day)">\n            <ng-template [ngTemplateOutlet]="dayTemplate" [ngTemplateOutletContext]="day.context"></ng-template>\n          </ng-template>\n        </div>\n      </div>\n    </ng-template>\n  '}),i("design:paramtypes",[s.NgbDatepickerI18n])],e)}();t.NgbDatepickerMonthView=c},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(41),s=n(3),c=n(6),l=function(){function e(e){this.i18n=e,this.navigation=a.NavigationEvent,this.months=[],this.navigate=new o.EventEmitter,this.select=new o.EventEmitter}return r([o.Input(),i("design:type",s.NgbDate)],e.prototype,"date",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"disabled",void 0),r([o.Input(),i("design:type",Array)],e.prototype,"months",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"showSelect",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"prevDisabled",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"nextDisabled",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"selectBoxes",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"navigate",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"select",void 0),e=r([o.Component({selector:"ngb-datepicker-navigation",changeDetection:o.ChangeDetectionStrategy.OnPush,styles:["\n    :host {\n      height: 2rem;\n      line-height: 1.85rem;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n    }\n    .ngb-dp-navigation-chevron::before {\n      border-style: solid;\n      border-width: 0.2em 0.2em 0 0;\n      content: '';\n      display: inline-block;\n      width: 0.75em;\n      height: 0.75em;\n      transform: rotate(-135deg);\n      -webkit-transform: rotate(-135deg);\n      -ms-transform: rotate(-135deg);\n    }\n    .right .ngb-dp-navigation-chevron:before {\n      -webkit-transform: rotate(45deg);\n      -ms-transform: rotate(45deg);\n      transform: rotate(45deg);\n    }\n    .ngb-dp-arrow {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-flex: 1 1 auto;\n      -ms-flex: 1 1 auto;\n      flex-basis: auto;\n      flex-grow: 1;\n      padding-right: 0px;\n      padding-left: 0px;\n      margin: 0px;\n      width: 2rem;\n      height: 2rem;\n    }\n    .ngb-dp-arrow.right {\n      -webkit-box-pack: end;\n      -ms-flex-pack: end;\n      justify-content: flex-end;\n    }\n    .ngb-dp-arrow-btn {\n      padding: 0rem 1rem;\n    }\n    .ngb-dp-month-name {\n      font-size: larger;\n      height: 2rem;\n      line-height: 2rem;\n      text-align: center;\n    }\n    .ngb-dp-navigation-select {\n      -webkit-box-flex: 1 1 9rem;\n      -ms-flex:  1 1 9rem;\n      flex-grow: 1;\n      flex-basis: 9rem;\n    }\n  "],template:'\n  <div class="ngb-dp-arrow">\n    <button type="button" class="btn btn-link ngb-dp-arrow-btn"\n            (click)="!!navigate.emit(navigation.PREV)" [disabled]="prevDisabled" tabindex="-1">\n      <span class="ngb-dp-navigation-chevron"></span>\n    </button>\n  </div>\n    <ngb-datepicker-navigation-select *ngIf="showSelect" class="d-block ngb-dp-navigation-select"\n      [date]="date"\n      [disabled] = "disabled"\n      [months]="selectBoxes.months"\n      [years]="selectBoxes.years"\n      (select)="select.emit($event)">\n    </ngb-datepicker-navigation-select>\n\n    <ng-template *ngIf="!showSelect" ngFor let-month [ngForOf]="months" let-i="index">\n      <div class="ngb-dp-arrow" *ngIf="i > 0"></div>\n      <div class="ngb-dp-month-name d-block">\n        {{ i18n.getMonthFullName(month.number) }} {{ month.year }}\n      </div>\n      <div class="ngb-dp-arrow" *ngIf="i !== months.length - 1"></div>\n    </ng-template>\n    <div class="ngb-dp-arrow right">\n    <button type="button" class="btn btn-link ngb-dp-arrow-btn"\n            (click)="!!navigate.emit(navigation.NEXT)" [disabled]="nextDisabled" tabindex="-1">\n      <span class="ngb-dp-navigation-chevron"></span>\n    </button>\n    </div>\n    '}),i("design:paramtypes",[c.NgbDatepickerI18n])],e)}();t.NgbDatepickerNavigation=l},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(4),s=n(3),c=n(14),l=n(17),u=n(7),p=n(9),h=n(5),d=n(15),f={provide:a.NG_VALUE_ACCESSOR,useExisting:o.forwardRef(function(){return m}),multi:!0},g={provide:a.NG_VALIDATORS,useExisting:o.forwardRef(function(){return m}),multi:!0},m=function(){function e(e,t,n,r,i,a,s,c,l){var p=this;this._parserFormatter=e,this._elRef=t,this._vcRef=n,this._renderer=r,this._cfr=i,this._service=s,this._calendar=c,this._ngbDateAdapter=l,this._cRef=null,this._disabled=!1,this.placement="bottom-left",this.navigate=new o.EventEmitter,this._onChange=function(e){},this._onTouched=function(){},this._validatorChange=function(){},this._zoneSubscription=a.onStable.subscribe(function(){p._cRef&&u.positionElements(p._elRef.nativeElement,p._cRef.location.nativeElement,p.placement,"body"===p.container)})}return Object.defineProperty(e.prototype,"disabled",{get:function(){return this._disabled},set:function(e){this._disabled=""===e||e&&"false"!==e,this.isOpen()&&this._cRef.instance.setDisabledState(this._disabled)},enumerable:!0,configurable:!0}),e.prototype.registerOnChange=function(e){this._onChange=e},e.prototype.registerOnTouched=function(e){this._onTouched=e},e.prototype.registerOnValidatorChange=function(e){this._validatorChange=e},e.prototype.setDisabledState=function(e){this.disabled=e},e.prototype.validate=function(e){var t=e.value;if(null===t||void 0===t)return null;var n=this._fromDateStruct(this._ngbDateAdapter.fromModel(t));return this._calendar.isValid(n)?this.minDate&&n.before(s.NgbDate.from(this.minDate))?{ngbDate:{requiredBefore:this.minDate}}:this.maxDate&&n.after(s.NgbDate.from(this.maxDate))?{ngbDate:{requiredAfter:this.maxDate}}:void 0:{ngbDate:{invalid:e.value}}},e.prototype.writeValue=function(e){this._model=this._fromDateStruct(this._ngbDateAdapter.fromModel(e)),this._writeModelValue(this._model)},e.prototype.manualDateChange=function(e,t){void 0===t&&(t=!1),this._model=this._fromDateStruct(this._parserFormatter.parse(e)),this._onChange(this._model?this._ngbDateAdapter.toModel(this._model):""===e?null:e),t&&this._model&&this._writeModelValue(this._model)},e.prototype.isOpen=function(){return!!this._cRef},e.prototype.open=function(){var e=this;if(!this.isOpen()){var t=this._cfr.resolveComponentFactory(c.NgbDatepicker);this._cRef=this._vcRef.createComponent(t),this._applyPopupStyling(this._cRef.location.nativeElement),this._applyDatepickerInputs(this._cRef.instance),this._subscribeForDatepickerOutputs(this._cRef.instance),this._cRef.instance.ngOnInit(),this._cRef.instance.writeValue(this._ngbDateAdapter.toModel(this._model)),this._cRef.instance.registerOnChange(function(t){e.writeValue(t),e._onChange(t),e.close()}),this._cRef.instance.focus(),this._cRef.instance.setDisabledState(this.disabled),"body"===this.container&&window.document.querySelector(this.container).appendChild(this._cRef.location.nativeElement)}},e.prototype.close=function(){this.isOpen()&&(this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView)),this._cRef=null)},e.prototype.toggle=function(){this.isOpen()?this.close():this.open()},e.prototype.navigateTo=function(e){this.isOpen()&&this._cRef.instance.navigateTo(e)},e.prototype.onBlur=function(){this._onTouched()},e.prototype.ngOnChanges=function(e){(e.minDate||e.maxDate)&&this._validatorChange()},e.prototype.ngOnDestroy=function(){this.close(),this._zoneSubscription.unsubscribe()},e.prototype._applyDatepickerInputs=function(e){var t=this;["dayTemplate","displayMonths","firstDayOfWeek","markDisabled","minDate","maxDate","navigation","outsideDays","showNavigation","showWeekdays","showWeekNumbers"].forEach(function(n){void 0!==t[n]&&(e[n]=t[n])}),e.startDate=this.startDate||this._model},e.prototype._applyPopupStyling=function(e){this._renderer.addClass(e,"dropdown-menu"),this._renderer.setStyle(e,"padding","0"),this._renderer.addClass(e,"show")},e.prototype._subscribeForDatepickerOutputs=function(e){var t=this;e.navigate.subscribe(function(e){return t.navigate.emit(e)}),e.select.subscribe(function(){t.close()})},e.prototype._writeModelValue=function(e){this._renderer.setProperty(this._elRef.nativeElement,"value",this._parserFormatter.format(e)),this.isOpen()&&(this._cRef.instance.writeValue(this._ngbDateAdapter.toModel(e)),this._onTouched())},e.prototype._fromDateStruct=function(e){var t=e?new s.NgbDate(e.year,e.month,e.day):null;return this._calendar.isValid(t)?t:null},r([o.Input(),i("design:type",o.TemplateRef)],e.prototype,"dayTemplate",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"displayMonths",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"firstDayOfWeek",void 0),r([o.Input(),i("design:type",Function)],e.prototype,"markDisabled",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"minDate",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"maxDate",void 0),r([o.Input(),i("design:type",String)],e.prototype,"navigation",void 0),r([o.Input(),i("design:type",String)],e.prototype,"outsideDays",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"placement",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"showWeekdays",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"showWeekNumbers",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"startDate",void 0),r([o.Input(),i("design:type",String)],e.prototype,"container",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"navigate",void 0),r([o.Input(),i("design:type",Object),i("design:paramtypes",[Object])],e.prototype,"disabled",null),e=r([o.Directive({selector:"input[ngbDatepicker]",exportAs:"ngbDatepicker",host:{"(input)":"manualDateChange($event.target.value)","(change)":"manualDateChange($event.target.value, true)","(keyup.esc)":"close()","(blur)":"onBlur()","[disabled]":"disabled"},providers:[f,g,d.NgbDatepickerService]}),i("design:paramtypes",[l.NgbDateParserFormatter,o.ElementRef,o.ViewContainerRef,o.Renderer2,o.ComponentFactoryResolver,o.NgZone,d.NgbDatepickerService,h.NgbCalendar,p.NgbDateAdapter])],e)}();t.NgbInputDatepicker=m},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=function(){function e(){}return e.prototype.isMuted=function(){return!this.selected&&(this.date.month!==this.currentMonth||this.disabled)},r([o.Input(),i("design:type",Number)],e.prototype,"currentMonth",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"date",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"disabled",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"focused",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"selected",void 0),e=r([o.Component({selector:"[ngbDatepickerDayView]",changeDetection:o.ChangeDetectionStrategy.OnPush,styles:["\n    :host {\n      text-align: center;\n      width: 2rem;\n      height: 2rem;\n      line-height: 2rem;\n      border-radius: 0.25rem;\n      background: transparent;\n    }\n    :host.outside {\n      opacity: 0.5;\n    }\n  "],host:{class:"btn-light","[class.bg-primary]":"selected","[class.text-white]":"selected","[class.text-muted]":"isMuted()","[class.outside]":"isMuted()","[class.active]":"focused"},template:"{{ date.day }}"})],e)}();t.NgbDatepickerDayView=a},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(3),s=n(1),c=n(6),l=function(){function e(e){this.i18n=e,this.select=new o.EventEmitter}return e.prototype.changeMonth=function(e){this.select.emit(new a.NgbDate(this.date.year,s.toInteger(e),1))},e.prototype.changeYear=function(e){this.select.emit(new a.NgbDate(s.toInteger(e),this.date.month,1))},r([o.Input(),i("design:type",a.NgbDate)],e.prototype,"date",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"disabled",void 0),r([o.Input(),i("design:type",Array)],e.prototype,"months",void 0),r([o.Input(),i("design:type",Array)],e.prototype,"years",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"select",void 0),e=r([o.Component({selector:"ngb-datepicker-navigation-select",changeDetection:o.ChangeDetectionStrategy.OnPush,styles:["\n    :host>select {\n      /* to align with btn-sm */\n      padding: 0.25rem 0.5rem;\n      font-size: 0.875rem;\n      line-height: 1.25;\n      /* to cancel the custom height set by custom-select */\n      height: inherit;\n      width: 50%;\n      display: inline-block;\n    }\n  "],template:'\n    <select\n      [disabled]="disabled"\n      class="custom-select"\n      [value]="date?.month"\n      (change)="changeMonth($event.target.value)"\n      tabindex="-1">\n        <option *ngFor="let m of months" [value]="m">{{ i18n.getMonthShortName(m) }}</option>\n    </select><select\n      [disabled]="disabled"\n      class="custom-select"\n      [value]="date?.year"\n      (change)="changeYear($event.target.value)"\n      tabindex="-1">\n        <option *ngFor="let y of years" [value]="y">{{ y }}</option>\n    </select>\n  '}),i("design:paramtypes",[c.NgbDatepickerI18n])],e)}();t.NgbDatepickerNavigationSelect=l},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(48),s=n(3),c=n(0);function l(e){var t=e.getFullYear();return t%4==0&&t%100!=0||t%400==0}function u(e,t){return e-t*Math.floor(e/t)}var p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.fromGregorian=function(e){var t=new Date(e),n=t.getFullYear(),r=t.getMonth(),i=t.getDate(),o=1721424.5+365*(n-1)+Math.floor((n-1)/4)+-Math.floor((n-1)/100)+Math.floor((n-1)/400)+Math.floor((367*(r+1)-362)/12+(r+1<=2?0:l(t)?-1:-2)+i),a=(o=Math.floor(o)+.5)-1948439.5,c=Math.floor((30*a+10646)/10631),u=Math.ceil((a-29-this._getYearStart(c))/29.5);u=Math.min(u,11);var p=Math.ceil(a-this._getMonthStart(c,u))+1;return new s.NgbDate(c,u+1,p)},t.prototype.toGregorian=function(e){var t=e.year,n=e.month-1,r=e.day+Math.ceil(29.5*n)+354*(t-1)+Math.floor((3+11*t)/30)+1948439.5-1,i=Math.floor(r-.5)+.5,o=i-1721425.5,a=Math.floor(o/146097),s=u(o,146097),c=Math.floor(s/36524),p=u(s,36524),h=Math.floor(p/1461),d=u(p,1461),f=Math.floor(d/365),g=400*a+100*c+4*h+f;4!==c&&4!==f&&g++;var m=i-(1721425.5+365*(g-1)+Math.floor((g-1)/4)-Math.floor((g-1)/100)+Math.floor((g-1)/400)),y=i<1721424.5+365*(g-1)+Math.floor((g-1)/4)-Math.floor((g-1)/100)+Math.floor((g-1)/400)+Math.floor(739/12+(l(new Date(g,3,1))?-1:-2)+1)?0:l(new Date(g,3,1))?1:2,b=Math.floor((12*(m+y)+373)/367),v=1721424.5+365*(g-1)+Math.floor((g-1)/4)-Math.floor((g-1)/100)+Math.floor((g-1)/400)+Math.floor((367*b-362)/12+(b<=2?0:l(new Date(g,b-1,1))?-1:-2)+1);return new Date(g,b-1,i-v+1)},t.prototype.getDaysInIslamicMonth=function(e,t){t+=Math.floor(e/13);var n=29+(e=(e-1)%12+1)%2;return 12===e&&this._isIslamicLeapYear(t)&&n++,n},t.prototype.getNext=function(e,t,n){switch(void 0===t&&(t="d"),void 0===n&&(n=1),e=s.NgbDate.from(e),t){case"y":return(e=this.setYear(e,e.year+n)).month=1,e.day=1,e;case"m":return(e=this.setMonth(e,e.month+n)).day=1,e;case"d":return this.setDay(e,e.day+n);default:return e}},t.prototype.getPrev=function(e,t,n){return void 0===t&&(t="d"),void 0===n&&(n=1),this.getNext(e,t,-n)},t.prototype.getWeekday=function(e){var t=this.toGregorian(e).getDay();return 0===t?7:t},t.prototype.getWeekNumber=function(e,t){7===t&&(t=0);var n=e[(11-t)%7],r=this.toGregorian(n);r.setDate(r.getDate()+4-(r.getDay()||7));var i=r.getTime(),o=this.toGregorian(new s.NgbDate(n.year,1,1));return Math.floor(Math.round((i-o.getTime())/864e5)/7)+1},t.prototype.getToday=function(){return this.fromGregorian(new Date)},t=o([c.Injectable()],t)}(a.NgbCalendarHijri);t.NgbCalendarIslamicCivil=p},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(5),s=n(0),c=n(1),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.getDaysPerWeek=function(){return 7},t.prototype.getMonths=function(){return[1,2,3,4,5,6,7,8,9,10,11,12]},t.prototype.getWeeksPerMonth=function(){return 6},t.prototype.isValid=function(e){return e&&c.isNumber(e.year)&&c.isNumber(e.month)&&c.isNumber(e.day)&&!isNaN(this.toGregorian(e).getTime())},t.prototype.setDay=function(e,t){t=+t;var n=this.getDaysInIslamicMonth(e.month,e.year);if(t<=0)for(;t<=0;)e=this.setMonth(e,e.month-1),t+=n=this.getDaysInIslamicMonth(e.month,e.year);else if(t>n)for(;t>n;)t-=n,e=this.setMonth(e,e.month+1),n=this.getDaysInIslamicMonth(e.month,e.year);return e.day=t,e},t.prototype.setMonth=function(e,t){return t=+t,e.year=e.year+Math.floor((t-1)/12),e.month=Math.floor(((t-1)%12+12)%12)+1,e},t.prototype.setYear=function(e,t){return e.year=+t,e},t.prototype._isIslamicLeapYear=function(e){return(14+11*e)%30<11},t.prototype._getMonthStart=function(e,t){return Math.ceil(29.5*t)+354*(e-1)+Math.floor((3+11*e)/30)},t.prototype._getYearStart=function(e){return 354*(e-1)+Math.floor((3+11*e)/30)},t=o([s.Injectable()],t)}(a.NgbCalendar);t.NgbCalendarHijri=l},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(50),a=n(18),s=n(50);t.NgbDropdown=s.NgbDropdown,t.NgbDropdownToggle=s.NgbDropdownToggle,t.NgbDropdownMenu=s.NgbDropdownMenu;var c=n(18);t.NgbDropdownConfig=c.NgbDropdownConfig;var l=[o.NgbDropdown,o.NgbDropdownToggle,o.NgbDropdownMenu],u=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[a.NgbDropdownConfig]}},e=t=r([i.NgModule({declarations:l,exports:l})],e);var t}();t.NgbDropdownModule=u},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},o=this&&this.__param||function(e,t){return function(n,r){t(n,r,e)}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(18),c=n(7),l=function(){function e(e,t,n){this.dropdown=e,this._elementRef=t,this._renderer=n,this.placement="bottom",this.isOpen=!1}return e.prototype.isEventFrom=function(e){return this._elementRef.nativeElement.contains(e.target)},e.prototype.position=function(e,t){this.applyPlacement(c.positionElements(e,this._elementRef.nativeElement,t))},e.prototype.applyPlacement=function(e){this._renderer.removeClass(this._elementRef.nativeElement.parentNode,"dropup"),this._renderer.removeClass(this._elementRef.nativeElement.parentNode,"dropdown"),this.placement=e,-1!==e.search("^top")?this._renderer.addClass(this._elementRef.nativeElement.parentNode,"dropup"):this._renderer.addClass(this._elementRef.nativeElement.parentNode,"dropdown")},e=r([a.Directive({selector:"[ngbDropdownMenu]",host:{"[class.dropdown-menu]":"true","[class.show]":"dropdown.isOpen()"}}),o(0,a.Inject(a.forwardRef(function(){return p}))),i("design:paramtypes",[Object,a.ElementRef,a.Renderer2])],e)}();t.NgbDropdownMenu=l;var u=function(){function e(e,t){this.dropdown=e,this._elementRef=t,this.anchorEl=t.nativeElement}return e.prototype.toggleOpen=function(){this.dropdown.toggle()},e.prototype.isEventFrom=function(e){return this._elementRef.nativeElement.contains(e.target)},e=r([a.Directive({selector:"[ngbDropdownToggle]",host:{class:"dropdown-toggle","aria-haspopup":"true","[attr.aria-expanded]":"dropdown.isOpen()","(click)":"toggleOpen()"}}),o(0,a.Inject(a.forwardRef(function(){return p}))),i("design:paramtypes",[Object,a.ElementRef])],e)}();t.NgbDropdownToggle=u;var p=function(){function e(e,t){var n=this;this._open=!1,this.openChange=new a.EventEmitter,this.placement=e.placement,this.autoClose=e.autoClose,this._zoneSubscription=t.onStable.subscribe(function(){n._positionMenu()})}return e.prototype.ngOnInit=function(){this._menu&&this._menu.applyPlacement(Array.isArray(this.placement)?this.placement[0]:this.placement)},e.prototype.isOpen=function(){return this._open},e.prototype.open=function(){this._open||(this._open=!0,this._positionMenu(),this.openChange.emit(!0))},e.prototype.close=function(){this._open&&(this._open=!1,this.openChange.emit(!1))},e.prototype.toggle=function(){this.isOpen()?this.close():this.open()},e.prototype.closeFromClick=function(e){this.autoClose&&2!==e.button&&!this._isEventFromToggle(e)&&(!0===this.autoClose?this.close():"inside"===this.autoClose&&this._isEventFromMenu(e)?this.close():"outside"!==this.autoClose||this._isEventFromMenu(e)||this.close())},e.prototype.closeFromOutsideEsc=function(){this.autoClose&&this.close()},e.prototype.ngOnDestroy=function(){this._zoneSubscription.unsubscribe()},e.prototype._isEventFromToggle=function(e){return!!this._toggle&&this._toggle.isEventFrom(e)},e.prototype._isEventFromMenu=function(e){return!!this._menu&&this._menu.isEventFrom(e)},e.prototype._positionMenu=function(){this.isOpen()&&this._menu&&this._toggle&&this._menu.position(this._toggle.anchorEl,this.placement)},r([a.ContentChild(l),i("design:type",l)],e.prototype,"_menu",void 0),r([a.ContentChild(u),i("design:type",u)],e.prototype,"_toggle",void 0),r([a.Input(),i("design:type",Object)],e.prototype,"autoClose",void 0),r([a.Input("open"),i("design:type",Object)],e.prototype,"_open",void 0),r([a.Input(),i("design:type",Object)],e.prototype,"placement",void 0),r([a.Output(),i("design:type",Object)],e.prototype,"openChange",void 0),e=r([a.Directive({selector:"[ngbDropdown]",exportAs:"ngbDropdown",host:{"[class.show]":"isOpen()","(keyup.esc)":"closeFromOutsideEsc()","(document:click)":"closeFromClick($event)"}}),i("design:paramtypes",[s.NgbDropdownConfig,a.NgZone])],e)}();t.NgbDropdown=p},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(52),a=n(53),s=n(55),c=n(57),l=n(57);t.NgbModal=l.NgbModal;var u=n(56);t.NgbModalRef=u.NgbModalRef,t.NgbActiveModal=u.NgbActiveModal;var p=n(54);t.ModalDismissReasons=p.ModalDismissReasons;var h=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[c.NgbModal,s.NgbModalStack]}},e=t=r([i.NgModule({declarations:[o.NgbModalBackdrop,a.NgbModalWindow],entryComponents:[o.NgbModalBackdrop,a.NgbModalWindow],providers:[c.NgbModal]})],e);var t}();t.NgbModalModule=h},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=function(){function e(){}return e=r([i.Component({selector:"ngb-modal-backdrop",template:"",host:{class:"modal-backdrop fade show"}})],e)}();t.NgbModalBackdrop=o},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},o=this&&this.__param||function(e,t){return function(n,r){t(n,r,e)}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),s=n(0),c=n(54),l=function(){function e(e,t,n){this._elRef=t,this._renderer=n,this.backdrop=!0,this.keyboard=!0,this.dismissEvent=new s.EventEmitter,this._document=e}return e.prototype.backdropClick=function(e){!0===this.backdrop&&this._elRef.nativeElement===e.target&&this.dismiss(c.ModalDismissReasons.BACKDROP_CLICK)},e.prototype.escKey=function(e){this.keyboard&&!e.defaultPrevented&&this.dismiss(c.ModalDismissReasons.ESC)},e.prototype.dismiss=function(e){this.dismissEvent.emit(e)},e.prototype.ngOnInit=function(){this._elWithFocus=this._document.activeElement,this._renderer.addClass(this._document.body,"modal-open")},e.prototype.ngAfterViewInit=function(){this._elRef.nativeElement.contains(document.activeElement)||this._elRef.nativeElement.focus.apply(this._elRef.nativeElement,[])},e.prototype.ngOnDestroy=function(){var e,t=this._document.body,n=this._elWithFocus;(e=n&&n.focus&&t.contains(n)?n:t).focus.apply(e,[]),this._elWithFocus=null,this._renderer.removeClass(t,"modal-open")},r([s.Input(),i("design:type",Object)],e.prototype,"backdrop",void 0),r([s.Input(),i("design:type",Object)],e.prototype,"keyboard",void 0),r([s.Input(),i("design:type",String)],e.prototype,"size",void 0),r([s.Input(),i("design:type",String)],e.prototype,"windowClass",void 0),r([s.Output("dismiss"),i("design:type",Object)],e.prototype,"dismissEvent",void 0),e=r([s.Component({selector:"ngb-modal-window",host:{"[class]":'"modal fade show d-block" + (windowClass ? " " + windowClass : "")',role:"dialog",tabindex:"-1","(keyup.esc)":"escKey($event)","(click)":"backdropClick($event)"},template:"\n    <div [class]=\"'modal-dialog' + (size ? ' modal-' + size : '')\" role=\"document\">\n        <div class=\"modal-content\"><ng-content></ng-content></div>\n    </div>\n    "}),o(0,s.Inject(a.DOCUMENT)),i("design:paramtypes",[Object,s.ElementRef,s.Renderer2])],e)}();t.NgbModalWindow=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.BACKDROP_CLICK=0]="BACKDROP_CLICK",e[e.ESC=1]="ESC"}(t.ModalDismissReasons||(t.ModalDismissReasons={}))},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},o=this&&this.__param||function(e,t){return function(n,r){t(n,r,e)}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),s=n(0),c=n(10),l=n(1),u=n(52),p=n(53),h=n(56),d=function(){function e(e,t,n,r){this._applicationRef=e,this._injector=t,this._componentFactoryResolver=n,this._windowAttributes=["backdrop","keyboard","size","windowClass"],this._document=r}return e.prototype.open=function(e,t,n,r){var i=l.isDefined(r.container)?this._document.querySelector(r.container):this._document.body;if(!i)throw new Error('The specified modal container "'+(r.container||"body")+'" was not found in the DOM.');var o=new h.NgbActiveModal,a=this._getContentRef(e,r.injector||t,n,o),s=!1!==r.backdrop?this._attachBackdrop(i):null,c=this._attachWindowComponent(i,a),u=new h.NgbModalRef(c,a,s,r.beforeDismiss);return o.close=function(e){u.close(e)},o.dismiss=function(e){u.dismiss(e)},this._applyWindowOptions(c.instance,r),u},e.prototype._attachBackdrop=function(e){var t=this._componentFactoryResolver.resolveComponentFactory(u.NgbModalBackdrop).create(this._injector);return this._applicationRef.attachView(t.hostView),e.appendChild(t.location.nativeElement),t},e.prototype._attachWindowComponent=function(e,t){var n=this._componentFactoryResolver.resolveComponentFactory(p.NgbModalWindow).create(this._injector,t.nodes);return this._applicationRef.attachView(n.hostView),e.appendChild(n.location.nativeElement),n},e.prototype._applyWindowOptions=function(e,t){this._windowAttributes.forEach(function(n){l.isDefined(t[n])&&(e[n]=t[n])})},e.prototype._getContentRef=function(e,t,n,r){return n?n instanceof s.TemplateRef?this._createFromTemplateRef(n,r):l.isString(n)?this._createFromString(n):this._createFromComponent(e,t,n,r):new c.ContentRef([])},e.prototype._createFromTemplateRef=function(e,t){var n=e.createEmbeddedView(t);return this._applicationRef.attachView(n),new c.ContentRef([n.rootNodes],n)},e.prototype._createFromString=function(e){var t=this._document.createTextNode(""+e);return new c.ContentRef([[t]])},e.prototype._createFromComponent=function(e,t,n,r){var i=e.resolveComponentFactory(n),o=s.ReflectiveInjector.resolveAndCreate([{provide:h.NgbActiveModal,useValue:r}],t),a=i.create(o);return this._applicationRef.attachView(a.hostView),new c.ContentRef([[a.location.nativeElement]],a.hostView,a)},e=r([s.Injectable(),o(3,s.Inject(a.DOCUMENT)),i("design:paramtypes",[s.ApplicationRef,s.Injector,s.ComponentFactoryResolver,Object])],e)}();t.NgbModalStack=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.close=function(e){},e.prototype.dismiss=function(e){},e}();t.NgbActiveModal=r;var i=function(){function e(e,t,n,r){var i=this;this._windowCmptRef=e,this._contentRef=t,this._backdropCmptRef=n,this._beforeDismiss=r,e.instance.dismissEvent.subscribe(function(e){i.dismiss(e)}),this.result=new Promise(function(e,t){i._resolve=e,i._reject=t}),this.result.then(null,function(){})}return Object.defineProperty(e.prototype,"componentInstance",{get:function(){if(this._contentRef.componentRef)return this._contentRef.componentRef.instance},set:function(e){},enumerable:!0,configurable:!0}),e.prototype.close=function(e){this._windowCmptRef&&(this._resolve(e),this._removeModalElements())},e.prototype.dismiss=function(e){this._windowCmptRef&&(this._beforeDismiss&&!1===this._beforeDismiss()||(this._reject(e),this._removeModalElements()))},e.prototype._removeModalElements=function(){var e=this._windowCmptRef.location.nativeElement;if(e.parentNode.removeChild(e),this._windowCmptRef.destroy(),this._backdropCmptRef){var t=this._backdropCmptRef.location.nativeElement;t.parentNode.removeChild(t),this._backdropCmptRef.destroy()}this._contentRef&&this._contentRef.viewRef&&this._contentRef.viewRef.destroy(),this._windowCmptRef=null,this._backdropCmptRef=null,this._contentRef=null},e}();t.NgbModalRef=i},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(55),s=function(){function e(e,t,n){this._moduleCFR=e,this._injector=t,this._modalStack=n}return e.prototype.open=function(e,t){return void 0===t&&(t={}),this._modalStack.open(this._moduleCFR,this._injector,e,t)},e=r([o.Injectable(),i("design:paramtypes",[o.ComponentFactoryResolver,o.Injector,a.NgbModalStack])],e)}();t.NgbModal=s},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(59),s=n(19),c=n(59);t.NgbPagination=c.NgbPagination;var l=n(19);t.NgbPaginationConfig=l.NgbPaginationConfig;var u=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[s.NgbPaginationConfig]}},e=t=r([i.NgModule({declarations:[a.NgbPagination],exports:[a.NgbPagination],imports:[o.CommonModule]})],e);var t}();t.NgbPaginationModule=u},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(1),s=n(19),c=function(){function e(e){this.pageCount=0,this.pages=[],this.page=0,this.pageChange=new o.EventEmitter(!0),this.disabled=e.disabled,this.boundaryLinks=e.boundaryLinks,this.directionLinks=e.directionLinks,this.ellipses=e.ellipses,this.maxSize=e.maxSize,this.pageSize=e.pageSize,this.rotate=e.rotate,this.size=e.size}return e.prototype.hasPrevious=function(){return this.page>1},e.prototype.hasNext=function(){return this.page<this.pageCount},e.prototype.selectPage=function(e){this._updatePages(e)},e.prototype.ngOnChanges=function(e){this._updatePages(this.page)},e.prototype.isEllipsis=function(e){return-1===e},e.prototype._applyEllipses=function(e,t){this.ellipses&&(e>0&&(e>1&&this.pages.unshift(-1),this.pages.unshift(1)),t<this.pageCount&&(t<this.pageCount-1&&this.pages.push(-1),this.pages.push(this.pageCount)))},e.prototype._applyRotation=function(){var e=0,t=this.pageCount,n=Math.floor(this.maxSize/2),r=this.maxSize%2==0?n-1:n;return this.page<=n?t=this.maxSize:this.pageCount-this.page<n?e=this.pageCount-this.maxSize:(e=this.page-n-1,t=this.page+r),[e,t]},e.prototype._applyPagination=function(){var e=(Math.ceil(this.page/this.maxSize)-1)*this.maxSize;return[e,e+this.maxSize]},e.prototype._setPageInRange=function(e){var t=this.page;this.page=a.getValueInRange(e,this.pageCount,1),this.page!==t&&this.pageChange.emit(this.page)},e.prototype._updatePages=function(e){this.pageCount=Math.ceil(this.collectionSize/this.pageSize),a.isNumber(this.pageCount)||(this.pageCount=0),this.pages.length=0;for(var t=1;t<=this.pageCount;t++)this.pages.push(t);if(this._setPageInRange(e),this.maxSize>0&&this.pageCount>this.maxSize){var n=0,r=this.pageCount;this.rotate?(n=(i=this._applyRotation())[0],r=i[1]):(n=(o=this._applyPagination())[0],r=o[1]),this.pages=this.pages.slice(n,r),this._applyEllipses(n,r)}var i,o},r([o.Input(),i("design:type",Boolean)],e.prototype,"disabled",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"boundaryLinks",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"directionLinks",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"ellipses",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"rotate",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"collectionSize",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"maxSize",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"page",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"pageSize",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"pageChange",void 0),r([o.Input(),i("design:type",String)],e.prototype,"size",void 0),e=r([o.Component({selector:"ngb-pagination",changeDetection:o.ChangeDetectionStrategy.OnPush,host:{role:"navigation"},template:'\n    <ul [class]="\'pagination\' + (size ? \' pagination-\' + size : \'\')">\n      <li *ngIf="boundaryLinks" class="page-item"\n        [class.disabled]="!hasPrevious() || disabled">\n        <a aria-label="First" class="page-link" href (click)="!!selectPage(1)" [attr.tabindex]="(hasPrevious() ? null : \'-1\')">\n          <span aria-hidden="true">&laquo;&laquo;</span>\n        </a>\n      </li>\n\n      <li *ngIf="directionLinks" class="page-item"\n        [class.disabled]="!hasPrevious() || disabled">\n        <a aria-label="Previous" class="page-link" href (click)="!!selectPage(page-1)" [attr.tabindex]="(hasPrevious() ? null : \'-1\')">\n          <span aria-hidden="true">&laquo;</span>\n        </a>\n      </li>\n      <li *ngFor="let pageNumber of pages" class="page-item" [class.active]="pageNumber === page"\n        [class.disabled]="isEllipsis(pageNumber) || disabled">\n        <a *ngIf="isEllipsis(pageNumber)" class="page-link">...</a>\n        <a *ngIf="!isEllipsis(pageNumber)" class="page-link" href (click)="!!selectPage(pageNumber)">\n          {{pageNumber}}\n          <span *ngIf="pageNumber === page" class="sr-only">(current)</span>\n        </a>\n      </li>\n      <li *ngIf="directionLinks" class="page-item" [class.disabled]="!hasNext() || disabled">\n        <a aria-label="Next" class="page-link" href (click)="!!selectPage(page+1)" [attr.tabindex]="(hasNext() ? null : \'-1\')">\n          <span aria-hidden="true">&raquo;</span>\n        </a>\n      </li>\n\n      <li *ngIf="boundaryLinks" class="page-item" [class.disabled]="!hasNext() || disabled">\n        <a aria-label="Last" class="page-link" href (click)="!!selectPage(pageCount)" [attr.tabindex]="(hasNext() ? null : \'-1\')">\n          <span aria-hidden="true">&raquo;&raquo;</span>\n        </a>\n      </li>\n    </ul>\n  '}),i("design:paramtypes",[s.NgbPaginationConfig])],e)}();t.NgbPagination=c},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(61),a=n(20),s=n(61);t.NgbPopover=s.NgbPopover;var c=n(20);t.NgbPopoverConfig=c.NgbPopoverConfig;var l=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[a.NgbPopoverConfig]}},e=t=r([i.NgModule({declarations:[o.NgbPopover,o.NgbPopoverWindow],exports:[o.NgbPopover],entryComponents:[o.NgbPopoverWindow]})],e);var t}();t.NgbPopoverModule=l},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(62),s=n(7),c=n(10),l=n(20),u=0,p=function(){function e(e,t){this._element=e,this._renderer=t,this.placement="top"}return e.prototype.applyPlacement=function(e){this._renderer.removeClass(this._element.nativeElement,"bs-popover-"+this.placement.toString().split("-")[0]),this._renderer.removeClass(this._element.nativeElement,"bs-popover-"+this.placement.toString()),this.placement=e,this._renderer.addClass(this._element.nativeElement,"bs-popover-"+this.placement.toString().split("-")[0]),this._renderer.addClass(this._element.nativeElement,"bs-popover-"+this.placement.toString())},r([o.Input(),i("design:type",String)],e.prototype,"placement",void 0),r([o.Input(),i("design:type",String)],e.prototype,"title",void 0),r([o.Input(),i("design:type",String)],e.prototype,"id",void 0),e=r([o.Component({selector:"ngb-popover-window",changeDetection:o.ChangeDetectionStrategy.OnPush,host:{"[class]":'"popover bs-popover-" + placement.split("-")[0]+" bs-popover-" + placement',role:"tooltip","[id]":"id"},template:'\n    <div class="arrow"></div>\n    <h3 class="popover-header">{{title}}</h3><div class="popover-body"><ng-content></ng-content></div>',styles:["\n    :host.bs-popover-top .arrow, :host.bs-popover-bottom .arrow {\n      left: 50%;\n      margin-left: -5px;\n    }\n\n    :host.bs-popover-top-left .arrow, :host.bs-popover-bottom-left .arrow {\n      left: 2em;\n    }\n\n    :host.bs-popover-top-right .arrow, :host.bs-popover-bottom-right .arrow {\n      left: auto;\n      right: 2em;\n    }\n\n    :host.bs-popover-left .arrow, :host.bs-popover-right .arrow {\n      top: 50%;\n      margin-top: -5px;\n    }\n    \n    :host.bs-popover-left-top .arrow, :host.bs-popover-right-top .arrow {\n      top: 0.7em;\n    }\n\n    :host.bs-popover-left-bottom .arrow, :host.bs-popover-right-bottom .arrow {\n      top: auto;\n      bottom: 0.7em;\n    }\n  "]}),i("design:paramtypes",[o.ElementRef,o.Renderer2])],e)}();t.NgbPopoverWindow=p;var h=function(){function e(e,t,n,r,i,a,l){var h=this;this._elementRef=e,this._renderer=t,this.shown=new o.EventEmitter,this.hidden=new o.EventEmitter,this._ngbPopoverWindowId="ngb-popover-"+u++,this.placement=a.placement,this.triggers=a.triggers,this.container=a.container,this._popupService=new c.PopupService(p,n,i,t,r),this._zoneSubscription=l.onStable.subscribe(function(){h._windowRef&&h._windowRef.instance.applyPlacement(s.positionElements(h._elementRef.nativeElement,h._windowRef.location.nativeElement,h.placement,"body"===h.container))})}return e.prototype.open=function(e){this._windowRef||(this._windowRef=this._popupService.open(this.ngbPopover,e),this._windowRef.instance.title=this.popoverTitle,this._windowRef.instance.id=this._ngbPopoverWindowId,this._renderer.setAttribute(this._elementRef.nativeElement,"aria-describedby",this._ngbPopoverWindowId),"body"===this.container&&window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement),this._windowRef.changeDetectorRef.detectChanges(),this._windowRef.changeDetectorRef.markForCheck(),this._windowRef.instance.applyPlacement(s.positionElements(this._elementRef.nativeElement,this._windowRef.location.nativeElement,this.placement,"body"===this.container)),this.shown.emit())},e.prototype.close=function(){this._windowRef&&(this._renderer.removeAttribute(this._elementRef.nativeElement,"aria-describedby"),this._popupService.close(),this._windowRef=null,this.hidden.emit())},e.prototype.toggle=function(){this._windowRef?this.close():this.open()},e.prototype.isOpen=function(){return null!=this._windowRef},e.prototype.ngOnInit=function(){this._unregisterListenersFn=a.listenToTriggers(this._renderer,this._elementRef.nativeElement,this.triggers,this.open.bind(this),this.close.bind(this),this.toggle.bind(this))},e.prototype.ngOnDestroy=function(){this.close(),this._unregisterListenersFn(),this._zoneSubscription.unsubscribe()},r([o.Input(),i("design:type",Object)],e.prototype,"ngbPopover",void 0),r([o.Input(),i("design:type",String)],e.prototype,"popoverTitle",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"placement",void 0),r([o.Input(),i("design:type",String)],e.prototype,"triggers",void 0),r([o.Input(),i("design:type",String)],e.prototype,"container",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"shown",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"hidden",void 0),e=r([o.Directive({selector:"[ngbPopover]",exportAs:"ngbPopover"}),i("design:paramtypes",[o.ElementRef,o.Renderer2,o.Injector,o.ComponentFactoryResolver,o.ViewContainerRef,l.NgbPopoverConfig,o.NgZone])],e)}();t.NgbPopover=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this.open=e,this.close=t,t||(this.close=e)}return e.prototype.isManual=function(){return"manual"===this.open||"manual"===this.close},e}();t.Trigger=r;var i={hover:["mouseenter","mouseleave"]};function o(e,t){void 0===t&&(t=i);var n=(e||"").trim();if(0===n.length)return[];var o=n.split(/\s+/).map(function(e){return e.split(":")}).map(function(e){var n=t[e[0]]||e;return new r(n[0],n[1])}),a=o.filter(function(e){return e.isManual()});if(a.length>1)throw"Triggers parse error: only one manual trigger is allowed";if(1===a.length&&o.length>1)throw"Triggers parse error: manual trigger can't be mixed with other triggers";return o}t.parseTriggers=o;var a=function(){};t.listenToTriggers=function(e,t,n,r,i,s){var c=o(n),l=[];return 1===c.length&&c[0].isManual()?a:(c.forEach(function(n){n.open===n.close?l.push(e.listen(t,n.open,s)):l.push(e.listen(t,n.open,r),e.listen(t,n.close,i))}),function(){l.forEach(function(e){return e()})})}},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(64),s=n(21),c=n(64);t.NgbProgressbar=c.NgbProgressbar;var l=n(21);t.NgbProgressbarConfig=l.NgbProgressbarConfig;var u=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[s.NgbProgressbarConfig]}},e=t=r([i.NgModule({declarations:[a.NgbProgressbar],exports:[a.NgbProgressbar],imports:[o.CommonModule]})],e);var t}();t.NgbProgressbarModule=u},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(1),s=n(21),c=function(){function e(e){this.value=0,this.max=e.max,this.animated=e.animated,this.striped=e.striped,this.type=e.type,this.showValue=e.showValue,this.height=e.height}return e.prototype.getValue=function(){return a.getValueInRange(this.value,this.max)},e.prototype.getPercentValue=function(){return 100*this.getValue()/this.max},r([o.Input(),i("design:type",Number)],e.prototype,"max",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"animated",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"striped",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"showValue",void 0),r([o.Input(),i("design:type",String)],e.prototype,"type",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"value",void 0),r([o.Input(),i("design:type",String)],e.prototype,"height",void 0),e=r([o.Component({selector:"ngb-progressbar",changeDetection:o.ChangeDetectionStrategy.OnPush,template:'\n    <div class="progress" [style.height]="height">\n      <div class="progress-bar{{type ? \' bg-\' + type : \'\'}}{{animated ? \' progress-bar-animated\' : \'\'}}{{striped ?\n    \' progress-bar-striped\' : \'\'}}" role="progressbar" [style.width.%]="getPercentValue()"\n    [attr.aria-valuenow]="getValue()" aria-valuemin="0" [attr.aria-valuemax]="max">\n        <span *ngIf="showValue">{{getPercentValue()}}%</span><ng-content></ng-content>\n      </div>\n    </div>\n  '}),i("design:paramtypes",[s.NgbProgressbarConfig])],e)}();t.NgbProgressbar=c},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(22),s=n(66),c=n(66);t.NgbRating=c.NgbRating;var l=n(22);t.NgbRatingConfig=l.NgbRatingConfig;var u=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[a.NgbRatingConfig]}},e=t=r([i.NgModule({declarations:[s.NgbRating],exports:[s.NgbRating],imports:[o.CommonModule]})],e);var t}();t.NgbRatingModule=u},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o,a=n(0),s=n(22),c=n(1),l=n(4);!function(e){e[e.End=35]="End",e[e.Home=36]="Home",e[e.ArrowLeft=37]="ArrowLeft",e[e.ArrowUp=38]="ArrowUp",e[e.ArrowRight=39]="ArrowRight",e[e.ArrowDown=40]="ArrowDown"}(o||(o={}));var u={provide:l.NG_VALUE_ACCESSOR,useExisting:a.forwardRef(function(){return p}),multi:!0},p=function(){function e(e,t){this._changeDetectorRef=t,this.contexts=[],this.disabled=!1,this.hover=new a.EventEmitter,this.leave=new a.EventEmitter,this.rateChange=new a.EventEmitter(!0),this.onChange=function(e){},this.onTouched=function(){},this.max=e.max,this.readonly=e.readonly}return e.prototype.ariaValueText=function(){return this.nextRate+" out of "+this.max},e.prototype.enter=function(e){this.readonly||this.disabled||this._updateState(e),this.hover.emit(e)},e.prototype.handleBlur=function(){this.onTouched()},e.prototype.handleClick=function(e){this.update(this.resettable&&this.rate===e?0:e)},e.prototype.handleKeyDown=function(e){if(o[c.toString(e.which)])switch(e.preventDefault(),e.which){case o.ArrowDown:case o.ArrowLeft:this.update(this.rate-1);break;case o.ArrowUp:case o.ArrowRight:this.update(this.rate+1);break;case o.Home:this.update(0);break;case o.End:this.update(this.max)}},e.prototype.ngOnChanges=function(e){e.rate&&this.update(this.rate)},e.prototype.ngOnInit=function(){this.contexts=Array.from({length:this.max},function(e,t){return{fill:0,index:t}}),this._updateState(this.rate)},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.reset=function(){this.leave.emit(this.nextRate),this._updateState(this.rate)},e.prototype.setDisabledState=function(e){this.disabled=e},e.prototype.update=function(e,t){void 0===t&&(t=!0);var n=c.getValueInRange(e,this.max,0);this.readonly||this.disabled||this.rate===n||(this.rate=n,this.rateChange.emit(this.rate)),t&&(this.onChange(this.rate),this.onTouched()),this._updateState(this.rate)},e.prototype.writeValue=function(e){this.update(e,!1),this._changeDetectorRef.markForCheck()},e.prototype._getFillValue=function(e){var t=this.nextRate-e;return t>=1?100:t<1&&t>0?Number.parseInt((100*t).toFixed(2)):0},e.prototype._updateState=function(e){var t=this;this.nextRate=e,this.contexts.forEach(function(e,n){return e.fill=t._getFillValue(n)})},r([a.Input(),i("design:type",Number)],e.prototype,"max",void 0),r([a.Input(),i("design:type",Number)],e.prototype,"rate",void 0),r([a.Input(),i("design:type",Boolean)],e.prototype,"readonly",void 0),r([a.Input(),i("design:type",Boolean)],e.prototype,"resettable",void 0),r([a.Input(),a.ContentChild(a.TemplateRef),i("design:type",a.TemplateRef)],e.prototype,"starTemplate",void 0),r([a.Output(),i("design:type",Object)],e.prototype,"hover",void 0),r([a.Output(),i("design:type",Object)],e.prototype,"leave",void 0),r([a.Output(),i("design:type",Object)],e.prototype,"rateChange",void 0),e=r([a.Component({selector:"ngb-rating",changeDetection:a.ChangeDetectionStrategy.OnPush,host:{class:"d-inline-flex",tabindex:"0",role:"slider","aria-valuemin":"0","[attr.aria-valuemax]":"max","[attr.aria-valuenow]":"nextRate","[attr.aria-valuetext]":"ariaValueText()","[attr.aria-disabled]":"readonly ? true : null","(blur)":"handleBlur()","(keydown)":"handleKeyDown($event)","(mouseleave)":"reset()"},template:'\n    <ng-template #t let-fill="fill">{{ fill === 100 ? \'&#9733;\' : \'&#9734;\' }}</ng-template>\n    <ng-template ngFor [ngForOf]="contexts" let-index="index">\n      <span class="sr-only">({{ index < nextRate ? \'*\' : \' \' }})</span>\n      <span (mouseenter)="enter(index + 1)" (click)="handleClick(index + 1)" [style.cursor]="readonly || disabled ? \'default\' : \'pointer\'">\n        <ng-template [ngTemplateOutlet]="starTemplate || t" [ngTemplateOutletContext]="contexts[index]"></ng-template>\n      </span>\n    </ng-template>\n  ',providers:[u]}),i("design:paramtypes",[s.NgbRatingConfig,a.ChangeDetectorRef])],e)}();t.NgbRating=p},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(68),s=n(23),c=n(68);t.NgbTabset=c.NgbTabset,t.NgbTab=c.NgbTab,t.NgbTabContent=c.NgbTabContent,t.NgbTabTitle=c.NgbTabTitle;var l=n(23);t.NgbTabsetConfig=l.NgbTabsetConfig;var u=[a.NgbTabset,a.NgbTab,a.NgbTabContent,a.NgbTabTitle],p=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[s.NgbTabsetConfig]}},e=t=r([i.NgModule({declarations:u,exports:u,imports:[o.CommonModule]})],e);var t}();t.NgbTabsetModule=p},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(23),s=0,c=function(){function e(e){this.templateRef=e}return e=r([o.Directive({selector:"ng-template[ngbTabTitle]"}),i("design:paramtypes",[o.TemplateRef])],e)}();t.NgbTabTitle=c;var l=function(){function e(e){this.templateRef=e}return e=r([o.Directive({selector:"ng-template[ngbTabContent]"}),i("design:paramtypes",[o.TemplateRef])],e)}();t.NgbTabContent=l;var u=function(){function e(){this.id="ngb-tab-"+s++,this.disabled=!1}return e.prototype.ngAfterContentChecked=function(){this.titleTpl=this.titleTpls.first,this.contentTpl=this.contentTpls.first},r([o.Input(),i("design:type",String)],e.prototype,"id",void 0),r([o.Input(),i("design:type",String)],e.prototype,"title",void 0),r([o.Input(),i("design:type",Object)],e.prototype,"disabled",void 0),r([o.ContentChildren(c,{descendants:!1}),i("design:type",o.QueryList)],e.prototype,"titleTpls",void 0),r([o.ContentChildren(l,{descendants:!1}),i("design:type",o.QueryList)],e.prototype,"contentTpls",void 0),e=r([o.Directive({selector:"ngb-tab"})],e)}();t.NgbTab=u;var p=function(){function e(e){this.destroyOnHide=!0,this.tabChange=new o.EventEmitter,this.type=e.type,this.justify=e.justify,this.orientation=e.orientation}return Object.defineProperty(e.prototype,"justify",{set:function(e){this.justifyClass="fill"===e||"justified"===e?"nav-"+e:"justify-content-"+e},enumerable:!0,configurable:!0}),e.prototype.select=function(e){var t=this._getTabById(e);if(t&&!t.disabled&&this.activeId!==t.id){var n=!1;this.tabChange.emit({activeId:this.activeId,nextId:t.id,preventDefault:function(){n=!0}}),n||(this.activeId=t.id)}},e.prototype.ngAfterContentChecked=function(){var e=this._getTabById(this.activeId);this.activeId=e?e.id:this.tabs.length?this.tabs.first.id:null},e.prototype._getTabById=function(e){var t=this.tabs.filter(function(t){return t.id===e});return t.length?t[0]:null},r([o.ContentChildren(u),i("design:type",o.QueryList)],e.prototype,"tabs",void 0),r([o.Input(),i("design:type",String)],e.prototype,"activeId",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"destroyOnHide",void 0),r([o.Input(),i("design:type",String),i("design:paramtypes",[String])],e.prototype,"justify",null),r([o.Input(),i("design:type",String)],e.prototype,"orientation",void 0),r([o.Input(),i("design:type",String)],e.prototype,"type",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"tabChange",void 0),e=r([o.Component({selector:"ngb-tabset",exportAs:"ngbTabset",template:'\n    <ul [class]="\'nav nav-\' + type + (orientation == \'horizontal\'?  \' \' + justifyClass : \' flex-column\')" role="tablist">\n      <li class="nav-item" *ngFor="let tab of tabs">\n        <a [id]="tab.id" class="nav-link" [class.active]="tab.id === activeId" [class.disabled]="tab.disabled"\n          href (click)="!!select(tab.id)" role="tab" [attr.tabindex]="(tab.disabled ? \'-1\': undefined)"\n          [attr.aria-controls]="(!destroyOnHide || tab.id === activeId ? tab.id + \'-panel\' : null)"\n          [attr.aria-expanded]="tab.id === activeId" [attr.aria-disabled]="tab.disabled">\n          {{tab.title}}<ng-template [ngTemplateOutlet]="tab.titleTpl?.templateRef"></ng-template>\n        </a>\n      </li>\n    </ul>\n    <div class="tab-content">\n      <ng-template ngFor let-tab [ngForOf]="tabs">\n        <div\n          class="tab-pane {{tab.id === activeId ? \'active\' : null}}"\n          *ngIf="!destroyOnHide || tab.id === activeId"\n          role="tabpanel"\n          [attr.aria-labelledby]="tab.id" id="{{tab.id}}-panel"\n          [attr.aria-expanded]="tab.id === activeId">\n          <ng-template [ngTemplateOutlet]="tab.contentTpl.templateRef"></ng-template>\n        </div>\n      </ng-template>\n    </div>\n  '}),i("design:paramtypes",[a.NgbTabsetConfig])],e)}();t.NgbTabset=p},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(70),s=n(24),c=n(70);t.NgbTimepicker=c.NgbTimepicker;var l=n(24);t.NgbTimepickerConfig=l.NgbTimepickerConfig;var u=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[s.NgbTimepickerConfig]}},e=t=r([i.NgModule({declarations:[a.NgbTimepicker],exports:[a.NgbTimepicker],imports:[o.CommonModule]})],e);var t}();t.NgbTimepickerModule=u},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(4),s=n(1),c=n(81),l=n(24),u={provide:a.NG_VALUE_ACCESSOR,useExisting:o.forwardRef(function(){return p}),multi:!0},p=function(){function e(e){this.onChange=function(e){},this.onTouched=function(){},this.meridian=e.meridian,this.spinners=e.spinners,this.seconds=e.seconds,this.hourStep=e.hourStep,this.minuteStep=e.minuteStep,this.secondStep=e.secondStep,this.disabled=e.disabled,this.readonlyInputs=e.readonlyInputs,this.size=e.size}return e.prototype.writeValue=function(e){this.model=e?new c.NgbTime(e.hour,e.minute,e.second):new c.NgbTime,this.seconds||e&&s.isNumber(e.second)||(this.model.second=0)},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.setDisabledState=function(e){this.disabled=e},e.prototype.changeHour=function(e){this.model.changeHour(e),this.propagateModelChange()},e.prototype.changeMinute=function(e){this.model.changeMinute(e),this.propagateModelChange()},e.prototype.changeSecond=function(e){this.model.changeSecond(e),this.propagateModelChange()},e.prototype.updateHour=function(e){var t=this.model.hour>=12,n=s.toInteger(e);this.meridian&&(t&&n<12||!t&&12===n)?this.model.updateHour(n+12):this.model.updateHour(n),this.propagateModelChange()},e.prototype.updateMinute=function(e){this.model.updateMinute(s.toInteger(e)),this.propagateModelChange()},e.prototype.updateSecond=function(e){this.model.updateSecond(s.toInteger(e)),this.propagateModelChange()},e.prototype.toggleMeridian=function(){this.meridian&&this.changeHour(12)},e.prototype.formatHour=function(e){return s.isNumber(e)?this.meridian?s.padNumber(e%12==0?12:e%12):s.padNumber(e%24):s.padNumber(NaN)},e.prototype.formatMinSec=function(e){return s.padNumber(e)},e.prototype.setFormControlSize=function(){return{"form-control-sm":"small"===this.size,"form-control-lg":"large"===this.size}},e.prototype.setButtonSize=function(){return{"btn-sm":"small"===this.size,"btn-lg":"large"===this.size}},e.prototype.ngOnChanges=function(e){e.seconds&&!this.seconds&&this.model&&!s.isNumber(this.model.second)&&(this.model.second=0,this.propagateModelChange(!1))},e.prototype.propagateModelChange=function(e){void 0===e&&(e=!0),e&&this.onTouched(),this.model.isValid(this.seconds)?this.onChange({hour:this.model.hour,minute:this.model.minute,second:this.model.second}):this.onChange(null)},r([o.Input(),i("design:type",Boolean)],e.prototype,"meridian",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"spinners",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"seconds",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"hourStep",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"minuteStep",void 0),r([o.Input(),i("design:type",Number)],e.prototype,"secondStep",void 0),r([o.Input(),i("design:type",Boolean)],e.prototype,"readonlyInputs",void 0),r([o.Input(),i("design:type",String)],e.prototype,"size",void 0),e=r([o.Component({selector:"ngb-timepicker",styles:["\n    .ngb-tp {\n      display: -ms-flexbox;\n      display: flex;\n      -ms-flex-align: center;\n      align-items: center;\n    }\n\n    .ngb-tp-hour, .ngb-tp-minute, .ngb-tp-second, .ngb-tp-meridian {\n      display: -ms-flexbox;\n      display: flex;\n      -ms-flex-direction: column;\n      flex-direction: column;\n      -ms-flex-align: center;\n      align-items: center;\n      -ms-flex-pack: distribute;\n      justify-content: space-around;\n    }\n\n    .ngb-tp-spacer {\n      width: 1em;\n      text-align: center;\n    }\n\n    .chevron::before {\n      border-style: solid;\n      border-width: 0.29em 0.29em 0 0;\n      content: '';\n      display: inline-block;\n      height: 0.69em;\n      left: 0.05em;\n      position: relative;\n      top: 0.15em;\n      transform: rotate(-45deg);\n      -webkit-transform: rotate(-45deg);\n      -ms-transform: rotate(-45deg);\n      vertical-align: middle;\n      width: 0.71em;\n    }\n\n    .chevron.bottom:before {\n      top: -.3em;\n      -webkit-transform: rotate(135deg);\n      -ms-transform: rotate(135deg);\n      transform: rotate(135deg);\n    }\n\n    input {\n      text-align: center;\n      display: inline-block;\n      width: auto;\n    }\n  "],template:'\n    <fieldset [disabled]="disabled" [class.disabled]="disabled">\n      <div class="ngb-tp">\n        <div class="ngb-tp-hour">\n          <button *ngIf="spinners" type="button" class="btn btn-link" [ngClass]="setButtonSize()" (click)="changeHour(hourStep)"\n            [disabled]="disabled" [class.disabled]="disabled">\n            <span class="chevron"></span>\n            <span class="sr-only">Increment hours</span>\n          </button>\n          <input type="text" class="form-control" [ngClass]="setFormControlSize()" maxlength="2" size="2" placeholder="HH"\n            [value]="formatHour(model?.hour)" (change)="updateHour($event.target.value)"\n            [readonly]="readonlyInputs" [disabled]="disabled" aria-label="Hours">\n          <button *ngIf="spinners" type="button" class="btn btn-link" [ngClass]="setButtonSize()" (click)="changeHour(-hourStep)"\n            [disabled]="disabled" [class.disabled]="disabled">\n            <span class="chevron bottom"></span>\n            <span class="sr-only">Decrement hours</span>\n          </button>\n        </div>\n        <div class="ngb-tp-spacer">:</div>\n        <div class="ngb-tp-minute">\n          <button *ngIf="spinners" type="button" class="btn btn-link" [ngClass]="setButtonSize()" (click)="changeMinute(minuteStep)"\n            [disabled]="disabled" [class.disabled]="disabled">\n            <span class="chevron"></span>\n            <span class="sr-only">Increment minutes</span>\n          </button>\n          <input type="text" class="form-control" [ngClass]="setFormControlSize()" maxlength="2" size="2" placeholder="MM"\n            [value]="formatMinSec(model?.minute)" (change)="updateMinute($event.target.value)"\n            [readonly]="readonlyInputs" [disabled]="disabled" aria-label="Minutes">\n          <button *ngIf="spinners" type="button" class="btn btn-link" [ngClass]="setButtonSize()" (click)="changeMinute(-minuteStep)"\n            [disabled]="disabled" [class.disabled]="disabled">\n            <span class="chevron bottom"></span>\n            <span class="sr-only">Decrement minutes</span>\n          </button>\n        </div>\n        <div *ngIf="seconds" class="ngb-tp-spacer">:</div>\n        <div *ngIf="seconds" class="ngb-tp-second">\n          <button *ngIf="spinners" type="button" class="btn btn-link" [ngClass]="setButtonSize()" (click)="changeSecond(secondStep)"\n            [disabled]="disabled" [class.disabled]="disabled">\n            <span class="chevron"></span>\n            <span class="sr-only">Increment seconds</span>\n          </button>\n          <input type="text" class="form-control" [ngClass]="setFormControlSize()" maxlength="2" size="2" placeholder="SS"\n            [value]="formatMinSec(model?.second)" (change)="updateSecond($event.target.value)"\n            [readonly]="readonlyInputs" [disabled]="disabled" aria-label="Seconds">\n          <button *ngIf="spinners" type="button" class="btn btn-link" [ngClass]="setButtonSize()" (click)="changeSecond(-secondStep)"\n            [disabled]="disabled" [class.disabled]="disabled">\n            <span class="chevron bottom"></span>\n            <span class="sr-only">Decrement seconds</span>\n          </button>\n        </div>\n        <div *ngIf="meridian" class="ngb-tp-spacer"></div>\n        <div *ngIf="meridian" class="ngb-tp-meridian">\n          <button type="button" class="btn btn-outline-primary" [ngClass]="setButtonSize()"\n            [disabled]="disabled" [class.disabled]="disabled"\n            (click)="toggleMeridian()">{{model?.hour >= 12 ? \'PM\' : \'AM\'}}</button>\n        </div>\n      </div>\n    </fieldset>\n  ',providers:[u]}),i("design:paramtypes",[l.NgbTimepickerConfig])],e)}();t.NgbTimepicker=p},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(72),a=n(25),s=n(25);t.NgbTooltipConfig=s.NgbTooltipConfig;var c=n(72);t.NgbTooltip=c.NgbTooltip;var l=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[a.NgbTooltipConfig]}},e=t=r([i.NgModule({declarations:[o.NgbTooltip,o.NgbTooltipWindow],exports:[o.NgbTooltip],entryComponents:[o.NgbTooltipWindow]})],e);var t}();t.NgbTooltipModule=l},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(62),s=n(7),c=n(10),l=n(25),u=0,p=function(){function e(e,t){this._element=e,this._renderer=t,this.placement="top"}return e.prototype.applyPlacement=function(e){this._renderer.removeClass(this._element.nativeElement,"bs-tooltip-"+this.placement.toString().split("-")[0]),this._renderer.removeClass(this._element.nativeElement,"bs-tooltip-"+this.placement.toString()),this.placement=e,this._renderer.addClass(this._element.nativeElement,"bs-tooltip-"+this.placement.toString().split("-")[0]),this._renderer.addClass(this._element.nativeElement,"bs-tooltip-"+this.placement.toString())},r([o.Input(),i("design:type",String)],e.prototype,"placement",void 0),r([o.Input(),i("design:type",String)],e.prototype,"id",void 0),e=r([o.Component({selector:"ngb-tooltip-window",changeDetection:o.ChangeDetectionStrategy.OnPush,host:{"[class]":'"tooltip show bs-tooltip-" + placement.split("-")[0]+" bs-tooltip-" + placement',role:"tooltip","[id]":"id"},template:'<div class="arrow"></div><div class="tooltip-inner"><ng-content></ng-content></div>',styles:["\n    :host.bs-tooltip-top .arrow, :host.bs-tooltip-bottom .arrow {\n      left: calc(50% - 0.4rem);\n    }\n\n    :host.bs-tooltip-top-left .arrow, :host.bs-tooltip-bottom-left .arrow {\n      left: 1em;\n    }\n\n    :host.bs-tooltip-top-right .arrow, :host.bs-tooltip-bottom-right .arrow {\n      left: auto;\n      right: 0.8rem;\n    }\n\n    :host.bs-tooltip-left .arrow, :host.bs-tooltip-right .arrow {\n      top: calc(50% - 0.4rem);\n    }\n    \n    :host.bs-tooltip-left-top .arrow, :host.bs-tooltip-right-top .arrow {\n      top: 0.4rem;\n    }\n\n    :host.bs-tooltip-left-bottom .arrow, :host.bs-tooltip-right-bottom .arrow {\n      top: auto;\n      bottom: 0.4rem;\n    }\n  "]}),i("design:paramtypes",[o.ElementRef,o.Renderer2])],e)}();t.NgbTooltipWindow=p;var h=function(){function e(e,t,n,r,i,a,l){var h=this;this._elementRef=e,this._renderer=t,this.shown=new o.EventEmitter,this.hidden=new o.EventEmitter,this._ngbTooltipWindowId="ngb-tooltip-"+u++,this.placement=a.placement,this.triggers=a.triggers,this.container=a.container,this._popupService=new c.PopupService(p,n,i,t,r),this._zoneSubscription=l.onStable.subscribe(function(){h._windowRef&&h._windowRef.instance.applyPlacement(s.positionElements(h._elementRef.nativeElement,h._windowRef.location.nativeElement,h.placement,"body"===h.container))})}return Object.defineProperty(e.prototype,"ngbTooltip",{get:function(){return this._ngbTooltip},set:function(e){this._ngbTooltip=e,!e&&this._windowRef&&this.close()},enumerable:!0,configurable:!0}),e.prototype.open=function(e){!this._windowRef&&this._ngbTooltip&&(this._windowRef=this._popupService.open(this._ngbTooltip,e),this._windowRef.instance.id=this._ngbTooltipWindowId,this._renderer.setAttribute(this._elementRef.nativeElement,"aria-describedby",this._ngbTooltipWindowId),"body"===this.container&&window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement),this._windowRef.instance.placement=Array.isArray(this.placement)?this.placement[0]:this.placement,this._windowRef.changeDetectorRef.detectChanges(),this._windowRef.changeDetectorRef.markForCheck(),this._windowRef.instance.applyPlacement(s.positionElements(this._elementRef.nativeElement,this._windowRef.location.nativeElement,this.placement,"body"===this.container)),this.shown.emit())},e.prototype.close=function(){null!=this._windowRef&&(this._renderer.removeAttribute(this._elementRef.nativeElement,"aria-describedby"),this._popupService.close(),this._windowRef=null,this.hidden.emit())},e.prototype.toggle=function(){this._windowRef?this.close():this.open()},e.prototype.isOpen=function(){return null!=this._windowRef},e.prototype.ngOnInit=function(){this._unregisterListenersFn=a.listenToTriggers(this._renderer,this._elementRef.nativeElement,this.triggers,this.open.bind(this),this.close.bind(this),this.toggle.bind(this))},e.prototype.ngOnDestroy=function(){this.close(),this._unregisterListenersFn&&this._unregisterListenersFn(),this._zoneSubscription.unsubscribe()},r([o.Input(),i("design:type",Object)],e.prototype,"placement",void 0),r([o.Input(),i("design:type",String)],e.prototype,"triggers",void 0),r([o.Input(),i("design:type",String)],e.prototype,"container",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"shown",void 0),r([o.Output(),i("design:type",Object)],e.prototype,"hidden",void 0),r([o.Input(),i("design:type",Object),i("design:paramtypes",[Object])],e.prototype,"ngbTooltip",null),e=r([o.Directive({selector:"[ngbTooltip]",exportAs:"ngbTooltip"}),i("design:paramtypes",[o.ElementRef,o.Renderer2,o.Injector,o.ComponentFactoryResolver,o.ViewContainerRef,l.NgbTooltipConfig,o.NgZone])],e)}();t.NgbTooltip=h},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(74),s=n(26),c=n(75),l=n(27),u=n(74);t.NgbHighlight=u.NgbHighlight;var p=n(26);t.NgbTypeaheadWindow=p.NgbTypeaheadWindow;var h=n(27);t.NgbTypeaheadConfig=h.NgbTypeaheadConfig;var d=n(75);t.NgbTypeahead=d.NgbTypeahead;var f=function(){function e(){}return t=e,e.forRoot=function(){return{ngModule:t,providers:[l.NgbTypeaheadConfig]}},e=t=r([i.NgModule({declarations:[c.NgbTypeahead,a.NgbHighlight,s.NgbTypeaheadWindow],exports:[c.NgbTypeahead,a.NgbHighlight],imports:[o.CommonModule],entryComponents:[s.NgbTypeaheadWindow]})],e);var t}();t.NgbTypeaheadModule=f},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(1),s=function(){function e(){this.highlightClass="ngb-highlight"}return e.prototype.ngOnChanges=function(e){var t=a.toString(this.result),n=t.toLowerCase(),r=a.toString(this.term).toLowerCase(),i=0;r.length>0?this.parts=n.split(new RegExp("("+a.regExpEscape(r)+")")).map(function(e){var n=t.substr(i,e.length);return i+=e.length,n}):this.parts=[t]},r([o.Input(),i("design:type",Object)],e.prototype,"highlightClass",void 0),r([o.Input(),i("design:type",String)],e.prototype,"result",void 0),r([o.Input(),i("design:type",String)],e.prototype,"term",void 0),e=r([o.Component({selector:"ngb-highlight",changeDetection:o.ChangeDetectionStrategy.OnPush,template:'<ng-template ngFor [ngForOf]="parts" let-part let-isOdd="odd"><span *ngIf="isOdd" class="{{highlightClass}}">{{part}}</span><ng-template [ngIf]="!isOdd">{{part}}</ng-template></ng-template>',styles:["\n    .ngb-highlight {\n      font-weight: bold;\n    }\n  "]})],e)}();t.NgbHighlight=s},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o,a=n(0),s=n(4),c=n(82),l=n(83),u=n(84),p=n(85),h=n(86),d=n(7),f=n(26),g=n(10),m=n(1),y=n(27);!function(e){e[e.Tab=9]="Tab",e[e.Enter=13]="Enter",e[e.Escape=27]="Escape",e[e.ArrowUp=38]="ArrowUp",e[e.ArrowDown=40]="ArrowDown"}(o||(o={}));var b={provide:s.NG_VALUE_ACCESSOR,useExisting:a.forwardRef(function(){return _}),multi:!0},v=0,_=function(){function e(e,t,n,r,i,o,s){var l=this;this._elementRef=e,this._viewContainerRef=t,this._renderer=n,this._injector=r,this.placement="bottom-left",this.selectItem=new a.EventEmitter,this.popupId="ngb-typeahead-"+v++,this._onTouched=function(){},this._onChange=function(e){},this.container=o.container,this.editable=o.editable,this.focusFirst=o.focusFirst,this.showHint=o.showHint,this.placement=o.placement,this._valueChanges=h.fromEvent(e.nativeElement,"input",function(e){return e.target.value}),this._resubscribeTypeahead=new c.BehaviorSubject(null),this._popupService=new g.PopupService(f.NgbTypeaheadWindow,r,t,n,i),this._zoneSubscription=s.onStable.subscribe(function(){l.isPopupOpen()&&d.positionElements(l._elementRef.nativeElement,l._windowRef.location.nativeElement,l.placement,"body"===l.container)})}return e.prototype.ngOnInit=function(){var e=this,t=u._do.call(this._valueChanges,function(t){e._inputValueBackup=t,e.editable&&e._onChange(t)}),n=l.letProto.call(t,this.ngbTypeahead),r=u._do.call(n,function(){e.editable||e._onChange(void 0)}),i=p.switchMap.call(this._resubscribeTypeahead,function(){return r});this._subscription=this._subscribeToUserInput(i)},e.prototype.ngOnDestroy=function(){this._closePopup(),this._unsubscribeFromUserInput(),this._zoneSubscription.unsubscribe()},e.prototype.registerOnChange=function(e){this._onChange=e},e.prototype.registerOnTouched=function(e){this._onTouched=e},e.prototype.writeValue=function(e){this._writeInputValue(this._formatItemForInput(e))},e.prototype.setDisabledState=function(e){this._renderer.setProperty(this._elementRef.nativeElement,"disabled",e)},e.prototype.onDocumentClick=function(e){e.target!==this._elementRef.nativeElement&&this.dismissPopup()},e.prototype.dismissPopup=function(){this.isPopupOpen()&&(this._closePopup(),this._writeInputValue(this._inputValueBackup))},e.prototype.isPopupOpen=function(){return null!=this._windowRef},e.prototype.handleBlur=function(){this._resubscribeTypeahead.next(null),this._onTouched()},e.prototype.handleKeyDown=function(e){if(this.isPopupOpen()&&o[m.toString(e.which)])switch(e.which){case o.ArrowDown:e.preventDefault(),this._windowRef.instance.next(),this._showHint();break;case o.ArrowUp:e.preventDefault(),this._windowRef.instance.prev(),this._showHint();break;case o.Enter:case o.Tab:var t=this._windowRef.instance.getActive();m.isDefined(t)&&(e.preventDefault(),e.stopPropagation(),this._selectResult(t)),this._closePopup();break;case o.Escape:e.preventDefault(),this._resubscribeTypeahead.next(null),this.dismissPopup()}},e.prototype._openPopup=function(){var e=this;this.isPopupOpen()||(this._inputValueBackup=this._elementRef.nativeElement.value,this._windowRef=this._popupService.open(),this._windowRef.instance.id=this.popupId,this._windowRef.instance.selectEvent.subscribe(function(t){return e._selectResultClosePopup(t)}),this._windowRef.instance.activeChangeEvent.subscribe(function(t){return e.activeDescendant=t}),"body"===this.container&&window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement))},e.prototype._closePopup=function(){this._popupService.close(),this._windowRef=null,this.activeDescendant=void 0},e.prototype._selectResult=function(e){var t=!1;this.selectItem.emit({item:e,preventDefault:function(){t=!0}}),this._resubscribeTypeahead.next(null),t||(this.writeValue(e),this._onChange(e))},e.prototype._selectResultClosePopup=function(e){this._selectResult(e),this._closePopup()},e.prototype._showHint=function(){if(this.showHint&&this._windowRef.instance.hasActive()&&null!=this._inputValueBackup){var e=this._inputValueBackup.toLowerCase(),t=this._formatItemForInput(this._windowRef.instance.getActive());e===t.substr(0,this._inputValueBackup.length).toLowerCase()?(this._writeInputValue(this._inputValueBackup+t.substr(this._inputValueBackup.length)),this._elementRef.nativeElement.setSelectionRange.apply(this._elementRef.nativeElement,[this._inputValueBackup.length,t.length])):this.writeValue(this._windowRef.instance.getActive())}},e.prototype._formatItemForInput=function(e){return e&&this.inputFormatter?this.inputFormatter(e):m.toString(e)},e.prototype._writeInputValue=function(e){this._renderer.setProperty(this._elementRef.nativeElement,"value",m.toString(e))},e.prototype._subscribeToUserInput=function(e){var t=this;return e.subscribe(function(e){e&&0!==e.length?(t._openPopup(),t._windowRef.instance.focusFirst=t.focusFirst,t._windowRef.instance.results=e,t._windowRef.instance.term=t._elementRef.nativeElement.value,t.resultFormatter&&(t._windowRef.instance.formatter=t.resultFormatter),t.resultTemplate&&(t._windowRef.instance.resultTemplate=t.resultTemplate),t._windowRef.changeDetectorRef.detectChanges(),t._showHint()):t._closePopup()})},e.prototype._unsubscribeFromUserInput=function(){this._subscription&&this._subscription.unsubscribe(),this._subscription=null},r([a.Input(),i("design:type",String)],e.prototype,"container",void 0),r([a.Input(),i("design:type",Boolean)],e.prototype,"editable",void 0),r([a.Input(),i("design:type",Boolean)],e.prototype,"focusFirst",void 0),r([a.Input(),i("design:type",Function)],e.prototype,"inputFormatter",void 0),r([a.Input(),i("design:type",Function)],e.prototype,"ngbTypeahead",void 0),r([a.Input(),i("design:type",Function)],e.prototype,"resultFormatter",void 0),r([a.Input(),i("design:type",a.TemplateRef)],e.prototype,"resultTemplate",void 0),r([a.Input(),i("design:type",Boolean)],e.prototype,"showHint",void 0),r([a.Input(),i("design:type",Object)],e.prototype,"placement",void 0),r([a.Output(),i("design:type",Object)],e.prototype,"selectItem",void 0),e=r([a.Directive({selector:"input[ngbTypeahead]",exportAs:"ngbTypeahead",host:{"(blur)":"handleBlur()","[class.open]":"isPopupOpen()","(document:click)":"onDocumentClick($event)","(keydown)":"handleKeyDown($event)",autocomplete:"off",autocapitalize:"off",autocorrect:"off",role:"combobox","aria-multiline":"false","[attr.aria-autocomplete]":'showHint ? "both" : "list"',"[attr.aria-activedescendant]":"activeDescendant","[attr.aria-owns]":"isPopupOpen() ? popupId : null","[attr.aria-expanded]":"isPopupOpen()"},providers:[b]}),i("design:paramtypes",[a.ElementRef,a.ViewContainerRef,a.Renderer2,a.Injector,a.ComponentFactoryResolver,y.NgbTypeaheadConfig,a.NgZone])],e)}();t.NgbTypeahead=_},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(28),a=n(30),s=n(32),c=n(35),l=n(37),u=n(39),p=n(49),h=n(51),d=n(58),f=n(60),g=n(63),m=n(65),y=n(67),b=n(69),v=n(71),_=n(73),w=n(28);t.NgbAccordionModule=w.NgbAccordionModule,t.NgbAccordionConfig=w.NgbAccordionConfig,t.NgbAccordion=w.NgbAccordion,t.NgbPanel=w.NgbPanel,t.NgbPanelTitle=w.NgbPanelTitle,t.NgbPanelContent=w.NgbPanelContent;var E=n(30);t.NgbAlertModule=E.NgbAlertModule,t.NgbAlertConfig=E.NgbAlertConfig,t.NgbAlert=E.NgbAlert;var T=n(32);t.NgbButtonsModule=T.NgbButtonsModule,t.NgbCheckBox=T.NgbCheckBox,t.NgbRadioGroup=T.NgbRadioGroup;var k=n(35);t.NgbCarouselModule=k.NgbCarouselModule,t.NgbCarouselConfig=k.NgbCarouselConfig,t.NgbCarousel=k.NgbCarousel,t.NgbSlide=k.NgbSlide;var N=n(37);t.NgbCollapseModule=N.NgbCollapseModule,t.NgbCollapse=N.NgbCollapse;var S=n(39);t.NgbCalendar=S.NgbCalendar,t.NgbCalendarIslamicCivil=S.NgbCalendarIslamicCivil,t.NgbCalendarIslamicUmalqura=S.NgbCalendarIslamicUmalqura,t.NgbDatepickerModule=S.NgbDatepickerModule,t.NgbDatepickerI18n=S.NgbDatepickerI18n,t.NgbDatepickerConfig=S.NgbDatepickerConfig,t.NgbDateParserFormatter=S.NgbDateParserFormatter,t.NgbDateAdapter=S.NgbDateAdapter,t.NgbDatepicker=S.NgbDatepicker,t.NgbInputDatepicker=S.NgbInputDatepicker;var R=n(49);t.NgbDropdownModule=R.NgbDropdownModule,t.NgbDropdownConfig=R.NgbDropdownConfig,t.NgbDropdown=R.NgbDropdown;var C=n(51);t.NgbModalModule=C.NgbModalModule,t.NgbModal=C.NgbModal,t.NgbActiveModal=C.NgbActiveModal,t.NgbModalRef=C.NgbModalRef,t.ModalDismissReasons=C.ModalDismissReasons;var x=n(58);t.NgbPaginationModule=x.NgbPaginationModule,t.NgbPaginationConfig=x.NgbPaginationConfig,t.NgbPagination=x.NgbPagination;var O=n(60);t.NgbPopoverModule=O.NgbPopoverModule,t.NgbPopoverConfig=O.NgbPopoverConfig,t.NgbPopover=O.NgbPopover;var D=n(63);t.NgbProgressbarModule=D.NgbProgressbarModule,t.NgbProgressbarConfig=D.NgbProgressbarConfig,t.NgbProgressbar=D.NgbProgressbar;var A=n(65);t.NgbRatingModule=A.NgbRatingModule,t.NgbRatingConfig=A.NgbRatingConfig,t.NgbRating=A.NgbRating;var M=n(67);t.NgbTabsetModule=M.NgbTabsetModule,t.NgbTabsetConfig=M.NgbTabsetConfig,t.NgbTabset=M.NgbTabset,t.NgbTab=M.NgbTab,t.NgbTabContent=M.NgbTabContent,t.NgbTabTitle=M.NgbTabTitle;var I=n(69);t.NgbTimepickerModule=I.NgbTimepickerModule,t.NgbTimepickerConfig=I.NgbTimepickerConfig,t.NgbTimepicker=I.NgbTimepicker;var P=n(71);t.NgbTooltipModule=P.NgbTooltipModule,t.NgbTooltipConfig=P.NgbTooltipConfig,t.NgbTooltip=P.NgbTooltip;var L=n(73);t.NgbHighlight=L.NgbHighlight,t.NgbTypeaheadModule=L.NgbTypeaheadModule,t.NgbTypeaheadConfig=L.NgbTypeaheadConfig,t.NgbTypeahead=L.NgbTypeahead;var j=[o.NgbAccordionModule,a.NgbAlertModule,s.NgbButtonsModule,c.NgbCarouselModule,l.NgbCollapseModule,u.NgbDatepickerModule,p.NgbDropdownModule,h.NgbModalModule,d.NgbPaginationModule,f.NgbPopoverModule,g.NgbProgressbarModule,m.NgbRatingModule,y.NgbTabsetModule,b.NgbTimepickerModule,v.NgbTooltipModule,_.NgbTypeaheadModule],B=function(){function e(){}return e=r([i.NgModule({imports:[a.NgbAlertModule.forRoot(),s.NgbButtonsModule.forRoot(),l.NgbCollapseModule.forRoot(),g.NgbProgressbarModule.forRoot(),v.NgbTooltipModule.forRoot(),_.NgbTypeaheadModule.forRoot(),o.NgbAccordionModule.forRoot(),c.NgbCarouselModule.forRoot(),u.NgbDatepickerModule.forRoot(),p.NgbDropdownModule.forRoot(),h.NgbModalModule.forRoot(),d.NgbPaginationModule.forRoot(),f.NgbPopoverModule.forRoot(),g.NgbProgressbarModule.forRoot(),m.NgbRatingModule.forRoot(),y.NgbTabsetModule.forRoot(),b.NgbTimepickerModule.forRoot(),v.NgbTooltipModule.forRoot()],exports:j})],e)}();t.NgbRootModule=B;var H=function(){function e(){}return e.forRoot=function(){return{ngModule:B}},e=r([i.NgModule({imports:j,exports:j})],e)}();t.NgbModule=H},function(e,t){e.exports=r},function(e,t){e.exports=i},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var o,a=n(0),s=n(15),c=n(5),l=n(1);!function(e){e[e.Enter=13]="Enter",e[e.Space=32]="Space",e[e.PageUp=33]="PageUp",e[e.PageDown=34]="PageDown",e[e.End=35]="End",e[e.Home=36]="Home",e[e.ArrowLeft=37]="ArrowLeft",e[e.ArrowUp=38]="ArrowUp",e[e.ArrowRight=39]="ArrowRight",e[e.ArrowDown=40]="ArrowDown"}(o||(o={}));var u=function(){function e(e,t){var n=this;this._service=e,this._calendar=t,e.model$.subscribe(function(e){n._minDate=e.minDate,n._maxDate=e.maxDate,n._firstViewDate=e.firstDate,n._lastViewDate=e.lastDate})}return e.prototype.processKey=function(e){if(o[l.toString(e.which)]){switch(e.which){case o.PageUp:this._service.focusMove(e.shiftKey?"y":"m",-1);break;case o.PageDown:this._service.focusMove(e.shiftKey?"y":"m",1);break;case o.End:this._service.focus(e.shiftKey?this._maxDate:this._lastViewDate);break;case o.Home:this._service.focus(e.shiftKey?this._minDate:this._firstViewDate);break;case o.ArrowLeft:this._service.focusMove("d",-1);break;case o.ArrowUp:this._service.focusMove("d",-this._calendar.getDaysPerWeek());break;case o.ArrowRight:this._service.focusMove("d",1);break;case o.ArrowDown:this._service.focusMove("d",this._calendar.getDaysPerWeek());break;case o.Enter:case o.Space:this._service.focusSelect();break;default:return}e.preventDefault(),e.stopPropagation()}},e=r([a.Injectable(),i("design:paramtypes",[s.NgbDatepickerService,c.NgbCalendar])],e)}();t.NgbDatepickerKeyMapService=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(47),s=n(48),c=n(3),l=n(0),u=new Date(1882,10,12),p=new Date(2174,10,25),h=864e5,d=new a.NgbCalendarIslamicCivil,f=["101010101010","110101010100","111011001001","011011010100","011011101010","001101101100","101010101101","010101010101","011010101001","011110010010","101110101001","010111010100","101011011010","010101011100","110100101101","011010010101","011101001010","101101010100","101101101010","010110101101","010010101110","101001001111","010100010111","011010001011","011010100101","101011010101","001011010110","100101011011","010010011101","101001001101","110100100110","110110010101","010110101100","100110110110","001010111010","101001011011","010100101011","101010010101","011011001010","101011101001","001011110100","100101110110","001010110110","100101010110","101011001010","101110100100","101111010010","010111011001","001011011100","100101101101","010101001101","101010100101","101101010010","101110100101","010110110100","100110110110","010101010111","001010010111","010101001011","011010100011","011101010010","101101100101","010101101010","101010101011","010100101011","110010010101","110101001010","110110100101","010111001010","101011010110","100101010111","010010101011","100101001011","101010100101","101101010010","101101101010","010101110101","001001110110","100010110111","010001011011","010101010101","010110101001","010110110100","100111011010","010011011101","001001101110","100100110110","101010101010","110101010100","110110110010","010111010101","001011011010","100101011011","010010101011","101001010101","101101001001","101101100100","101101110001","010110110100","101010110101","101001010101","110100100101","111010010010","111011001001","011011010100","101011101001","100101101011","010010101011","101010010011","110101001001","110110100100","110110110010","101010111001","010010111010","101001011011","010100101011","101010010101","101100101010","101101010101","010101011100","010010111101","001000111101","100100011101","101010010101","101101001010","101101011010","010101101101","001010110110","100100111011","010010011011","011001010101","011010101001","011101010100","101101101010","010101101100","101010101101","010101010101","101100101001","101110010010","101110101001","010111010100","101011011010","010101011010","101010101011","010110010101","011101001001","011101100100","101110101010","010110110101","001010110110","101001010110","111001001101","101100100101","101101010010","101101101010","010110101101","001010101110","100100101111","010010010111","011001001011","011010100101","011010101100","101011010110","010101011101","010010011101","101001001101","110100010110","110110010101","010110101010","010110110101","001011011010","100101011011","010010101101","010110010101","011011001010","011011100100","101011101010","010011110101","001010110110","100101010110","101010101010","101101010100","101111010010","010111011001","001011101010","100101101101","010010101101","101010010101","101101001010","101110100101","010110110010","100110110101","010011010110","101010010111","010101000111","011010010011","011101001001","101101010101","010101101010","101001101011","010100101011","101010001011","110101000110","110110100011","010111001010","101011010110","010011011011","001001101011","100101001011","101010100101","101101010010","101101101001","010101110101","000101110110","100010110111","001001011011","010100101011","010101100101","010110110100","100111011010","010011101101","000101101101","100010110110","101010100110","110101010010","110110101001","010111010100","101011011010","100101011011","010010101011","011001010011","011100101001","011101100010","101110101001","010110110010","101010110101","010101010101","101100100101","110110010010","111011001001","011011010010","101011101001","010101101011","010010101011","101001010101","110100101001","110101010100","110110101010","100110110101","010010111010","101000111011","010010011011","101001001101","101010101010","101011010101","001011011010","100101011101","010001011110","101000101110","110010011010","110101010101","011010110010","011010111001","010010111010","101001011101","010100101101","101010010101","101101010010","101110101000","101110110100","010110111001","001011011010","100101011010","101101001010","110110100100","111011010001","011011101000","101101101010","010101101101","010100110101","011010010101","110101001010","110110101000","110111010100","011011011010","010101011011","001010011101","011000101011","101100010101","101101001010","101110010101","010110101010","101010101110","100100101110","110010001111","010100100111","011010010101","011010101010","101011010110","010101011101","001010011101"];var g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.fromGregorian=function(e){var t,n,r,i=1,o=0,a=1300,s=(t=e,n=u,r=Math.abs(t.getTime()-n.getTime()),Math.round(r/h));if(!(e.getTime()-u.getTime()>=0&&e.getTime()-p.getTime()<=0))return d.fromGregorian(e);for(var l=1300,g=0;g<f.length;g++,l++)for(var m=0;m<12;m++){var y=+f[g][m]+29;if(s<=y)return(i=s+1)>y&&(i=1,m++),m>11&&(m=0,l++),o=m,a=l,new c.NgbDate(a,o+1,i);s-=y}},t.prototype.toGregorian=function(e){var t=e.year,n=e.month-1,r=e.day,i=new Date(u),o=r-1;if(t>=1300&&t<=1600){for(var a=0;a<t-1300;a++)for(var s=0;s<12;s++)o+=+f[a][s]+29;for(s=0;s<n;s++)o+=+f[t-1300][s]+29;i.setDate(u.getDate()+o)}else i=d.toGregorian(e);return i},t.prototype.getDaysInIslamicMonth=function(e,t){return t>=1300&&t<=1600?"1"===f[t-1300].charAt(e-1)?30:29:d.getDaysInIslamicMonth(e,t)},t.prototype.getNext=function(e,t,n){switch(void 0===t&&(t="d"),void 0===n&&(n=1),e=c.NgbDate.from(e),t){case"y":return(e=this.setYear(e,e.year+n)).month=1,e.day=1,e;case"m":return(e=this.setMonth(e,e.month+n)).day=1,e;case"d":return this.setDay(e,e.day+n);default:return e}},t.prototype.getPrev=function(e,t,n){return void 0===t&&(t="d"),void 0===n&&(n=1),this.getNext(e,t,-n)},t.prototype.getWeekday=function(e){var t=this.toGregorian(e).getDay();return 0===t?7:t},t.prototype.getWeekNumber=function(e,t){7===t&&(t=0);var n=e[(11-t)%7],r=this.toGregorian(n);r.setDate(r.getDate()+4-(r.getDay()||7));var i=r.getTime(),o=this.toGregorian(new c.NgbDate(n.year,1,1));return Math.floor(Math.round((i-o.getTime())/h)/7)+1},t.prototype.getToday=function(){return this.fromGregorian(new Date)},t=o([l.Injectable()],t)}(s.NgbCalendarHijri);t.NgbCalendarIslamicUmalqura=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=function(){function e(e,t,n){this.hour=r.toInteger(e),this.minute=r.toInteger(t),this.second=r.toInteger(n)}return e.prototype.changeHour=function(e){void 0===e&&(e=1),this.updateHour((isNaN(this.hour)?0:this.hour)+e)},e.prototype.updateHour=function(e){r.isNumber(e)?this.hour=(e<0?24+e:e)%24:this.hour=NaN},e.prototype.changeMinute=function(e){void 0===e&&(e=1),this.updateMinute((isNaN(this.minute)?0:this.minute)+e)},e.prototype.updateMinute=function(e){r.isNumber(e)?(this.minute=e%60<0?60+e%60:e%60,this.changeHour(Math.floor(e/60))):this.minute=NaN},e.prototype.changeSecond=function(e){void 0===e&&(e=1),this.updateSecond((isNaN(this.second)?0:this.second)+e)},e.prototype.updateSecond=function(e){r.isNumber(e)?(this.second=e<0?60+e%60:e%60,this.changeMinute(Math.floor(e/60))):this.second=NaN},e.prototype.isValid=function(e){return void 0===e&&(e=!0),r.isNumber(this.hour)&&r.isNumber(this.minute)&&(!e||r.isNumber(this.second))},e.prototype.toString=function(){return(this.hour||0)+":"+(this.minute||0)+":"+(this.second||0)},e}();t.NgbTime=i},function(e,t){e.exports=o},function(e,t){e.exports=a},function(e,t){e.exports=s},function(e,t){e.exports=c},function(e,t){e.exports=l}])},e.exports=r(n(0),n(5),n(26),n(49),n(25),n(89),n(88),n(87),n(84),n(80))},function(e,t,n){e.exports=n(1)(41)},function(e,t,n){"use strict";n.r(t);n(114),n(113),n(112);var r=n(5),i=n(0),o=n(7),a=n(56),s=n(26),c=n(6),l=n(10),u=n(55),p=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},h=function(){function e(){}return e=p([Object(i.Component)({selector:"app",template:n(74),styles:[n(73)]})],e)}(),d=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},f=function(){function e(){}return e=d([Object(i.Component)({selector:"nav-menu",template:n(71),styles:[n(70)]})],e)}(),g=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},m=function(){function e(){}return e=g([Object(i.Component)({selector:"home",template:n(68)})],e)}(),y=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},b=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},v=function(e,t){return function(n,r){t(n,r,e)}},_=function(){function e(e,t){var n=this;e.get(t+"api/SampleData/WeatherForecasts").subscribe(function(e){n.forecasts=e},function(e){return console.error(e)})}return e=y([Object(i.Component)({selector:"fetchdata",template:n(67)}),v(1,Object(i.Inject)("BASE_URL")),b("design:paramtypes",[c.HttpClient,String])],e)}(),w=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},E=function(){function e(){this.currentCount=0}return e.prototype.incrementCounter=function(){this.currentCount++},e=w([Object(i.Component)({selector:"counter",template:n(66)})],e)}(),T=n(4),k=(n(65),n(64),function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}),N=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},S=function(e,t){return function(n,r){t(n,r,e)}},R=function(){function e(e,t){this.httpClient=e,this.apiUrl=t}return e.prototype.getBuildings=function(){var e=this;return this.httpClient.get(this.apiUrl+"Building",{responseType:"text"}).map(function(t){return e.extractBuildings(t)}).catch(this.handleError)},e.prototype.getBuilding=function(e){var t=this;return this.httpClient.get(this.apiUrl+"Building/"+e,{responseType:"text"}).map(function(e){return t.extractBuilding(e)}).catch(this.handleError)},e.prototype.addBuilding=function(e){return this.httpClient.post(this.apiUrl+"Building/",e).map(function(){return null}).catch(this.handleError)},e.prototype.updateBuilding=function(e,t){return this.httpClient.put(this.apiUrl+"Building/"+e,t).map(function(){return null}).catch(this.handleError)},e.prototype.deleteBuilding=function(e){return this.httpClient.delete(this.apiUrl+"Building/"+e).map(function(){return null}).catch(this.handleError)},e.prototype.handleError=function(e){return T.Observable.throw(e)},e.prototype.extractBuilding=function(e){var t=JSON.parse(e),n=t.PurchaseDate,r=t.SellDate,i=t.CreatedOn,o=t.LastUpdatedOn,a=JSON.parse(e);return a.PurchaseDate=new Date(n),null!=r&&(a.SellDate=new Date(r)),a.CreatedOn=new Date(i),a.LastUpdatedOn=new Date(o),a},e.prototype.extractBuildings=function(e){for(var t=JSON.parse(e),n=[],r=0;r<t.length;r++){var i=t[r].PurchaseDate,o=t[r].SellDate,a=t[r].CreatedOn,s=t[r].LastUpdatedOn,c=t[r];c.PurchaseDate=new Date(i),null!=o&&(c.SellDate=new Date(o)),c.CreatedOn=new Date(a),c.LastUpdatedOn=new Date(s),n.push(c)}return n},e=k([Object(i.Injectable)(),S(1,Object(i.Inject)("API_URL")),N("design:paramtypes",[c.HttpClient,String])],e)}(),C=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},x=function(){function e(){}return e.prototype.log=function(e){console.log(new Date+": "+JSON.stringify(e))},e=C([Object(i.Injectable)()],e)}(),O=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},D=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},A=function(){function e(e,t){this.buildingservice=e,this.logservice=t}return e.prototype.ngOnInit=function(){this.getBuildings()},e.prototype.getBuildings=function(){var e=this;this.buildingservice.getBuildings().subscribe(function(t){return e.buildings=t},function(t){return e.handleError(t)})},e.prototype.delete=function(e){var t=this;confirm("Are you sure you want to delete this building?")&&this.buildingservice.deleteBuilding(e).subscribe(function(){return t.getBuildings()},function(e){return t.handleError(e)})},e.prototype.handleError=function(e){var t="";t="Status: "+e.status,t+=" Status Text: "+e.statusText,alert(t),this.logservice.log(t)},e=O([Object(i.Component)({selector:"buildings",template:n(61)}),D("design:paramtypes",[R,x])],e)}(),M=(n(60),function(){return function(){}}()),I=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},P=function(){function e(){}return e.prototype.getStates=function(){return[{id:"AL",name:"Alabama"},{id:"AK",name:"Alaska"},{id:"AZ",name:"Arizona"},{id:"AR",name:"Arkansas"},{id:"CA",name:"California"},{id:"CO",name:"Colorado"},{id:"CT",name:"Connecticut"},{id:"DE",name:"Delaware"},{id:"FL",name:"Florida"},{id:"GA",name:"Georgia"},{id:"HI",name:"Hawaii"},{id:"ID",name:"Idaho"},{id:"IL",name:"Illinois"},{id:"IN",name:"Indiana"},{id:"IA",name:"Iowa"},{id:"KS",name:"Kansas"},{id:"KY",name:"Kentucky"},{id:"LA",name:"Louisiana"},{id:"ME",name:"Maine"},{id:"MD",name:"Maryland"},{id:"MA",name:"Massachusetts"},{id:"MI",name:"Michigan"},{id:"MN",name:"Minnesota"},{id:"MS",name:"Mississippi"},{id:"MO",name:"Missouri"},{id:"MT",name:"Montana"},{id:"NE",name:"Nebraska"},{id:"NV",name:"Nevada"},{id:"NH",name:"New Hampshire"},{id:"NJ",name:"New Jersey"},{id:"NM",name:"New Mexico"},{id:"NY",name:"New York"},{id:"NC",name:"North Carolina"},{id:"ND",name:"North Dakota"},{id:"OH",name:"Ohio"},{id:"OK",name:"Oklahoma"},{id:"OR",name:"Oregon"},{id:"PA",name:"Pennsylvania"},{id:"RI",name:"Rhode Island"},{id:"SC",name:"South Carolina"},{id:"SD",name:"South Dakota"},{id:"TN",name:"Tennessee"},{id:"TX",name:"Texas"},{id:"UT",name:"Utah"},{id:"VT",name:"Vermont"},{id:"VA",name:"Virginia"},{id:"WA",name:"Washington"},{id:"WV",name:"West Virginia"},{id:"WI",name:"Wisconsin"},{id:"WY",name:"Wyoming"}]},e=I([Object(i.Injectable)()],e)}(),L=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},j=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},B=function(e,t){return function(n,r){t(n,r,e)}},H=function(){function e(e,t,n,r,i,o){this.buildingservice=e,this.logservice=t,this.activatedRoute=i,this.statesService=o,this.messages=[],this.router=n,this.states=o.getStates()}return e.prototype.ngOnInit=function(){this.getBuilding()},e.prototype.ngAfterViewInit=function(){},e.prototype.getBuilding=function(){var e=this,t=this.activatedRoute.snapshot.params.id;t>0?this.buildingservice.getBuilding(t).subscribe(function(t){return e.handleGetBuilding(t)},function(t){return e.handleError(t)}):this.building=new M},e.prototype.saveBuilding=function(){this.building.BuildingId>0?this.updateBuilding():this.addBuilding()},e.prototype.updateBuilding=function(){var e=this;this.buildingservice.updateBuilding(this.building.BuildingId,this.building).subscribe(function(){return e.goBack()},function(t){return e.handleError(t)})},e.prototype.addBuilding=function(){var e=this;this.buildingservice.addBuilding(this.building).subscribe(function(){return e.goBack()},function(t){return e.handleError(t)})},e.prototype.handleGetBuilding=function(e){this.building=e,this.title=e.BuildingName},e.prototype.handleError=function(e){var t="";t="Status: "+e.status,t+=" Status Text: "+e.statusText,alert(t),this.logservice.log(t)},e.prototype.goBack=function(){this.router.navigateByUrl("/buildings")},e=L([Object(i.Component)({selector:"building",template:n(58)}),B(3,Object(i.Inject)("BASE_URL")),j("design:paramtypes",[R,x,l.Router,String,l.ActivatedRoute,P])],e)}(),q=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},F=function(){function e(){}return e=q([Object(i.NgModule)({declarations:[h,f,E,_,A,H,m],imports:[r.CommonModule,c.HttpClientModule,s.FormsModule,u.NgbModule.forRoot(),l.RouterModule.forRoot([{path:"",redirectTo:"home",pathMatch:"full"},{path:"home",component:m},{path:"counter",component:E},{path:"fetch-data",component:_},{path:"buildings",component:A},{path:"buildings/building-detail/:id",component:H},{path:"**",redirectTo:"home"}])]})],e)}(),U=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},V=function(){function e(){}return e=U([Object(i.NgModule)({bootstrap:[h],imports:[o.ServerModule,F]})],e)}();Object(i.enableProdMode)();t.default=Object(a.createServerRenderer)(function(e){var t=[{provide:o.INITIAL_CONFIG,useValue:{document:"<app></app>",url:e.url}},{provide:r.APP_BASE_HREF,useValue:e.baseUrl},{provide:"BASE_URL",useValue:e.origin+e.baseUrl}];return Object(o.platformDynamicServer)(t).bootstrapModule(V).then(function(e){var t=e.injector.get(i.ApplicationRef),n=e.injector.get(o.PlatformState),r=e.injector.get(i.NgZone);return new Promise(function(i,o){r.onError.subscribe(function(e){return o(e)}),t.isStable.first(function(e){return e}).subscribe(function(){setImmediate(function(){i({html:n.renderToString()}),e.destroy()})})})})})},function(e,t){e.exports='<div *ngIf="building">\r\n    <div class="page-header">\r\n        <h1>{{ title }}</h1>\r\n    </div>\r\n\r\n    <button class="btn btn-success" (click)="saveBuilding()">\r\n        Save\r\n    </button>\r\n    <button class=" = btn btn-primary" routerLink="/buildings">\r\n        Cancel\r\n    </button>\r\n    \r\n    <div class="form-group">\r\n        <label for="buildingName">Building Name</label>\r\n        <input id="buildingName" type="text" class="form-control" [(ngModel)]="building.BuildingName" />\r\n    </div>\r\n\r\n    <div class="row">\r\n        <div class="col-sm-4">\r\n            <div class="panel panel-primary">\r\n                <div class="panel-heading">\r\n                    <h3 class="panel-title">Address</h3>\r\n                </div>\r\n                <div class="panel-body">\r\n                    <div class="form-group">\r\n                        <label for="address1">Address Line 1</label>\r\n                        <input id="address1" type="text" class="form-control" [(ngModel)]="building.AddressLine1" />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="address2">Address Line 2</label>\r\n                        <input id="address2" type="text" class="form-control" [(ngModel)]="building.AddressLine2" />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="address3">Address Line 3</label>\r\n                        <input id="address3" type="text" class="form-control" [(ngModel)]="building.AddressLine3" />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="city">City</label>\r\n                        <input id="city" type="text" class="form-control" [(ngModel)]="building.City" />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="state">State</label>\r\n                        <select id="state" class="form-control" [(ngModel)]="building.State">\r\n                            <option *ngFor="let s of states" [ngValue]="s.id">{{ s.name }}</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="zip">Zip Code</label>\r\n                        <input id="zip" type="text" class="form-control" [(ngModel)]="building.ZipCode" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class="col-sm-4">\r\n            <div class="panel panel-primary">\r\n                <div class="panel-heading">\r\n                    <h3 class="panel-title">Financials</h3>\r\n                </div>\r\n                <div class="panel-body">\r\n                    <div class="form-group">\r\n                        <label for="purchaseDate">Purchase Date</label>\r\n                        <div class="input-group">\r\n                            <input class="form-control" name="purchaseDate" #c1="ngModel" [(ngModel)]="building.PurchaseDate" ngbDatepicker #purchaseDate="ngbDatepicker" />\r\n                            <span class="input-group-btn">\r\n                                <button class="btn btn-outline-secondary" (click)="purchaseDate.toggle()" type="button">\r\n                                    <span class="glyphicon glyphicon-calendar"></span>\r\n                                </button>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="purchasePrice">Purchase Price</label>\r\n                        <input id="purchasePrice" type="text" class="form-control" [(ngModel)]="building.PurchasePrice" />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="sellDate">Sell Date</label>\r\n                        <div class="input-group">\r\n                            <input class="form-control" name="sellDate" #c2="ngModel" [(ngModel)]="building.SellDate" ngbDatepicker #sellDate="ngbDatepicker" />\r\n                            <span class="input-group-btn">\r\n                                <button class="btn btn-outline-secondary" (click)="sellDate.toggle()" type="button">\r\n                                    <span class="glyphicon glyphicon-calendar"></span>\r\n                                </button>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="sellPrice">Sell Price</label>\r\n                        <input id="sellPrice" type="text" class="form-control" [ngModel]="building.SellPrice" />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="numberOfUnits">Number of Units</label>\r\n                        <input id="numberOfUnits" type="text" class="form-control" [(ngModel)]="building.NumberOfUnits" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class="col-sm-4">\r\n            <div class="panel panel-primary">\r\n                <div class="panel-heading">\r\n                    <h3 class="panel-title">System Info</h3>\r\n                </div>\r\n                <div class="panel-body">\r\n                    <div class="form-group">\r\n                        <label for="createdOn">Created On</label>\r\n                        <input id="createdOn" type="text" class="form-control" [ngModel]="building.CreatedOn | date:\'MM/dd/yyyy\'" [disabled]="true" />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="createdBy">Created By</label>\r\n                        <input id="createdBy" type="text" class="form-control" [ngModel]="building.CreatedBy" [disabled]="true" />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="lastUpdatedOn">Last Updated On</label>\r\n                        <input id="lastUpdatedOn" type="text" class="form-control" [ngModel]="building.LastUpdatedOn | date:\'MM/dd/yyyy\'" [disabled]="true" />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="lastUpdatedBy">Last Updated By</label>\r\n                        <input id="lastUpdatedBy" type="text" class="form-control" [ngModel]="building.LastUpdatedBy" [disabled]="true" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>'},function(e,t,n){e.exports=n(1)(78)},function(e,t,n){"use strict";var r=n(4),i=n(59);r.Observable.prototype.catch=i._catch,r.Observable.prototype._catch=i._catch},function(e,t){e.exports='<h1>Buildings</h1>\r\n\r\n<p *ngIf="!buildings"><em>Loading...</em></p>\r\n\r\n<div class="row">\r\n    <div class="col-xs-12">\r\n        <button class="btn btn-primary" [routerLink]="[\'/buildings/building-detail\', -1]">\r\n            Add Building\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<table class=\'table\' *ngIf="buildings">\r\n    <thead>\r\n        <tr>\r\n            <th>Id</th>\r\n            <th>Name</th>\r\n            <th>Address</th>\r\n            <th>City</th>\r\n            <th>Zip Code</th>\r\n            <th>Purchase Date</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor="let building of buildings">\r\n            <td>{{ building.BuildingId }}</td>\r\n            <td>{{ building.BuildingName }}</td>\r\n            <td>{{ building.AddressLine1 }}</td>\r\n            <td>{{ building.City }}</td>\r\n            <td>{{ building.ZipCode }}</td>\r\n            <td>{{ building.PurchaseDate | date:\'MM/dd/yyyy\' }}</td>\r\n            <td>\r\n                <button class="btn btn-primary" [routerLink]="[\'/buildings/building-detail\', building.BuildingId]">\r\n                    <i class="glyphicon glyphicon-edit"></i>                \r\n                </button>\r\n                <button class="btn btn-default" (click)="delete(building.BuildingId)">\r\n                    <i class="glyphicon glyphicon-trash"></i>\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n'},function(e,t,n){"use strict";var r=this&&this.__extends||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=function(e){function t(t,n){e.call(this),this.error=t,this.scheduler=n}return r(t,e),t.create=function(e,n){return new t(e,n)},t.dispatch=function(e){var t=e.error;e.subscriber.error(t)},t.prototype._subscribe=function(e){var n=this.error,r=this.scheduler;if(e.syncErrorThrowable=!0,r)return r.schedule(t.dispatch,0,{error:n,subscriber:e});e.error(n)},t}(n(4).Observable);t.ErrorObservable=i},function(e,t,n){"use strict";var r=n(62);t._throw=r.ErrorObservable.create},function(e,t,n){"use strict";var r=n(4),i=n(63);r.Observable.throw=i._throw},function(e,t,n){"use strict";var r=n(4),i=n(50);r.Observable.prototype.map=i.map},function(e,t){e.exports='<h1>Counter</h1>\r\n\r\n<p>This is a simple example of an Angular component.</p>\r\n\r\n<p>Current count: <strong>{{ currentCount }}</strong></p>\r\n\r\n<button (click)="incrementCounter()">Increment</button>\r\n'},function(e,t){e.exports='<h1>Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf="!forecasts"><em>Loading...</em></p>\r\n\r\n<table class=\'table\' *ngIf="forecasts">\r\n    <thead>\r\n        <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor="let forecast of forecasts">\r\n            <td>{{ forecast.dateFormatted }}</td>\r\n            <td>{{ forecast.temperatureC }}</td>\r\n            <td>{{ forecast.temperatureF }}</td>\r\n            <td>{{ forecast.summary }}</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n'},function(e,t){e.exports="<h1>Hello, world!</h1>\r\n<p>Welcome to your new single-page application, built with:</p>\r\n<ul>\r\n    <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n    <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a> for client-side code</li>\r\n    <li><a href='https://webpack.github.io/'>Webpack</a> for building and bundling client-side resources</li>\r\n    <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n</ul>\r\n<p>To help you get started, we've also set up:</p>\r\n<ul>\r\n    <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n    <li><strong>Server-side prerendering</strong>. For faster initial loading and improved SEO, your Angular app is prerendered on the server. The resulting HTML is then transferred to the browser where a client-side copy of the app takes over.</li>\r\n    <li><strong>Webpack dev middleware</strong>. In development mode, there's no need to run the <code>webpack</code> build tool. Your client-side resources are dynamically built on demand. Updates are available as soon as you modify any file.</li>\r\n    <li><strong>Hot module replacement</strong>. In development mode, you don't even need to reload the page after making most changes. Within seconds of saving changes to files, your Angular app will be rebuilt and a new instance injected is into the page.</li>\r\n    <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and the <code>webpack</code> build tool produces minified static CSS and JavaScript files.</li>\r\n</ul>\r\n"},function(e,t,n){(e.exports=n(27)(!1)).push([e.i,"li .glyphicon {\r\n    margin-right: 10px;\r\n}\r\n\r\n/* Highlighting rules for nav menu items */\r\nli.link-active a,\r\nli.link-active a:hover,\r\nli.link-active a:focus {\r\n    background-color: #4189C7;\r\n    color: white;\r\n}\r\n\r\n/* Keep the nav menu independent of scrolling and on top of other items */\r\n.main-nav {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 1;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n    /* On small screens, convert the nav menu to a vertical sidebar */\r\n    .main-nav {\r\n        height: 100%;\r\n        width: calc(25% - 20px);\r\n    }\r\n    .navbar {\r\n        border-radius: 0px;\r\n        border-width: 0px;\r\n        height: 100%;\r\n    }\r\n    .navbar-header {\r\n        float: none;\r\n    }\r\n    .navbar-collapse {\r\n        border-top: 1px solid #444;\r\n        padding: 0px;\r\n    }\r\n    .navbar ul {\r\n        float: none;\r\n    }\r\n    .navbar li {\r\n        float: none;\r\n        font-size: 15px;\r\n        margin: 6px;\r\n    }\r\n    .navbar li a {\r\n        padding: 10px 16px;\r\n        border-radius: 4px;\r\n    }\r\n    .navbar a {\r\n        /* If a menu item's text is too long, truncate it */\r\n        width: 100%;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n}\r\n",""])},function(e,t,n){var r=n(69);e.exports="string"==typeof r?r:r.toString()},function(e,t){e.exports="<div class='main-nav'>\r\n    <div class='navbar navbar-inverse'>\r\n        <div class='navbar-header'>\r\n            <button type='button' class='navbar-toggle' data-toggle='collapse' data-target='.navbar-collapse'>\r\n                <span class='sr-only'>Toggle navigation</span>\r\n                <span class='icon-bar'></span>\r\n                <span class='icon-bar'></span>\r\n                <span class='icon-bar'></span>\r\n            </button>\r\n            <a class='navbar-brand' [routerLink]=\"['/home']\">PropertyManagement</a>\r\n        </div>\r\n        <div class='clearfix'></div>\r\n        <div class='navbar-collapse collapse'>\r\n            <ul class='nav navbar-nav'>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/home']\">\r\n                        <span class='glyphicon glyphicon-home'></span> Home\r\n                    </a>\r\n                </li>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/counter']\">\r\n                        <span class='glyphicon glyphicon-education'></span> Counter\r\n                    </a>\r\n                </li>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/fetch-data']\">\r\n                        <span class='glyphicon glyphicon-th-list'></span> Fetch data\r\n                    </a>\r\n                </li>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/buildings']\">\r\n                        <span class='glyphicon glyphicon-th-list'></span> Buildings\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</div>\r\n"},function(e,t,n){(e.exports=n(27)(!1)).push([e.i,"@media (max-width: 767px) {\r\n    /* On small screens, the nav menu spans the full width of the screen. Leave a space for it. */\r\n    .body-content {\r\n        padding-top: 50px;\r\n    }\r\n}\r\n",""])},function(e,t,n){var r=n(72);e.exports="string"==typeof r?r:r.toString()},function(e,t){e.exports="<div class='container-fluid'>\r\n    <div class='row'>\r\n        <div class='col-sm-3'>\r\n            <nav-menu></nav-menu>\r\n        </div>\r\n        <div class='col-sm-9 body-content'>\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </div>\r\n</div>\r\n"},function(e,t,n){e.exports=n(1)(9)},function(e,t,n){e.exports=n(1)(29)},function(e,t,n){e.exports=n(1)(31)},function(e,t,n){e.exports=n(1)(92)},function(e,t,n){"use strict";var r=this&&this.__extends||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=n(4),o=n(78),a=n(77),s=n(76),c=n(75),l=Object.prototype.toString;var u=function(e){function t(t,n,r,i){e.call(this),this.sourceObj=t,this.eventName=n,this.selector=r,this.options=i}return r(t,e),t.create=function(e,n,r,i){return a.isFunction(r)&&(i=r,r=void 0),new t(e,n,i,r)},t.setupSubscription=function(e,n,r,i,o){var a;if(function(e){return!!e&&"[object NodeList]"===l.call(e)}(e)||function(e){return!!e&&"[object HTMLCollection]"===l.call(e)}(e))for(var s=0,u=e.length;s<u;s++)t.setupSubscription(e[s],n,r,i,o);else if(function(e){return!!e&&"function"==typeof e.addEventListener&&"function"==typeof e.removeEventListener}(e)){var p=e;e.addEventListener(n,r,o),a=function(){return p.removeEventListener(n,r,o)}}else if(function(e){return!!e&&"function"==typeof e.on&&"function"==typeof e.off}(e)){var h=e;e.on(n,r),a=function(){return h.off(n,r)}}else{if(!function(e){return!!e&&"function"==typeof e.addListener&&"function"==typeof e.removeListener}(e))throw new TypeError("Invalid event target");var d=e;e.addListener(n,r),a=function(){return d.removeListener(n,r)}}i.add(new c.Subscription(a))},t.prototype._subscribe=function(e){var n=this.sourceObj,r=this.eventName,i=this.options,a=this.selector,c=a?function(){for(var t=[],n=0;n<arguments.length;n++)t[n-0]=arguments[n];var r=o.tryCatch(a).apply(void 0,t);r===s.errorObject?e.error(s.errorObject.e):e.next(r)}:function(t){return e.next(t)};t.setupSubscription(n,r,c,e,i)},t}(i.Observable);t.FromEventObservable=u},function(e,t,n){"use strict";var r=n(79);t.fromEvent=r.FromEventObservable.create},function(e,t,n){e.exports=n(1)(10)},function(e,t,n){e.exports=n(1)(8)},function(e,t,n){"use strict";var r=this&&this.__extends||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=n(82),o=n(81);t.switchMap=function(e,t){return function(n){return n.lift(new a(e,t))}};var a=function(){function e(e,t){this.project=e,this.resultSelector=t}return e.prototype.call=function(e,t){return t.subscribe(new s(e,this.project,this.resultSelector))},e}(),s=function(e){function t(t,n,r){e.call(this,t),this.project=n,this.resultSelector=r,this.index=0}return r(t,e),t.prototype._next=function(e){var t,n=this.index++;try{t=this.project(e,n)}catch(e){return void this.destination.error(e)}this._innerSub(t,e,n)},t.prototype._innerSub=function(e,t,n){var r=this.innerSubscription;r&&r.unsubscribe(),this.add(this.innerSubscription=o.subscribeToResult(this,e,t,n))},t.prototype._complete=function(){var t=this.innerSubscription;t&&!t.closed||e.prototype._complete.call(this)},t.prototype._unsubscribe=function(){this.innerSubscription=null},t.prototype.notifyComplete=function(t){this.remove(t),this.innerSubscription=null,this.isStopped&&e.prototype._complete.call(this)},t.prototype.notifyNext=function(e,t,n,r,i){this.resultSelector?this._tryNotifyNext(e,t,n,r):this.destination.next(t)},t.prototype._tryNotifyNext=function(e,t,n,r){var i;try{i=this.resultSelector(e,t,n,r)}catch(e){return void this.destination.error(e)}this.destination.next(i)},t}(i.OuterSubscriber)},function(e,t,n){"use strict";var r=n(83);t.switchMap=function(e,t){return r.switchMap(e,t)(this)}},function(e,t,n){e.exports=n(1)(2)},function(e,t,n){"use strict";var r=this&&this.__extends||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=n(85);t.tap=function(e,t,n){return function(r){return r.lift(new o(e,t,n))}};var o=function(){function e(e,t,n){this.nextOrObserver=e,this.error=t,this.complete=n}return e.prototype.call=function(e,t){return t.subscribe(new a(e,this.nextOrObserver,this.error,this.complete))},e}(),a=function(e){function t(t,n,r,o){e.call(this,t);var a=new i.Subscriber(n,r,o);a.syncErrorThrowable=!0,this.add(a),this.safeSubscriber=a}return r(t,e),t.prototype._next=function(e){var t=this.safeSubscriber;t.next(e),t.syncErrorThrown?this.destination.error(t.syncErrorValue):this.destination.next(e)},t.prototype._error=function(e){var t=this.safeSubscriber;t.error(e),t.syncErrorThrown?this.destination.error(t.syncErrorValue):this.destination.error(e)},t.prototype._complete=function(){var e=this.safeSubscriber;e.complete(),e.syncErrorThrown?this.destination.error(e.syncErrorValue):this.destination.complete()},t}(i.Subscriber)},function(e,t,n){"use strict";var r=n(86);t._do=function(e,t,n){return r.tap(e,t,n)(this)}},function(e,t,n){"use strict";t.letProto=function(e){return e(this)}},function(e,t,n){e.exports=n(1)(65)},function(e,t){e.exports=require("os")},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("http")},function(e,t,n){(function(){var t,r,i,o,a,s,c,l,u,p,h,d,f=function(e,t){for(var n in t)g.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},g={}.hasOwnProperty;c=function(){function e(){this.onloadstart=null,this.onprogress=null,this.onabort=null,this.onerror=null,this.onload=null,this.ontimeout=null,this.onloadend=null,this._listeners={}}return e.prototype.onloadstart=null,e.prototype.onprogress=null,e.prototype.onabort=null,e.prototype.onerror=null,e.prototype.onload=null,e.prototype.ontimeout=null,e.prototype.onloadend=null,e.prototype.addEventListener=function(e,t){var n;e=e.toLowerCase(),(n=this._listeners)[e]||(n[e]=[]),this._listeners[e].push(t)},e.prototype.removeEventListener=function(e,t){var n;e=e.toLowerCase(),this._listeners[e]&&-1!==(n=this._listeners[e].indexOf(t))&&this._listeners[e].splice(n,1)},e.prototype.dispatchEvent=function(e){var t,n,r,i,o;if(e.currentTarget=e.target=this,t=e.type,o=this._listeners[t])for(n=0,r=o.length;n<r;n++)(i=o[n]).call(this,e);(i=this["on"+t])&&i.call(this,e)},e}(),u=n(92),p=n(91),h=n(90),d=n(48),s=function(e){function n(e){n.__super__.constructor.call(this),this.onreadystatechange=null,this._anonymous=e&&e.anon,this.readyState=n.UNSENT,this.response=null,this.responseText="",this.responseType="",this.responseURL="",this.status=0,this.statusText="",this.timeout=0,this.upload=new l(this),this._method=null,this._url=null,this._sync=!1,this._headers=null,this._loweredHeaders=null,this._mimeOverride=null,this._request=null,this._response=null,this._responseParts=null,this._responseHeaders=null,this._aborting=null,this._error=null,this._loadedBytes=0,this._totalBytes=0,this._lengthComputable=!1}return f(n,c),n.prototype.onreadystatechange=null,n.prototype.readyState=null,n.prototype.response=null,n.prototype.responseText=null,n.prototype.responseType=null,n.prototype.status=null,n.prototype.timeout=null,n.prototype.upload=null,n.prototype.open=function(e,t,r,i,a){var s;if((e=e.toUpperCase())in this._restrictedMethods)throw new o("HTTP method "+e+" is not allowed in XHR");switch(s=this._parseUrl(t),void 0===r&&(r=!0),this.readyState){case n.UNSENT:case n.OPENED:case n.DONE:break;case n.HEADERS_RECEIVED:case n.LOADING:}this._method=e,this._url=s,this._sync=!r,this._headers={},this._loweredHeaders={},this._mimeOverride=null,this._setReadyState(n.OPENED),this._request=null,this._response=null,this.status=0,this.statusText="",this._responseParts=[],this._responseHeaders=null,this._loadedBytes=0,this._totalBytes=0,this._lengthComputable=!1},n.prototype.setRequestHeader=function(e,r){var i;if(this.readyState!==n.OPENED)throw new t("XHR readyState must be OPENED");i=e.toLowerCase(),this._restrictedHeaders[i]||/^sec\-/.test(i)||/^proxy-/.test(i)?console.warn('Refused to set unsafe header "'+e+'"'):(r=r.toString(),i in this._loweredHeaders?(e=this._loweredHeaders[i],this._headers[e]=this._headers[e]+", "+r):(this._loweredHeaders[i]=e,this._headers[e]=r))},n.prototype.send=function(e){if(this.readyState!==n.OPENED)throw new t("XHR readyState must be OPENED");if(this._request)throw new t("send() already called");switch(this._url.protocol){case"file:":this._sendFile(e);break;case"http:":case"https:":this._sendHttp(e);break;default:throw new r("Unsupported protocol "+this._url.protocol)}},n.prototype.abort=function(){this._request&&(this._request.abort(),this._setError(),this._dispatchProgress("abort"),this._dispatchProgress("loadend"))},n.prototype.getResponseHeader=function(e){var t;return this._responseHeaders&&(t=e.toLowerCase())in this._responseHeaders?this._responseHeaders[t]:null},n.prototype.getAllResponseHeaders=function(){var e,t;return this._responseHeaders?function(){var n,r;for(e in r=[],n=this._responseHeaders)t=n[e],r.push(e+": "+t);return r}.call(this).join("\r\n"):""},n.prototype.overrideMimeType=function(e){if(this.readyState===n.LOADING||this.readyState===n.DONE)throw new t("overrideMimeType() not allowed in LOADING or DONE");this._mimeOverride=e.toLowerCase()},n.prototype.nodejsSet=function(e){var t;if("httpAgent"in e&&(this.nodejsHttpAgent=e.httpAgent),"httpsAgent"in e&&(this.nodejsHttpsAgent=e.httpsAgent),"baseUrl"in e){if(null!==(t=e.baseUrl)&&!d.parse(t,!1,!0).protocol)throw new a("baseUrl must be an absolute URL");this.nodejsBaseUrl=t}},n.nodejsSet=function(e){n.prototype.nodejsSet(e)},n.prototype.UNSENT=0,n.UNSENT=0,n.prototype.OPENED=1,n.OPENED=1,n.prototype.HEADERS_RECEIVED=2,n.HEADERS_RECEIVED=2,n.prototype.LOADING=3,n.LOADING=3,n.prototype.DONE=4,n.DONE=4,n.prototype.nodejsHttpAgent=u.globalAgent,n.prototype.nodejsHttpsAgent=p.globalAgent,n.prototype.nodejsBaseUrl=null,n.prototype._restrictedMethods={CONNECT:!0,TRACE:!0,TRACK:!0},n.prototype._restrictedHeaders={"accept-charset":!0,"accept-encoding":!0,"access-control-request-headers":!0,"access-control-request-method":!0,connection:!0,"content-length":!0,cookie:!0,cookie2:!0,date:!0,dnt:!0,expect:!0,host:!0,"keep-alive":!0,origin:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,via:!0},n.prototype._privateHeaders={"set-cookie":!0,"set-cookie2":!0},n.prototype._userAgent="Mozilla/5.0 ("+h.type()+" "+h.arch()+") node.js/"+process.versions.node+" v8/"+process.versions.v8,n.prototype._setReadyState=function(e){var t;this.readyState=e,t=new i("readystatechange"),this.dispatchEvent(t)},n.prototype._sendFile=function(){if("GET"!==this._url.method)throw new r("The file protocol only supports GET");throw new Error("Protocol file: not implemented")},n.prototype._sendHttp=function(e){if(this._sync)throw new Error("Synchronous XHR processing not implemented");null==e||"GET"!==this._method&&"HEAD"!==this._method?e||(e=""):(console.warn("Discarding entity body for "+this._method+" requests"),e=null),this.upload._setData(e),this._finalizeHeaders(),this._sendHxxpRequest()},n.prototype._sendHxxpRequest=function(){var e,t,n,r;"http:"===this._url.protocol?(t=u,e=this.nodejsHttpAgent):(t=p,e=this.nodejsHttpsAgent),n=t.request({hostname:this._url.hostname,port:this._url.port,path:this._url.path,auth:this._url.auth,method:this._method,headers:this._headers,agent:e}),this._request=n,this.timeout&&n.setTimeout(this.timeout,(r=this,function(){return r._onHttpTimeout(n)})),n.on("response",function(e){return function(t){return e._onHttpResponse(n,t)}}(this)),n.on("error",function(e){return function(t){return e._onHttpRequestError(n,t)}}(this)),this.upload._startUpload(n),this._request===n&&this._dispatchProgress("loadstart")},n.prototype._finalizeHeaders=function(){this._headers.Connection="keep-alive",this._headers.Host=this._url.host,this._anonymous&&(this._headers.Referer="about:blank"),this._headers["User-Agent"]=this._userAgent,this.upload._finalizeHeaders(this._headers,this._loweredHeaders)},n.prototype._onHttpResponse=function(e,t){var r;if(this._request===e){switch(t.statusCode){case 301:case 302:case 303:case 307:case 308:return this._url=this._parseUrl(t.headers.location),this._method="GET","content-type"in this._loweredHeaders&&(delete this._headers[this._loweredHeaders["content-type"]],delete this._loweredHeaders["content-type"]),"Content-Type"in this._headers&&delete this._headers["Content-Type"],delete this._headers["Content-Length"],this.upload._reset(),this._finalizeHeaders(),void this._sendHxxpRequest()}var i;return this._response=t,this._response.on("data",(i=this,function(e){return i._onHttpResponseData(t,e)})),this._response.on("end",function(e){return function(){return e._onHttpResponseEnd(t)}}(this)),this._response.on("close",function(e){return function(){return e._onHttpResponseClose(t)}}(this)),this.responseURL=this._url.href.split("#")[0],this.status=this._response.statusCode,this.statusText=u.STATUS_CODES[this.status],this._parseResponseHeaders(t),(r=this._responseHeaders["content-length"])?(this._totalBytes=parseInt(r),this._lengthComputable=!0):this._lengthComputable=!1,this._setReadyState(n.HEADERS_RECEIVED)}},n.prototype._onHttpResponseData=function(e,t){if(this._response===e)return this._responseParts.push(t),this._loadedBytes+=t.length,this.readyState!==n.LOADING&&this._setReadyState(n.LOADING),this._dispatchProgress("progress")},n.prototype._onHttpResponseEnd=function(e){if(this._response===e)return this._parseResponse(),this._request=null,this._response=null,this._setReadyState(n.DONE),this._dispatchProgress("load"),this._dispatchProgress("loadend")},n.prototype._onHttpResponseClose=function(e){var t;if(this._response===e)return t=this._request,this._setError(),t.abort(),this._setReadyState(n.DONE),this._dispatchProgress("error"),this._dispatchProgress("loadend")},n.prototype._onHttpTimeout=function(e){if(this._request===e)return this._setError(),e.abort(),this._setReadyState(n.DONE),this._dispatchProgress("timeout"),this._dispatchProgress("loadend")},n.prototype._onHttpRequestError=function(e,t){if(this._request===e)return this._setError(),e.abort(),this._setReadyState(n.DONE),this._dispatchProgress("error"),this._dispatchProgress("loadend")},n.prototype._dispatchProgress=function(e){var t;(t=new i(e)).lengthComputable=this._lengthComputable,t.loaded=this._loadedBytes,t.total=this._totalBytes,this.dispatchEvent(t)},n.prototype._setError=function(){this._request=null,this._response=null,this._responseHeaders=null,this._responseParts=null},n.prototype._parseUrl=function(e){var t,n,r,i,o;return t=null===this.nodejsBaseUrl?e:d.resolve(this.nodejsBaseUrl,e),(o=d.parse(t,!1,!0)).hash=null,o.auth&&(void 0!==i&&null!==i||void 0!==r&&null!==r)&&(-1===(n=o.auth.indexOf(":"))?i||(i=o.auth):(i||(i=o.substring(0,n)),r||(r=o.substring(n+1)))),(i||r)&&(o.auth=i+":"+r),o},n.prototype._parseResponseHeaders=function(e){var t,n,r,i;for(n in this._responseHeaders={},r=e.headers)i=r[n],t=n.toLowerCase(),this._privateHeaders[t]||(null!==this._mimeOverride&&"content-type"===t&&(i=this._mimeOverride),this._responseHeaders[t]=i);null===this._mimeOverride||"content-type"in this._responseHeaders||(this._responseHeaders["content-type"]=this._mimeOverride)},n.prototype._parseResponse=function(){var e,t,n,r,i,o;switch(t=Buffer.concat?Buffer.concat(this._responseParts):this._concatBuffers(this._responseParts),this._responseParts=null,this.responseType){case"text":this._parseTextResponse(t);break;case"json":this.responseText=null;try{this.response=JSON.parse(t.toString("utf-8"))}catch(e){e,this.response=null}break;case"buffer":this.responseText=null,this.response=t;break;case"arraybuffer":for(this.responseText=null,e=new ArrayBuffer(t.length),o=new Uint8Array(e),n=r=0,i=t.length;0<=i?r<i:r>i;n=0<=i?++r:--r)o[n]=t[n];this.response=e;break;default:this._parseTextResponse(t)}},n.prototype._parseTextResponse=function(e){try{this.responseText=e.toString(this._parseResponseEncoding())}catch(t){t,this.responseText=e.toString("binary")}this.response=this.responseText},n.prototype._parseResponseEncoding=function(){var e,t;return null,(e=this._responseHeaders["content-type"])&&(t=/\;\s*charset\=(.*)$/.exec(e))?t[1]:"utf-8"},n.prototype._concatBuffers=function(e){var t,n,r,i,o,a,s;if(0===e.length)return new Buffer(0);if(1===e.length)return e[0];for(a=0,n=0,i=e.length;n<i;n++)a+=(t=e[n]).length;for(s=new Buffer(a),a=0,r=0,o=e.length;r<o;r++)(t=e[r]).copy(s,a),a+=t.length;return s},n}(),e.exports=s,s.XMLHttpRequest=s,o=function(e){function t(){t.__super__.constructor.apply(this,arguments)}return f(t,e),t}(Error),s.SecurityError=o,t=function(e){function t(){t.__super__.constructor.apply(this,arguments)}return f(t,e),t}(Error),t=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return f(t,e),t}(Error),s.InvalidStateError=t,r=function(e){function t(){t.__super__.constructor.apply(this,arguments)}return f(t,e),t}(Error),s.SyntaxError=a,a=function(e){function t(){t.__super__.constructor.apply(this,arguments)}return f(t,e),t}(Error),i=function(){function e(e){this.type=e,this.target=null,this.currentTarget=null,this.lengthComputable=!1,this.loaded=0,this.total=0}return e.prototype.bubbles=!1,e.prototype.cancelable=!1,e.prototype.target=null,e.prototype.loaded=null,e.prototype.lengthComputable=null,e.prototype.total=null,e}(),s.ProgressEvent=i,l=function(e){function t(e){t.__super__.constructor.call(this),this._request=e,this._reset()}return f(t,c),t.prototype._reset=function(){this._contentType=null,this._body=null},t.prototype._setData=function(e){var t,n,r,i,o,a,s,c;if(void 0!==e&&null!==e)if("string"==typeof e)0!==e.length&&(this._contentType="text/plain;charset=UTF-8"),this._body=new Buffer(e,"utf8");else if(Buffer.isBuffer(e))this._body=e;else if(e instanceof ArrayBuffer){for(t=new Buffer(e.byteLength),c=new Uint8Array(e),n=r=0,a=e.byteLength;0<=a?r<a:r>a;n=0<=a?++r:--r)t[n]=c[n];this._body=t}else{if(!(e.buffer&&e.buffer instanceof ArrayBuffer))throw new Error("Unsupported send() data "+e);for(t=new Buffer(e.byteLength),o=e.byteOffset,c=new Uint8Array(e.buffer),n=i=0,s=e.byteLength;0<=s?i<s:i>s;n=0<=s?++i:--i)t[n]=c[n+o];this._body=t}},t.prototype._finalizeHeaders=function(e,t){this._contentType&&("content-type"in t||(e["Content-Type"]=this._contentType)),this._body&&(e["Content-Length"]=this._body.length.toString())},t.prototype._startUpload=function(e){this._body&&e.write(this._body),e.end()},t}(),s.XMLHttpRequestUpload=l}).call(this)},function(e,t,n){"use strict";e.exports={VALUE:1,ATTR:2,REMOVE_ATTR:3,REMOVE:4,MOVE:5,INSERT:6}},function(e,t,n){"use strict";var r={setTimeout:setTimeout,clearTimeout:clearTimeout,setInterval:setInterval,clearInterval:clearInterval};e.exports=r},function(e,t,n){"use strict";var r=Object.create(null,{appCodeName:{value:"Mozilla"},appName:{value:"Netscape"},appVersion:{value:"4.0"},platform:{value:""},product:{value:"Gecko"},productSub:{value:"20100101"},userAgent:{value:""},vendor:{value:""},vendorSub:{value:""},taintEnabled:{value:function(){return!1}}});e.exports=r},function(e,t,n){"use strict";var r=n(20),i=n(32);function o(e,t){this._window=e,this._href=t}e.exports=o,o.prototype=Object.create(i.prototype,{constructor:{value:o},href:{get:function(){return this._href},set:function(e){this.assign(e)}},assign:{value:function(e){var t=new r(this._href).resolve(e);this._href=t}},replace:{value:function(e){this.assign(e)}},reload:{value:function(){this.assign(this.href)}},toString:{value:function(){return this.href}}})},function(e,t,n){"use strict";
/*!
Parser-Lib
Copyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/var r=Object.create(null);!function(){function e(){this._listeners=Object.create(null)}function t(e){this._input=e.replace(/(\r|\n){1,2}/g,"\n"),this._line=1,this._col=1,this._cursor=0}function n(e,t,n){Error.call(this),this.name=this.constructor.name,this.col=n,this.line=t,this.message=e}function i(e,t,n,r){this.col=n,this.line=t,this.text=e,this.type=r}function o(e,n){this._reader=e?new t(e.toString()):null,this._token=null,this._tokenData=n,this._lt=[],this._ltIndex=0,this._ltIndexCache=[]}e.prototype={constructor:e,addListener:function(e,t){this._listeners[e]||(this._listeners[e]=[]),this._listeners[e].push(t)},fire:function(e){if("string"==typeof e&&(e={type:e}),void 0!==e.target&&(e.target=this),void 0===e.type)throw new Error("Event object missing 'type' property.");if(this._listeners[e.type])for(var t=this._listeners[e.type].concat(),n=0,r=t.length;n<r;n++)t[n].call(this,e)},removeListener:function(e,t){if(this._listeners[e])for(var n=this._listeners[e],r=0,i=n.length;r<i;r++)if(n[r]===t){n.splice(r,1);break}}},t.prototype={constructor:t,getCol:function(){return this._col},getLine:function(){return this._line},eof:function(){return this._cursor===this._input.length},peek:function(e){var t=null;return e=void 0===e?1:e,this._cursor<this._input.length&&(t=this._input.charAt(this._cursor+e-1)),t},read:function(){var e=null;return this._cursor<this._input.length&&("\n"===this._input.charAt(this._cursor)?(this._line++,this._col=1):this._col++,e=this._input.charAt(this._cursor++)),e},mark:function(){this._bookmark={cursor:this._cursor,line:this._line,col:this._col}},reset:function(){this._bookmark&&(this._cursor=this._bookmark.cursor,this._line=this._bookmark.line,this._col=this._bookmark.col,delete this._bookmark)},readTo:function(e){for(var t,n="";n.length<e.length||n.lastIndexOf(e)!==n.length-e.length;){if(!(t=this.read()))throw new Error('Expected "'+e+'" at line '+this._line+", col "+this._col+".");n+=t}return n},readWhile:function(e){for(var t="",n=this.read();null!==n&&e(n);)t+=n,n=this.read();return t},readMatch:function(e){var t=this._input.substring(this._cursor),n=null;return"string"==typeof e?0===t.indexOf(e)&&(n=this.readCount(e.length)):e instanceof RegExp&&e.test(t)&&(n=this.readCount(RegExp.lastMatch.length)),n},readCount:function(e){for(var t="";e--;)t+=this.read();return t}},n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,i.fromToken=function(e){return new i(e.value,e.startLine,e.startCol)},i.prototype={constructor:i,valueOf:function(){return this.toString()},toString:function(){return this.text}},o.createTokenData=function(e){var t=[],n=Object.create(null),r=e.concat([]),i=0,o=r.length+1;for(r.UNKNOWN=-1,r.unshift({name:"EOF"});i<o;i++)t.push(r[i].name),r[r[i].name]=i,r[i].text&&(n[r[i].text]=i);return r.name=function(e){return t[e]},r.type=function(e){return n[e]},r},o.prototype={constructor:o,match:function(e,t){e instanceof Array||(e=[e]);for(var n=this.get(t),r=0,i=e.length;r<i;)if(n===e[r++])return!0;return this.unget(),!1},mustMatch:function(e,t){var r;if(e instanceof Array||(e=[e]),!this.match.apply(this,arguments))throw r=this.LT(1),new n("Expected "+this._tokenData[e[0]].name+" at line "+r.startLine+", col "+r.startCol+".",r.startLine,r.startCol)},advance:function(e,t){for(;0!==this.LA(0)&&!this.match(e,t);)this.get();return this.LA(0)},get:function(e){var t,n,r=this._tokenData,i=0;if(this._lt.length&&this._ltIndex>=0&&this._ltIndex<this._lt.length){for(i++,this._token=this._lt[this._ltIndex++],n=r[this._token.type];void 0!==n.channel&&e!==n.channel&&this._ltIndex<this._lt.length;)this._token=this._lt[this._ltIndex++],n=r[this._token.type],i++;if((void 0===n.channel||e===n.channel)&&this._ltIndex<=this._lt.length)return this._ltIndexCache.push(i),this._token.type}return(t=this._getToken()).type>-1&&!r[t.type].hide&&(t.channel=r[t.type].channel,this._token=t,this._lt.push(t),this._ltIndexCache.push(this._lt.length-this._ltIndex+i),this._lt.length>5&&this._lt.shift(),this._ltIndexCache.length>5&&this._ltIndexCache.shift(),this._ltIndex=this._lt.length),(n=r[t.type])&&(n.hide||void 0!==n.channel&&e!==n.channel)?this.get(e):t.type},LA:function(e){var t,n=e;if(e>0){if(e>5)throw new Error("Too much lookahead.");for(;n;)t=this.get(),n--;for(;n<e;)this.unget(),n++}else if(e<0){if(!this._lt[this._ltIndex+e])throw new Error("Too much lookbehind.");t=this._lt[this._ltIndex+e].type}else t=this._token.type;return t},LT:function(e){return this.LA(e),this._lt[this._ltIndex+e-1]},peek:function(){return this.LA(1)},token:function(){return this._token},tokenName:function(e){return e<0||e>this._tokenData.length?"UNKNOWN_TOKEN":this._tokenData[e].name},tokenType:function(e){return this._tokenData[e]||-1},unget:function(){if(!this._ltIndexCache.length)throw new Error("Too much lookahead.");this._ltIndex-=this._ltIndexCache.pop(),this._token=this._lt[this._ltIndex-1]}},r.util={__proto__:null,StringReader:t,SyntaxError:n,SyntaxUnit:i,EventTarget:e,TokenStreamBase:o}}(),function(){var e=r.util.EventTarget,t=r.util.TokenStreamBase,n=(r.util.StringReader,r.util.SyntaxError),i=r.util.SyntaxUnit,o={__proto__:null,aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32",currentColor:"The value of the 'color' property.",activeBorder:"Active window border.",activecaption:"Active window caption.",appworkspace:"Background color of multiple document interface.",background:"Desktop background.",buttonface:"The face background color for 3-D elements that appear 3-D due to one layer of surrounding border.",buttonhighlight:"The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border.",buttonshadow:"The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border.",buttontext:"Text on push buttons.",captiontext:"Text in caption, size box, and scrollbar arrow box.",graytext:"Grayed (disabled) text. This color is set to #000 if the current display driver does not support a solid gray color.",greytext:"Greyed (disabled) text. This color is set to #000 if the current display driver does not support a solid grey color.",highlight:"Item(s) selected in a control.",highlighttext:"Text of item(s) selected in a control.",inactiveborder:"Inactive window border.",inactivecaption:"Inactive window caption.",inactivecaptiontext:"Color of text in an inactive caption.",infobackground:"Background color for tooltip controls.",infotext:"Text color for tooltip controls.",menu:"Menu background.",menutext:"Text in menus.",scrollbar:"Scroll bar gray area.",threeddarkshadow:"The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",threedface:"The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",threedhighlight:"The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",threedlightshadow:"The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",threedshadow:"The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",window:"Window background.",windowframe:"Window frame.",windowtext:"Text in windows."};function a(e,t,n){i.call(this,e,t,n,l.COMBINATOR_TYPE),this.type="unknown",/^\s+$/.test(e)?this.type="descendant":">"===e?this.type="child":"+"===e?this.type="adjacent-sibling":"~"===e&&(this.type="sibling")}function s(e,t){i.call(this,"("+e+(null!==t?":"+t:"")+")",e.startLine,e.startCol,l.MEDIA_FEATURE_TYPE),this.name=e,this.value=t}function c(e,t,n,r,o){i.call(this,(e?e+" ":"")+(t||"")+(t&&n.length>0?" and ":"")+n.join(" and "),r,o,l.MEDIA_QUERY_TYPE),this.modifier=e,this.mediaType=t,this.features=n}function l(t){e.call(this),this.options=t||{},this._tokenStream=null}a.prototype=new i,a.prototype.constructor=a,s.prototype=new i,s.prototype.constructor=s,c.prototype=new i,c.prototype.constructor=c,l.DEFAULT_TYPE=0,l.COMBINATOR_TYPE=1,l.MEDIA_FEATURE_TYPE=2,l.MEDIA_QUERY_TYPE=3,l.PROPERTY_NAME_TYPE=4,l.PROPERTY_VALUE_TYPE=5,l.PROPERTY_VALUE_PART_TYPE=6,l.SELECTOR_TYPE=7,l.SELECTOR_PART_TYPE=8,l.SELECTOR_SUB_PART_TYPE=9,l.prototype=function(){var t,r=new e,o={__proto__:null,constructor:l,DEFAULT_TYPE:0,COMBINATOR_TYPE:1,MEDIA_FEATURE_TYPE:2,MEDIA_QUERY_TYPE:3,PROPERTY_NAME_TYPE:4,PROPERTY_VALUE_TYPE:5,PROPERTY_VALUE_PART_TYPE:6,SELECTOR_TYPE:7,SELECTOR_PART_TYPE:8,SELECTOR_SUB_PART_TYPE:9,_stylesheet:function(){var e,t,r,i=this._tokenStream;for(this.fire("startstylesheet"),this._charset(),this._skipCruft();i.peek()===O.IMPORT_SYM;)this._import(),this._skipCruft();for(;i.peek()===O.NAMESPACE_SYM;)this._namespace(),this._skipCruft();for(r=i.peek();r>O.EOF;){try{switch(r){case O.MEDIA_SYM:this._media(),this._skipCruft();break;case O.PAGE_SYM:this._page(),this._skipCruft();break;case O.FONT_FACE_SYM:this._font_face(),this._skipCruft();break;case O.KEYFRAMES_SYM:this._keyframes(),this._skipCruft();break;case O.VIEWPORT_SYM:this._viewport(),this._skipCruft();break;case O.DOCUMENT_SYM:this._document(),this._skipCruft();break;case O.UNKNOWN_SYM:if(i.get(),this.options.strict)throw new n("Unknown @ rule.",i.LT(0).startLine,i.LT(0).startCol);for(this.fire({type:"error",error:null,message:"Unknown @ rule: "+i.LT(0).value+".",line:i.LT(0).startLine,col:i.LT(0).startCol}),e=0;i.advance([O.LBRACE,O.RBRACE])===O.LBRACE;)e++;for(;e;)i.advance([O.RBRACE]),e--;break;case O.S:this._readWhitespace();break;default:if(!this._ruleset())switch(r){case O.CHARSET_SYM:throw t=i.LT(1),this._charset(!1),new n("@charset not allowed here.",t.startLine,t.startCol);case O.IMPORT_SYM:throw t=i.LT(1),this._import(!1),new n("@import not allowed here.",t.startLine,t.startCol);case O.NAMESPACE_SYM:throw t=i.LT(1),this._namespace(!1),new n("@namespace not allowed here.",t.startLine,t.startCol);default:i.get(),this._unexpectedToken(i.token())}}}catch(e){if(!(e instanceof n)||this.options.strict)throw e;this.fire({type:"error",error:e,message:e.message,line:e.line,col:e.col})}r=i.peek()}r!==O.EOF&&this._unexpectedToken(i.token()),this.fire("endstylesheet")},_charset:function(e){var t,n,r,i=this._tokenStream;i.match(O.CHARSET_SYM)&&(n=i.token().startLine,r=i.token().startCol,this._readWhitespace(),i.mustMatch(O.STRING),t=i.token().value,this._readWhitespace(),i.mustMatch(O.SEMICOLON),!1!==e&&this.fire({type:"charset",charset:t,line:n,col:r}))},_import:function(e){var t,n,r,i=this._tokenStream;i.mustMatch(O.IMPORT_SYM),n=i.token(),this._readWhitespace(),i.mustMatch([O.STRING,O.URI]),t=i.token().value.replace(/^(?:url\()?["']?([^"']+?)["']?\)?$/,"$1"),this._readWhitespace(),r=this._media_query_list(),i.mustMatch(O.SEMICOLON),this._readWhitespace(),!1!==e&&this.fire({type:"import",uri:t,media:r,line:n.startLine,col:n.startCol})},_namespace:function(e){var t,n,r,i,o=this._tokenStream;o.mustMatch(O.NAMESPACE_SYM),t=o.token().startLine,n=o.token().startCol,this._readWhitespace(),o.match(O.IDENT)&&(r=o.token().value,this._readWhitespace()),o.mustMatch([O.STRING,O.URI]),i=o.token().value.replace(/(?:url\()?["']([^"']+)["']\)?/,"$1"),this._readWhitespace(),o.mustMatch(O.SEMICOLON),this._readWhitespace(),!1!==e&&this.fire({type:"namespace",prefix:r,uri:i,line:t,col:n})},_media:function(){var e,t,n,r=this._tokenStream;for(r.mustMatch(O.MEDIA_SYM),e=r.token().startLine,t=r.token().startCol,this._readWhitespace(),n=this._media_query_list(),r.mustMatch(O.LBRACE),this._readWhitespace(),this.fire({type:"startmedia",media:n,line:e,col:t});;)if(r.peek()===O.PAGE_SYM)this._page();else if(r.peek()===O.FONT_FACE_SYM)this._font_face();else if(r.peek()===O.VIEWPORT_SYM)this._viewport();else if(r.peek()===O.DOCUMENT_SYM)this._document();else if(!this._ruleset())break;r.mustMatch(O.RBRACE),this._readWhitespace(),this.fire({type:"endmedia",media:n,line:e,col:t})},_media_query_list:function(){var e=this._tokenStream,t=[];for(this._readWhitespace(),e.peek()!==O.IDENT&&e.peek()!==O.LPAREN||t.push(this._media_query());e.match(O.COMMA);)this._readWhitespace(),t.push(this._media_query());return t},_media_query:function(){var e=this._tokenStream,t=null,n=null,r=null,i=[];if(e.match(O.IDENT)&&("only"!==(n=e.token().value.toLowerCase())&&"not"!==n?(e.unget(),n=null):r=e.token()),this._readWhitespace(),e.peek()===O.IDENT?(t=this._media_type(),null===r&&(r=e.token())):e.peek()===O.LPAREN&&(null===r&&(r=e.LT(1)),i.push(this._media_expression())),null===t&&0===i.length)return null;for(this._readWhitespace();e.match(O.IDENT);)"and"!==e.token().value.toLowerCase()&&this._unexpectedToken(e.token()),this._readWhitespace(),i.push(this._media_expression());return new c(n,t,i,r.startLine,r.startCol)},_media_type:function(){return this._media_feature()},_media_expression:function(){var e,t,n=this._tokenStream,r=null;return n.mustMatch(O.LPAREN),e=this._media_feature(),this._readWhitespace(),n.match(O.COLON)&&(this._readWhitespace(),t=n.LT(1),r=this._expression()),n.mustMatch(O.RPAREN),this._readWhitespace(),new s(e,r?new i(r,t.startLine,t.startCol):null)},_media_feature:function(){var e=this._tokenStream;return this._readWhitespace(),e.mustMatch(O.IDENT),i.fromToken(e.token())},_page:function(){var e,t,n=this._tokenStream,r=null,i=null;n.mustMatch(O.PAGE_SYM),e=n.token().startLine,t=n.token().startCol,this._readWhitespace(),n.match(O.IDENT)&&"auto"===(r=n.token().value).toLowerCase()&&this._unexpectedToken(n.token()),n.peek()===O.COLON&&(i=this._pseudo_page()),this._readWhitespace(),this.fire({type:"startpage",id:r,pseudo:i,line:e,col:t}),this._readDeclarations(!0,!0),this.fire({type:"endpage",id:r,pseudo:i,line:e,col:t})},_margin:function(){var e,t,n=this._tokenStream,r=this._margin_sym();return!!r&&(e=n.token().startLine,t=n.token().startCol,this.fire({type:"startpagemargin",margin:r,line:e,col:t}),this._readDeclarations(!0),this.fire({type:"endpagemargin",margin:r,line:e,col:t}),!0)},_margin_sym:function(){var e=this._tokenStream;return e.match([O.TOPLEFTCORNER_SYM,O.TOPLEFT_SYM,O.TOPCENTER_SYM,O.TOPRIGHT_SYM,O.TOPRIGHTCORNER_SYM,O.BOTTOMLEFTCORNER_SYM,O.BOTTOMLEFT_SYM,O.BOTTOMCENTER_SYM,O.BOTTOMRIGHT_SYM,O.BOTTOMRIGHTCORNER_SYM,O.LEFTTOP_SYM,O.LEFTMIDDLE_SYM,O.LEFTBOTTOM_SYM,O.RIGHTTOP_SYM,O.RIGHTMIDDLE_SYM,O.RIGHTBOTTOM_SYM])?i.fromToken(e.token()):null},_pseudo_page:function(){var e=this._tokenStream;return e.mustMatch(O.COLON),e.mustMatch(O.IDENT),e.token().value},_font_face:function(){var e,t,n=this._tokenStream;n.mustMatch(O.FONT_FACE_SYM),e=n.token().startLine,t=n.token().startCol,this._readWhitespace(),this.fire({type:"startfontface",line:e,col:t}),this._readDeclarations(!0),this.fire({type:"endfontface",line:e,col:t})},_viewport:function(){var e,t,n=this._tokenStream;n.mustMatch(O.VIEWPORT_SYM),e=n.token().startLine,t=n.token().startCol,this._readWhitespace(),this.fire({type:"startviewport",line:e,col:t}),this._readDeclarations(!0),this.fire({type:"endviewport",line:e,col:t})},_document:function(){var e,t=this._tokenStream,n=[],r="";for(t.mustMatch(O.DOCUMENT_SYM),e=t.token(),/^@\-([^\-]+)\-/.test(e.value)&&(r=RegExp.$1),this._readWhitespace(),n.push(this._document_function());t.match(O.COMMA);)this._readWhitespace(),n.push(this._document_function());for(t.mustMatch(O.LBRACE),this._readWhitespace(),this.fire({type:"startdocument",functions:n,prefix:r,line:e.startLine,col:e.startCol});;)if(t.peek()===O.PAGE_SYM)this._page();else if(t.peek()===O.FONT_FACE_SYM)this._font_face();else if(t.peek()===O.VIEWPORT_SYM)this._viewport();else if(t.peek()===O.MEDIA_SYM)this._media();else if(!this._ruleset())break;t.mustMatch(O.RBRACE),this._readWhitespace(),this.fire({type:"enddocument",functions:n,prefix:r,line:e.startLine,col:e.startCol})},_document_function:function(){var e,t=this._tokenStream;return t.match(O.URI)?(e=t.token().value,this._readWhitespace()):e=this._function(),e},_operator:function(e){var t=this._tokenStream,n=null;return(t.match([O.SLASH,O.COMMA])||e&&t.match([O.PLUS,O.STAR,O.MINUS]))&&(n=t.token(),this._readWhitespace()),n?f.fromToken(n):null},_combinator:function(){var e,t=this._tokenStream,n=null;return t.match([O.PLUS,O.GREATER,O.TILDE])&&(n=new a((e=t.token()).value,e.startLine,e.startCol),this._readWhitespace()),n},_unary_operator:function(){var e=this._tokenStream;return e.match([O.MINUS,O.PLUS])?e.token().value:null},_property:function(){var e,t,n,r,i=this._tokenStream,o=null,a=null;return i.peek()===O.STAR&&this.options.starHack&&(i.get(),a=(t=i.token()).value,n=t.startLine,r=t.startCol),i.match(O.IDENT)&&("_"===(e=(t=i.token()).value).charAt(0)&&this.options.underscoreHack&&(a="_",e=e.substring(1)),o=new p(e,a,n||t.startLine,r||t.startCol),this._readWhitespace()),o},_ruleset:function(){var e,t=this._tokenStream;try{e=this._selectors_group()}catch(e){if(!(e instanceof n)||this.options.strict)throw e;if(this.fire({type:"error",error:e,message:e.message,line:e.line,col:e.col}),t.advance([O.RBRACE])!==O.RBRACE)throw e;return!0}return e&&(this.fire({type:"startrule",selectors:e,line:e[0].line,col:e[0].col}),this._readDeclarations(!0),this.fire({type:"endrule",selectors:e,line:e[0].line,col:e[0].col})),e},_selectors_group:function(){var e,t=this._tokenStream,n=[];if(null!==(e=this._selector()))for(n.push(e);t.match(O.COMMA);)this._readWhitespace(),null!==(e=this._selector())?n.push(e):this._unexpectedToken(t.LT(1));return n.length?n:null},_selector:function(){var e=this._tokenStream,t=[],n=null,r=null,i=null;if(null===(n=this._simple_selector_sequence()))return null;for(t.push(n);;)if(null!==(r=this._combinator()))t.push(r),null===(n=this._simple_selector_sequence())?this._unexpectedToken(e.LT(1)):t.push(n);else{if(!this._readWhitespace())break;i=new a(e.token().value,e.token().startLine,e.token().startCol),r=this._combinator(),null===(n=this._simple_selector_sequence())?null!==r&&this._unexpectedToken(e.LT(1)):(null!==r?t.push(r):t.push(i),t.push(n))}return new m(t,t[0].line,t[0].col)},_simple_selector_sequence:function(){var e,t,n=this._tokenStream,r=null,i=[],o="",a=[function(){return n.match(O.HASH)?new b(n.token().value,"id",n.token().startLine,n.token().startCol):null},this._class,this._attrib,this._pseudo,this._negation],s=0,c=a.length,l=null;for(e=n.LT(1).startLine,t=n.LT(1).startCol,(r=this._type_selector())||(r=this._universal()),null!==r&&(o+=r);n.peek()!==O.S;){for(;s<c&&null===l;)l=a[s++].call(this);if(null===l){if(""===o)return null;break}s=0,i.push(l),o+=l.toString(),l=null}return""!==o?new y(r,i,o,e,t):null},_type_selector:function(){var e=this._tokenStream,t=this._namespace_prefix(),n=this._element_name();return n?(t&&(n.text=t+n.text,n.col-=t.length),n):(t&&(e.unget(),t.length>1&&e.unget()),null)},_class:function(){var e,t=this._tokenStream;return t.match(O.DOT)?(t.mustMatch(O.IDENT),new b("."+(e=t.token()).value,"class",e.startLine,e.startCol-1)):null},_element_name:function(){var e,t=this._tokenStream;return t.match(O.IDENT)?new b((e=t.token()).value,"elementName",e.startLine,e.startCol):null},_namespace_prefix:function(){var e=this._tokenStream,t="";return e.LA(1)!==O.PIPE&&e.LA(2)!==O.PIPE||(e.match([O.IDENT,O.STAR])&&(t+=e.token().value),e.mustMatch(O.PIPE),t+="|"),t.length?t:null},_universal:function(){var e,t=this._tokenStream,n="";return(e=this._namespace_prefix())&&(n+=e),t.match(O.STAR)&&(n+="*"),n.length?n:null},_attrib:function(){var e,t,n=this._tokenStream,r=null;return n.match(O.LBRACKET)?(r=(t=n.token()).value,r+=this._readWhitespace(),(e=this._namespace_prefix())&&(r+=e),n.mustMatch(O.IDENT),r+=n.token().value,r+=this._readWhitespace(),n.match([O.PREFIXMATCH,O.SUFFIXMATCH,O.SUBSTRINGMATCH,O.EQUALS,O.INCLUDES,O.DASHMATCH])&&(r+=n.token().value,r+=this._readWhitespace(),n.mustMatch([O.IDENT,O.STRING]),r+=n.token().value,r+=this._readWhitespace()),n.mustMatch(O.RBRACKET),new b(r+"]","attribute",t.startLine,t.startCol)):null},_pseudo:function(){var e,t,n=this._tokenStream,r=null,i=":";return n.match(O.COLON)&&(n.match(O.COLON)&&(i+=":"),n.match(O.IDENT)?(r=n.token().value,e=n.token().startLine,t=n.token().startCol-i.length):n.peek()===O.FUNCTION&&(e=n.LT(1).startLine,t=n.LT(1).startCol-i.length,r=this._functional_pseudo()),r&&(r=new b(i+r,"pseudo",e,t))),r},_functional_pseudo:function(){var e=this._tokenStream,t=null;return e.match(O.FUNCTION)&&(t=e.token().value,t+=this._readWhitespace(),t+=this._expression(),e.mustMatch(O.RPAREN),t+=")"),t},_expression:function(){for(var e=this._tokenStream,t="";e.match([O.PLUS,O.MINUS,O.DIMENSION,O.NUMBER,O.STRING,O.IDENT,O.LENGTH,O.FREQ,O.ANGLE,O.TIME,O.RESOLUTION,O.SLASH]);)t+=e.token().value,t+=this._readWhitespace();return t.length?t:null},_negation:function(){var e,t,n,r=this._tokenStream,i="",o=null;return r.match(O.NOT)&&(i=r.token().value,e=r.token().startLine,t=r.token().startCol,i+=this._readWhitespace(),i+=n=this._negation_arg(),i+=this._readWhitespace(),r.match(O.RPAREN),(o=new b(i+=r.token().value,"not",e,t)).args.push(n)),o},_negation_arg:function(){var e,t,n=this._tokenStream,r=[this._type_selector,this._universal,function(){return n.match(O.HASH)?new b(n.token().value,"id",n.token().startLine,n.token().startCol):null},this._class,this._attrib,this._pseudo],i=null,o=0,a=r.length;for(e=n.LT(1).startLine,t=n.LT(1).startCol;o<a&&null===i;)i=r[o].call(this),o++;return null===i&&this._unexpectedToken(n.LT(1)),"elementName"===i.type?new y(i,[],i.toString(),e,t):new y(null,[i],i.toString(),e,t)},_declaration:function(){var e=this._tokenStream,t=null,n=null,r=null,i=null,o="";if(null!==(t=this._property())){e.mustMatch(O.COLON),this._readWhitespace(),(n=this._expr())&&0!==n.length||this._unexpectedToken(e.LT(1)),r=this._prio(),o=t.toString(),(this.options.starHack&&"*"===t.hack||this.options.underscoreHack&&"_"===t.hack)&&(o=t.text);try{this._validateProperty(o,n)}catch(e){i=e}return this.fire({type:"property",property:t,value:n,important:r,line:t.line,col:t.col,invalid:i}),!0}return!1},_prio:function(){var e=this._tokenStream.match(O.IMPORTANT_SYM);return this._readWhitespace(),e},_expr:function(e){var t=[],n=null,r=null;if(null!==(n=this._term(e)))for(t.push(n);;){if((r=this._operator(e))&&t.push(r),null===(n=this._term(e)))break;t.push(n)}return t.length>0?new h(t,t[0].line,t[0].col):null},_term:function(e){var t,n,r,i,o=this._tokenStream,a=null,s=null;return null!==(t=this._unary_operator())&&(r=o.token().startLine,i=o.token().startCol),o.peek()===O.IE_FUNCTION&&this.options.ieFilters?(a=this._ie_function(),null===t&&(r=o.token().startLine,i=o.token().startCol)):e&&o.match([O.LPAREN,O.LBRACE,O.LBRACKET])?(s=(n=o.token()).endChar,a=n.value+this._expr(e).text,null===t&&(r=o.token().startLine,i=o.token().startCol),o.mustMatch(O.type(s)),a+=s,this._readWhitespace()):o.match([O.NUMBER,O.PERCENTAGE,O.LENGTH,O.ANGLE,O.TIME,O.FREQ,O.STRING,O.IDENT,O.URI,O.UNICODE_RANGE])?(a=o.token().value,null===t&&(r=o.token().startLine,i=o.token().startCol),this._readWhitespace()):null===(n=this._hexcolor())?(null===t&&(r=o.LT(1).startLine,i=o.LT(1).startCol),null===a&&(a=o.LA(3)===O.EQUALS&&this.options.ieFilters?this._ie_function():this._function())):(a=n.value,null===t&&(r=n.startLine,i=n.startCol)),null!==a?new f(null!==t?t+a:a,r,i):null},_function:function(){var e,t=this._tokenStream,n=null;if(t.match(O.FUNCTION)){if(n=t.token().value,this._readWhitespace(),n+=this._expr(!0),this.options.ieFilters&&t.peek()===O.EQUALS)do{for(this._readWhitespace()&&(n+=t.token().value),t.LA(0)===O.COMMA&&(n+=t.token().value),t.match(O.IDENT),n+=t.token().value,t.match(O.EQUALS),n+=t.token().value,e=t.peek();e!==O.COMMA&&e!==O.S&&e!==O.RPAREN;)t.get(),n+=t.token().value,e=t.peek()}while(t.match([O.COMMA,O.S]));t.match(O.RPAREN),n+=")",this._readWhitespace()}return n},_ie_function:function(){var e,t=this._tokenStream,n=null;if(t.match([O.IE_FUNCTION,O.FUNCTION])){n=t.token().value;do{for(this._readWhitespace()&&(n+=t.token().value),t.LA(0)===O.COMMA&&(n+=t.token().value),t.match(O.IDENT),n+=t.token().value,t.match(O.EQUALS),n+=t.token().value,e=t.peek();e!==O.COMMA&&e!==O.S&&e!==O.RPAREN;)t.get(),n+=t.token().value,e=t.peek()}while(t.match([O.COMMA,O.S]));t.match(O.RPAREN),n+=")",this._readWhitespace()}return n},_hexcolor:function(){var e,t=this._tokenStream,r=null;if(t.match(O.HASH)){if(e=(r=t.token()).value,!/#[a-f0-9]{3,6}/i.test(e))throw new n("Expected a hex color but found '"+e+"' at line "+r.startLine+", col "+r.startCol+".",r.startLine,r.startCol);this._readWhitespace()}return r},_keyframes:function(){var e,t,n,r=this._tokenStream,i="";for(r.mustMatch(O.KEYFRAMES_SYM),e=r.token(),/^@\-([^\-]+)\-/.test(e.value)&&(i=RegExp.$1),this._readWhitespace(),n=this._keyframe_name(),this._readWhitespace(),r.mustMatch(O.LBRACE),this.fire({type:"startkeyframes",name:n,prefix:i,line:e.startLine,col:e.startCol}),this._readWhitespace(),t=r.peek();t===O.IDENT||t===O.PERCENTAGE;)this._keyframe_rule(),this._readWhitespace(),t=r.peek();this.fire({type:"endkeyframes",name:n,prefix:i,line:e.startLine,col:e.startCol}),this._readWhitespace(),r.mustMatch(O.RBRACE)},_keyframe_name:function(){var e=this._tokenStream;return e.mustMatch([O.IDENT,O.STRING]),i.fromToken(e.token())},_keyframe_rule:function(){var e=this._key_list();this.fire({type:"startkeyframerule",keys:e,line:e[0].line,col:e[0].col}),this._readDeclarations(!0),this.fire({type:"endkeyframerule",keys:e,line:e[0].line,col:e[0].col})},_key_list:function(){var e=this._tokenStream,t=[];for(t.push(this._key()),this._readWhitespace();e.match(O.COMMA);)this._readWhitespace(),t.push(this._key()),this._readWhitespace();return t},_key:function(){var e,t=this._tokenStream;if(t.match(O.PERCENTAGE))return i.fromToken(t.token());if(t.match(O.IDENT)){if(e=t.token(),/from|to/i.test(e.value))return i.fromToken(e);t.unget()}this._unexpectedToken(t.LT(1))},_skipCruft:function(){for(;this._tokenStream.match([O.S,O.CDO,O.CDC]););},_readDeclarations:function(e,t){var r,i=this._tokenStream;this._readWhitespace(),e&&i.mustMatch(O.LBRACE),this._readWhitespace();try{for(;;){if(i.match(O.SEMICOLON)||t&&this._margin());else{if(!this._declaration())break;if(!i.match(O.SEMICOLON))break}this._readWhitespace()}i.mustMatch(O.RBRACE),this._readWhitespace()}catch(e){if(!(e instanceof n)||this.options.strict)throw e;if(this.fire({type:"error",error:e,message:e.message,line:e.line,col:e.col}),(r=i.advance([O.SEMICOLON,O.RBRACE]))===O.SEMICOLON)this._readDeclarations(!1,t);else if(r!==O.RBRACE)throw e}},_readWhitespace:function(){for(var e=this._tokenStream,t="";e.match(O.S);)t+=e.token().value;return t},_unexpectedToken:function(e){throw new n("Unexpected token '"+e.value+"' at line "+e.startLine+", col "+e.startCol+".",e.startLine,e.startCol)},_verifyEnd:function(){this._tokenStream.LA(1)!==O.EOF&&this._unexpectedToken(this._tokenStream.LT(1))},_validateProperty:function(e,t){D.validate(e,t)},parse:function(e){this._tokenStream=new x(e,O),this._stylesheet()},parseStyleSheet:function(e){return this.parse(e)},parseMediaQuery:function(e){this._tokenStream=new x(e,O);var t=this._media_query();return this._verifyEnd(),t},parsePropertyValue:function(e){this._tokenStream=new x(e,O),this._readWhitespace();var t=this._expr();return this._readWhitespace(),this._verifyEnd(),t},parseRule:function(e){this._tokenStream=new x(e,O),this._readWhitespace();var t=this._ruleset();return this._readWhitespace(),this._verifyEnd(),t},parseSelector:function(e){this._tokenStream=new x(e,O),this._readWhitespace();var t=this._selector();return this._readWhitespace(),this._verifyEnd(),t},parseStyleAttribute:function(e){e+="}",this._tokenStream=new x(e,O),this._readDeclarations()}};for(t in o)Object.prototype.hasOwnProperty.call(o,t)&&(r[t]=o[t]);return r}();var u={__proto__:null,"align-items":"flex-start | flex-end | center | baseline | stretch","align-content":"flex-start | flex-end | center | space-between | space-around | stretch","align-self":"auto | flex-start | flex-end | center | baseline | stretch","-webkit-align-items":"flex-start | flex-end | center | baseline | stretch","-webkit-align-content":"flex-start | flex-end | center | space-between | space-around | stretch","-webkit-align-self":"auto | flex-start | flex-end | center | baseline | stretch","alignment-adjust":"auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length>","alignment-baseline":"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical",animation:1,"animation-delay":{multi:"<time>",comma:!0},"animation-direction":{multi:"normal | alternate",comma:!0},"animation-duration":{multi:"<time>",comma:!0},"animation-fill-mode":{multi:"none | forwards | backwards | both",comma:!0},"animation-iteration-count":{multi:"<number> | infinite",comma:!0},"animation-name":{multi:"none | <ident>",comma:!0},"animation-play-state":{multi:"running | paused",comma:!0},"animation-timing-function":1,"-moz-animation-delay":{multi:"<time>",comma:!0},"-moz-animation-direction":{multi:"normal | alternate",comma:!0},"-moz-animation-duration":{multi:"<time>",comma:!0},"-moz-animation-iteration-count":{multi:"<number> | infinite",comma:!0},"-moz-animation-name":{multi:"none | <ident>",comma:!0},"-moz-animation-play-state":{multi:"running | paused",comma:!0},"-ms-animation-delay":{multi:"<time>",comma:!0},"-ms-animation-direction":{multi:"normal | alternate",comma:!0},"-ms-animation-duration":{multi:"<time>",comma:!0},"-ms-animation-iteration-count":{multi:"<number> | infinite",comma:!0},"-ms-animation-name":{multi:"none | <ident>",comma:!0},"-ms-animation-play-state":{multi:"running | paused",comma:!0},"-webkit-animation-delay":{multi:"<time>",comma:!0},"-webkit-animation-direction":{multi:"normal | alternate",comma:!0},"-webkit-animation-duration":{multi:"<time>",comma:!0},"-webkit-animation-fill-mode":{multi:"none | forwards | backwards | both",comma:!0},"-webkit-animation-iteration-count":{multi:"<number> | infinite",comma:!0},"-webkit-animation-name":{multi:"none | <ident>",comma:!0},"-webkit-animation-play-state":{multi:"running | paused",comma:!0},"-o-animation-delay":{multi:"<time>",comma:!0},"-o-animation-direction":{multi:"normal | alternate",comma:!0},"-o-animation-duration":{multi:"<time>",comma:!0},"-o-animation-iteration-count":{multi:"<number> | infinite",comma:!0},"-o-animation-name":{multi:"none | <ident>",comma:!0},"-o-animation-play-state":{multi:"running | paused",comma:!0},appearance:"icon | window | desktop | workspace | document | tooltip | dialog | button | push-button | hyperlink | radio | radio-button | checkbox | menu-item | tab | menu | menubar | pull-down-menu | pop-up-menu | list-menu | radio-group | checkbox-group | outline-tree | range | field | combo-box | signature | password | normal | none | inherit",azimuth:function(e){var t,n=!1,r=!1;if(M.isAny(e,"<angle> | leftwards | rightwards | inherit")||(M.isAny(e,"behind")&&(n=!0,r=!0),M.isAny(e,"left-side | far-left | left | center-left | center | center-right | right | far-right | right-side")&&(r=!0,n||M.isAny(e,"behind"))),e.hasNext())throw t=e.next(),new A(r?"Expected end of value but found '"+t+"'.":"Expected (<'azimuth'>) but found '"+t+"'.",t.line,t.col)},"backface-visibility":"visible | hidden",background:1,"background-attachment":{multi:"<attachment>",comma:!0},"background-clip":{multi:"<box>",comma:!0},"background-color":"<color> | inherit","background-image":{multi:"<bg-image>",comma:!0},"background-origin":{multi:"<box>",comma:!0},"background-position":{multi:"<bg-position>",comma:!0},"background-repeat":{multi:"<repeat-style>"},"background-size":{multi:"<bg-size>",comma:!0},"baseline-shift":"baseline | sub | super | <percentage> | <length>",behavior:1,binding:1,bleed:"<length>","bookmark-label":"<content> | <attr> | <string>","bookmark-level":"none | <integer>","bookmark-state":"open | closed","bookmark-target":"none | <uri> | <attr>",border:"<border-width> || <border-style> || <color>","border-bottom":"<border-width> || <border-style> || <color>","border-bottom-color":"<color> | inherit","border-bottom-left-radius":"<x-one-radius>","border-bottom-right-radius":"<x-one-radius>","border-bottom-style":"<border-style>","border-bottom-width":"<border-width>","border-collapse":"collapse | separate | inherit","border-color":{multi:"<color> | inherit",max:4},"border-image":1,"border-image-outset":{multi:"<length> | <number>",max:4},"border-image-repeat":{multi:"stretch | repeat | round",max:2},"border-image-slice":function(e){var t,n=!1,r=!1,i=0;for(M.isAny(e,"fill")&&(r=!0,n=!0);e.hasNext()&&i<4&&(n=M.isAny(e,"<number> | <percentage>"));)i++;if(r?n=!0:M.isAny(e,"fill"),e.hasNext())throw t=e.next(),new A(n?"Expected end of value but found '"+t+"'.":"Expected ([<number> | <percentage>]{1,4} && fill?) but found '"+t+"'.",t.line,t.col)},"border-image-source":"<image> | none","border-image-width":{multi:"<length> | <percentage> | <number> | auto",max:4},"border-left":"<border-width> || <border-style> || <color>","border-left-color":"<color> | inherit","border-left-style":"<border-style>","border-left-width":"<border-width>","border-radius":function(e){for(var t,n=!1,r=!1,i=0,o=8;e.hasNext()&&i<o;){if(!(n=M.isAny(e,"<length> | <percentage> | inherit"))){if(!("/"===String(e.peek())&&i>0)||r)break;r=!0,o=i+5,e.next()}i++}if(e.hasNext())throw t=e.next(),new A(n?"Expected end of value but found '"+t+"'.":"Expected (<'border-radius'>) but found '"+t+"'.",t.line,t.col)},"border-right":"<border-width> || <border-style> || <color>","border-right-color":"<color> | inherit","border-right-style":"<border-style>","border-right-width":"<border-width>","border-spacing":{multi:"<length> | inherit",max:2},"border-style":{multi:"<border-style>",max:4},"border-top":"<border-width> || <border-style> || <color>","border-top-color":"<color> | inherit","border-top-left-radius":"<x-one-radius>","border-top-right-radius":"<x-one-radius>","border-top-style":"<border-style>","border-top-width":"<border-width>","border-width":{multi:"<border-width>",max:4},bottom:"<margin-width> | inherit","-moz-box-align":"start | end | center | baseline | stretch","-moz-box-decoration-break":"slice |clone","-moz-box-direction":"normal | reverse | inherit","-moz-box-flex":"<number>","-moz-box-flex-group":"<integer>","-moz-box-lines":"single | multiple","-moz-box-ordinal-group":"<integer>","-moz-box-orient":"horizontal | vertical | inline-axis | block-axis | inherit","-moz-box-pack":"start | end | center | justify","-o-box-decoration-break":"slice | clone","-webkit-box-align":"start | end | center | baseline | stretch","-webkit-box-decoration-break":"slice |clone","-webkit-box-direction":"normal | reverse | inherit","-webkit-box-flex":"<number>","-webkit-box-flex-group":"<integer>","-webkit-box-lines":"single | multiple","-webkit-box-ordinal-group":"<integer>","-webkit-box-orient":"horizontal | vertical | inline-axis | block-axis | inherit","-webkit-box-pack":"start | end | center | justify","box-decoration-break":"slice | clone","box-shadow":function(e){var t;if(M.isAny(e,"none")){if(e.hasNext())throw new A("Expected end of value but found '"+(t=e.next())+"'.",t.line,t.col)}else D.multiProperty("<shadow>",e,!0,1/0)},"box-sizing":"content-box | border-box | inherit","break-after":"auto | always | avoid | left | right | page | column | avoid-page | avoid-column","break-before":"auto | always | avoid | left | right | page | column | avoid-page | avoid-column","break-inside":"auto | avoid | avoid-page | avoid-column","caption-side":"top | bottom | inherit",clear:"none | right | left | both | inherit",clip:1,color:"<color> | inherit","color-profile":1,"column-count":"<integer> | auto","column-fill":"auto | balance","column-gap":"<length> | normal","column-rule":"<border-width> || <border-style> || <color>","column-rule-color":"<color>","column-rule-style":"<border-style>","column-rule-width":"<border-width>","column-span":"none | all","column-width":"<length> | auto",columns:1,content:1,"counter-increment":1,"counter-reset":1,crop:"<shape> | auto",cue:"cue-after | cue-before | inherit","cue-after":1,"cue-before":1,cursor:1,direction:"ltr | rtl | inherit",display:"inline | block | list-item | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | grid | inline-grid | run-in | ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | contents | none | inherit | -moz-box | -moz-inline-block | -moz-inline-box | -moz-inline-grid | -moz-inline-stack | -moz-inline-table | -moz-grid | -moz-grid-group | -moz-grid-line | -moz-groupbox | -moz-deck | -moz-popup | -moz-stack | -moz-marker | -webkit-box | -webkit-inline-box | -ms-flexbox | -ms-inline-flexbox | flex | -webkit-flex | inline-flex | -webkit-inline-flex","dominant-baseline":1,"drop-initial-after-adjust":"central | middle | after-edge | text-after-edge | ideographic | alphabetic | mathematical | <percentage> | <length>","drop-initial-after-align":"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical","drop-initial-before-adjust":"before-edge | text-before-edge | central | middle | hanging | mathematical | <percentage> | <length>","drop-initial-before-align":"caps-height | baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical","drop-initial-size":"auto | line | <length> | <percentage>","drop-initial-value":"initial | <integer>",elevation:"<angle> | below | level | above | higher | lower | inherit","empty-cells":"show | hide | inherit",filter:1,fit:"fill | hidden | meet | slice","fit-position":1,flex:"<flex>","flex-basis":"<width>","flex-direction":"row | row-reverse | column | column-reverse","flex-flow":"<flex-direction> || <flex-wrap>","flex-grow":"<number>","flex-shrink":"<number>","flex-wrap":"nowrap | wrap | wrap-reverse","-webkit-flex":"<flex>","-webkit-flex-basis":"<width>","-webkit-flex-direction":"row | row-reverse | column | column-reverse","-webkit-flex-flow":"<flex-direction> || <flex-wrap>","-webkit-flex-grow":"<number>","-webkit-flex-shrink":"<number>","-webkit-flex-wrap":"nowrap | wrap | wrap-reverse","-ms-flex":"<flex>","-ms-flex-align":"start | end | center | stretch | baseline","-ms-flex-direction":"row | row-reverse | column | column-reverse | inherit","-ms-flex-order":"<number>","-ms-flex-pack":"start | end | center | justify","-ms-flex-wrap":"nowrap | wrap | wrap-reverse",float:"left | right | none | inherit","float-offset":1,font:1,"font-family":1,"font-feature-settings":"<feature-tag-value> | normal | inherit","font-kerning":"auto | normal | none | initial | inherit | unset","font-size":"<absolute-size> | <relative-size> | <length> | <percentage> | inherit","font-size-adjust":"<number> | none | inherit","font-stretch":"normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit","font-style":"normal | italic | oblique | inherit","font-variant":"normal | small-caps | inherit","font-variant-caps":"normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps","font-variant-position":"normal | sub | super | inherit | initial | unset","font-weight":"normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit",grid:1,"grid-area":1,"grid-auto-columns":1,"grid-auto-flow":1,"grid-auto-position":1,"grid-auto-rows":1,"grid-cell-stacking":"columns | rows | layer","grid-column":1,"grid-columns":1,"grid-column-align":"start | end | center | stretch","grid-column-sizing":1,"grid-column-start":1,"grid-column-end":1,"grid-column-span":"<integer>","grid-flow":"none | rows | columns","grid-layer":"<integer>","grid-row":1,"grid-rows":1,"grid-row-align":"start | end | center | stretch","grid-row-start":1,"grid-row-end":1,"grid-row-span":"<integer>","grid-row-sizing":1,"grid-template":1,"grid-template-areas":1,"grid-template-columns":1,"grid-template-rows":1,"hanging-punctuation":1,height:"<margin-width> | <content-sizing> | inherit","hyphenate-after":"<integer> | auto","hyphenate-before":"<integer> | auto","hyphenate-character":"<string> | auto","hyphenate-lines":"no-limit | <integer>","hyphenate-resource":1,hyphens:"none | manual | auto",icon:1,"image-orientation":"angle | auto","image-rendering":1,"image-resolution":1,"ime-mode":"auto | normal | active | inactive | disabled | inherit","inline-box-align":"initial | last | <integer>","justify-content":"flex-start | flex-end | center | space-between | space-around","-webkit-justify-content":"flex-start | flex-end | center | space-between | space-around",left:"<margin-width> | inherit","letter-spacing":"<length> | normal | inherit","line-height":"<number> | <length> | <percentage> | normal | inherit","line-break":"auto | loose | normal | strict","line-stacking":1,"line-stacking-ruby":"exclude-ruby | include-ruby","line-stacking-shift":"consider-shifts | disregard-shifts","line-stacking-strategy":"inline-line-height | block-line-height | max-height | grid-height","list-style":1,"list-style-image":"<uri> | none | inherit","list-style-position":"inside | outside | inherit","list-style-type":"disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit",margin:{multi:"<margin-width> | inherit",max:4},"margin-bottom":"<margin-width> | inherit","margin-left":"<margin-width> | inherit","margin-right":"<margin-width> | inherit","margin-top":"<margin-width> | inherit",mark:1,"mark-after":1,"mark-before":1,marks:1,"marquee-direction":1,"marquee-play-count":1,"marquee-speed":1,"marquee-style":1,"max-height":"<length> | <percentage> | <content-sizing> | none | inherit","max-width":"<length> | <percentage> | <content-sizing> | none | inherit","min-height":"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit","min-width":"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit","move-to":1,"nav-down":1,"nav-index":1,"nav-left":1,"nav-right":1,"nav-up":1,"object-fit":"fill | contain | cover | none | scale-down","object-position":"<bg-position>",opacity:"<number> | inherit",order:"<integer>","-webkit-order":"<integer>",orphans:"<integer> | inherit",outline:1,"outline-color":"<color> | invert | inherit","outline-offset":1,"outline-style":"<border-style> | inherit","outline-width":"<border-width> | inherit",overflow:"visible | hidden | scroll | auto | inherit","overflow-style":1,"overflow-wrap":"normal | break-word","overflow-x":1,"overflow-y":1,padding:{multi:"<padding-width> | inherit",max:4},"padding-bottom":"<padding-width> | inherit","padding-left":"<padding-width> | inherit","padding-right":"<padding-width> | inherit","padding-top":"<padding-width> | inherit",page:1,"page-break-after":"auto | always | avoid | left | right | inherit","page-break-before":"auto | always | avoid | left | right | inherit","page-break-inside":"auto | avoid | inherit","page-policy":1,pause:1,"pause-after":1,"pause-before":1,perspective:1,"perspective-origin":1,phonemes:1,pitch:1,"pitch-range":1,"play-during":1,"pointer-events":"auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",position:"static | relative | absolute | fixed | inherit","presentation-level":1,"punctuation-trim":1,quotes:1,"rendering-intent":1,resize:1,rest:1,"rest-after":1,"rest-before":1,richness:1,right:"<margin-width> | inherit",rotation:1,"rotation-point":1,"ruby-align":1,"ruby-overhang":1,"ruby-position":1,"ruby-span":1,size:1,speak:"normal | none | spell-out | inherit","speak-header":"once | always | inherit","speak-numeral":"digits | continuous | inherit","speak-punctuation":"code | none | inherit","speech-rate":1,src:1,stress:1,"string-set":1,"table-layout":"auto | fixed | inherit","tab-size":"<integer> | <length>",target:1,"target-name":1,"target-new":1,"target-position":1,"text-align":"left | right | center | justify | match-parent | start | end | inherit","text-align-last":1,"text-decoration":1,"text-emphasis":1,"text-height":1,"text-indent":"<length> | <percentage> | inherit","text-justify":"auto | none | inter-word | inter-ideograph | inter-cluster | distribute | kashida","text-outline":1,"text-overflow":1,"text-rendering":"auto | optimizeSpeed | optimizeLegibility | geometricPrecision | inherit","text-shadow":1,"text-transform":"capitalize | uppercase | lowercase | none | inherit","text-wrap":"normal | none | avoid",top:"<margin-width> | inherit","-ms-touch-action":"auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation","touch-action":"auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation",transform:1,"transform-origin":1,"transform-style":1,transition:1,"transition-delay":1,"transition-duration":1,"transition-property":1,"transition-timing-function":1,"unicode-bidi":"normal | embed | isolate | bidi-override | isolate-override | plaintext | inherit","user-modify":"read-only | read-write | write-only | inherit","user-select":"none | text | toggle | element | elements | all | inherit","vertical-align":"auto | use-script | baseline | sub | super | top | text-top | central | middle | bottom | text-bottom | <percentage> | <length> | inherit",visibility:"visible | hidden | collapse | inherit","voice-balance":1,"voice-duration":1,"voice-family":1,"voice-pitch":1,"voice-pitch-range":1,"voice-rate":1,"voice-stress":1,"voice-volume":1,volume:1,"white-space":"normal | pre | nowrap | pre-wrap | pre-line | inherit | -pre-wrap | -o-pre-wrap | -moz-pre-wrap | -hp-pre-wrap","white-space-collapse":1,widows:"<integer> | inherit",width:"<length> | <percentage> | <content-sizing> | auto | inherit","will-change":{multi:"<ident>",comma:!0},"word-break":"normal | keep-all | break-all","word-spacing":"<length> | normal | inherit","word-wrap":"normal | break-word","writing-mode":"horizontal-tb | vertical-rl | vertical-lr | lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr | lr-bt | rl-bt | lr | rl | tb | inherit","z-index":"<integer> | auto | inherit",zoom:"<number> | <percentage> | normal"};function p(e,t,n,r){i.call(this,e,n,r,l.PROPERTY_NAME_TYPE),this.hack=t}function h(e,t,n){i.call(this,e.join(" "),t,n,l.PROPERTY_VALUE_TYPE),this.parts=e}function d(e){this._i=0,this._parts=e.parts,this._marks=[],this.value=e}function f(e,t,n){var r;if(i.call(this,e,t,n,l.PROPERTY_VALUE_PART_TYPE),this.type="unknown",/^([+\-]?[\d\.]+)([a-z]+)$/i.test(e))switch(this.type="dimension",this.value=+RegExp.$1,this.units=RegExp.$2,this.units.toLowerCase()){case"em":case"rem":case"ex":case"px":case"cm":case"mm":case"in":case"pt":case"pc":case"ch":case"vh":case"vw":case"vmax":case"vmin":this.type="length";break;case"fr":this.type="grid";break;case"deg":case"rad":case"grad":this.type="angle";break;case"ms":case"s":this.type="time";break;case"hz":case"khz":this.type="frequency";break;case"dpi":case"dpcm":this.type="resolution"}else/^([+\-]?[\d\.]+)%$/i.test(e)?(this.type="percentage",this.value=+RegExp.$1):/^([+\-]?\d+)$/i.test(e)?(this.type="integer",this.value=+RegExp.$1):/^([+\-]?[\d\.]+)$/i.test(e)?(this.type="number",this.value=+RegExp.$1):/^#([a-f0-9]{3,6})/i.test(e)?(this.type="color",3===(r=RegExp.$1).length?(this.red=parseInt(r.charAt(0)+r.charAt(0),16),this.green=parseInt(r.charAt(1)+r.charAt(1),16),this.blue=parseInt(r.charAt(2)+r.charAt(2),16)):(this.red=parseInt(r.substring(0,2),16),this.green=parseInt(r.substring(2,4),16),this.blue=parseInt(r.substring(4,6),16))):/^rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i.test(e)?(this.type="color",this.red=+RegExp.$1,this.green=+RegExp.$2,this.blue=+RegExp.$3):/^rgb\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(e)?(this.type="color",this.red=255*+RegExp.$1/100,this.green=255*+RegExp.$2/100,this.blue=255*+RegExp.$3/100):/^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d\.]+)\s*\)/i.test(e)?(this.type="color",this.red=+RegExp.$1,this.green=+RegExp.$2,this.blue=+RegExp.$3,this.alpha=+RegExp.$4):/^rgba\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(e)?(this.type="color",this.red=255*+RegExp.$1/100,this.green=255*+RegExp.$2/100,this.blue=255*+RegExp.$3/100,this.alpha=+RegExp.$4):/^hsl\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(e)?(this.type="color",this.hue=+RegExp.$1,this.saturation=+RegExp.$2/100,this.lightness=+RegExp.$3/100):/^hsla\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(e)?(this.type="color",this.hue=+RegExp.$1,this.saturation=+RegExp.$2/100,this.lightness=+RegExp.$3/100,this.alpha=+RegExp.$4):/^url\(["']?([^\)"']+)["']?\)/i.test(e)?(this.type="uri",this.uri=RegExp.$1):/^([^\(]+)\(/i.test(e)?(this.type="function",this.name=RegExp.$1,this.value=e):/^"([^\n\r\f\\"]|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*"/i.test(e)?(this.type="string",this.value=f.parseString(e)):/^'([^\n\r\f\\']|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*'/i.test(e)?(this.type="string",this.value=f.parseString(e)):o[e.toLowerCase()]?(this.type="color",r=o[e.toLowerCase()].substring(1),this.red=parseInt(r.substring(0,2),16),this.green=parseInt(r.substring(2,4),16),this.blue=parseInt(r.substring(4,6),16)):/^[\,\/]$/.test(e)?(this.type="operator",this.value=e):/^[a-z\-_\u0080-\uFFFF][a-z0-9\-_\u0080-\uFFFF]*$/i.test(e)&&(this.type="identifier",this.value=e)}p.prototype=new i,p.prototype.constructor=p,p.prototype.toString=function(){return(this.hack?this.hack:"")+this.text},h.prototype=new i,h.prototype.constructor=h,d.prototype.count=function(){return this._parts.length},d.prototype.isFirst=function(){return 0===this._i},d.prototype.hasNext=function(){return this._i<this._parts.length},d.prototype.mark=function(){this._marks.push(this._i)},d.prototype.peek=function(e){return this.hasNext()?this._parts[this._i+(e||0)]:null},d.prototype.next=function(){return this.hasNext()?this._parts[this._i++]:null},d.prototype.previous=function(){return this._i>0?this._parts[--this._i]:null},d.prototype.restore=function(){this._marks.length&&(this._i=this._marks.pop())},f.prototype=new i,f.prototype.constructor=f,f.parseString=function(e){return(e=e.slice(1,-1)).replace(/\\(\r\n|[^\r0-9a-f]|[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)/gi,function(e,t){if(/^(\n|\r\n|\r|\f)$/.test(t))return"";var n=/^[0-9a-f]{1,6}/i.exec(t);if(n){var r=parseInt(n[0],16);return String.fromCodePoint?String.fromCodePoint(r):String.fromCharCode(r)}return t})},f.serializeString=function(e){return'"'+e.replace(/["\r\n\f]/g,function(e,t){return'"'===t?"\\"+t:"\\"+(String.codePointAt?String.codePointAt(0):String.charCodeAt(0)).toString(16)+" "})+'"'},f.fromToken=function(e){return new f(e.value,e.startLine,e.startCol)};var g={__proto__:null,":first-letter":1,":first-line":1,":before":1,":after":1};function m(e,t,n){i.call(this,e.join(" "),t,n,l.SELECTOR_TYPE),this.parts=e,this.specificity=v.calculate(this)}function y(e,t,n,r,o){i.call(this,n,r,o,l.SELECTOR_PART_TYPE),this.elementName=e,this.modifiers=t}function b(e,t,n,r){i.call(this,e,n,r,l.SELECTOR_SUB_PART_TYPE),this.type=t,this.args=[]}function v(e,t,n,r){this.a=e,this.b=t,this.c=n,this.d=r}g.ELEMENT=1,g.CLASS=2,g.isElement=function(e){return 0===e.indexOf("::")||g[e.toLowerCase()]===g.ELEMENT},m.prototype=new i,m.prototype.constructor=m,y.prototype=new i,y.prototype.constructor=y,b.prototype=new i,b.prototype.constructor=b,v.prototype={constructor:v,compare:function(e){var t,n,r=["a","b","c","d"];for(t=0,n=r.length;t<n;t++){if(this[r[t]]<e[r[t]])return-1;if(this[r[t]]>e[r[t]])return 1}return 0},valueOf:function(){return 1e3*this.a+100*this.b+10*this.c+this.d},toString:function(){return this.a+","+this.b+","+this.c+","+this.d}},v.calculate=function(e){var t,n,r,i=0,o=0,a=0;function s(e){var t,n,r,c,l,u=e.elementName?e.elementName.text:"";for(u&&"*"!==u.charAt(u.length-1)&&a++,t=0,r=e.modifiers.length;t<r;t++)switch((l=e.modifiers[t]).type){case"class":case"attribute":o++;break;case"id":i++;break;case"pseudo":g.isElement(l.text)?a++:o++;break;case"not":for(n=0,c=l.args.length;n<c;n++)s(l.args[n])}}for(t=0,n=e.parts.length;t<n;t++)(r=e.parts[t])instanceof y&&s(r);return new v(0,i,o,a)};var _=/^[0-9a-fA-F]$/,w=/\n|\r\n|\r|\f/;function E(e){return null!==e&&_.test(e)}function T(e){return null!==e&&/\d/.test(e)}function k(e){return null!==e&&/\s/.test(e)}function N(e){return null!==e&&w.test(e)}function S(e){return null!==e&&/[a-z_\u0080-\uFFFF\\]/i.test(e)}function R(e){return null!==e&&(S(e)||/[0-9\-\\]/.test(e))}function C(e){return null!==e&&(S(e)||/\-\\/.test(e))}function x(e){t.call(this,e,O)}x.prototype=function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}(new t,{_getToken:function(e){var t,n=this._reader,r=null,i=n.getLine(),o=n.getCol();for(t=n.read();t;){switch(t){case"/":r="*"===n.peek()?this.commentToken(t,i,o):this.charToken(t,i,o);break;case"|":case"~":case"^":case"$":case"*":r="="===n.peek()?this.comparisonToken(t,i,o):this.charToken(t,i,o);break;case'"':case"'":r=this.stringToken(t,i,o);break;case"#":r=R(n.peek())?this.hashToken(t,i,o):this.charToken(t,i,o);break;case".":r=T(n.peek())?this.numberToken(t,i,o):this.charToken(t,i,o);break;case"-":r="-"===n.peek()?this.htmlCommentEndToken(t,i,o):S(n.peek())?this.identOrFunctionToken(t,i,o):this.charToken(t,i,o);break;case"!":r=this.importantToken(t,i,o);break;case"@":r=this.atRuleToken(t,i,o);break;case":":r=this.notToken(t,i,o);break;case"<":r=this.htmlCommentStartToken(t,i,o);break;case"U":case"u":if("+"===n.peek()){r=this.unicodeRangeToken(t,i,o);break}default:r=T(t)?this.numberToken(t,i,o):k(t)?this.whitespaceToken(t,i,o):C(t)?this.identOrFunctionToken(t,i,o):this.charToken(t,i,o)}break}return r||null!==t||(r=this.createToken(O.EOF,null,i,o)),r},createToken:function(e,t,n,r,i){var o=this._reader;return{value:t,type:e,channel:(i=i||{}).channel,endChar:i.endChar,hide:i.hide||!1,startLine:n,startCol:r,endLine:o.getLine(),endCol:o.getCol()}},atRuleToken:function(e,t,n){var r=e,i=this._reader,o=O.CHAR;return i.mark(),r=e+this.readName(),(o=O.type(r.toLowerCase()))!==O.CHAR&&o!==O.UNKNOWN||(r.length>1?o=O.UNKNOWN_SYM:(o=O.CHAR,r=e,i.reset())),this.createToken(o,r,t,n)},charToken:function(e,t,n){var r=O.type(e),i={};return-1===r?r=O.CHAR:i.endChar=O[r].endChar,this.createToken(r,e,t,n,i)},commentToken:function(e,t,n){var r=this.readComment(e);return this.createToken(O.COMMENT,r,t,n)},comparisonToken:function(e,t,n){var r=e+this._reader.read(),i=O.type(r)||O.CHAR;return this.createToken(i,r,t,n)},hashToken:function(e,t,n){var r=this.readName(e);return this.createToken(O.HASH,r,t,n)},htmlCommentStartToken:function(e,t,n){var r=this._reader,i=e;return r.mark(),"\x3c!--"===(i+=r.readCount(3))?this.createToken(O.CDO,i,t,n):(r.reset(),this.charToken(e,t,n))},htmlCommentEndToken:function(e,t,n){var r=this._reader,i=e;return r.mark(),"--\x3e"===(i+=r.readCount(2))?this.createToken(O.CDC,i,t,n):(r.reset(),this.charToken(e,t,n))},identOrFunctionToken:function(e,t,n){var r=this._reader,i=this.readName(e),o=O.IDENT,a=["url(","url-prefix(","domain("];return"("===r.peek()?(i+=r.read(),a.indexOf(i.toLowerCase())>-1?(o=O.URI,i=this.readURI(i),a.indexOf(i.toLowerCase())>-1&&(o=O.FUNCTION)):o=O.FUNCTION):":"===r.peek()&&"progid"===i.toLowerCase()&&(i+=r.readTo("("),o=O.IE_FUNCTION),this.createToken(o,i,t,n)},importantToken:function(e,t,n){var r,i,o=this._reader,a=e,s=O.CHAR;for(o.mark(),i=o.read();i;){if("/"===i){if("*"!==o.peek())break;if(""===(r=this.readComment(i)))break}else{if(!k(i)){if(/i/i.test(i)){r=o.readCount(8),/mportant/i.test(r)&&(a+=i+r,s=O.IMPORTANT_SYM);break}break}a+=i+this.readWhitespace()}i=o.read()}return s===O.CHAR?(o.reset(),this.charToken(e,t,n)):this.createToken(s,a,t,n)},notToken:function(e,t,n){var r=this._reader,i=e;return r.mark(),":not("===(i+=r.readCount(4)).toLowerCase()?this.createToken(O.NOT,i,t,n):(r.reset(),this.charToken(e,t,n))},numberToken:function(e,t,n){var r,i=this._reader,o=this.readNumber(e),a=O.NUMBER,s=i.peek();return C(s)?(o+=r=this.readName(i.read()),a=/^em$|^ex$|^px$|^gd$|^rem$|^vw$|^vh$|^vmax$|^vmin$|^ch$|^cm$|^mm$|^in$|^pt$|^pc$/i.test(r)?O.LENGTH:/^deg|^rad$|^grad$/i.test(r)?O.ANGLE:/^ms$|^s$/i.test(r)?O.TIME:/^hz$|^khz$/i.test(r)?O.FREQ:/^dpi$|^dpcm$/i.test(r)?O.RESOLUTION:O.DIMENSION):"%"===s&&(o+=i.read(),a=O.PERCENTAGE),this.createToken(a,o,t,n)},stringToken:function(e,t,n){for(var r=e,i=e,o=this._reader,a=e,s=O.STRING,c=o.read();c&&(i+=c,c!==r||"\\"===a);){if(N(o.peek())&&"\\"!==c){s=O.INVALID;break}a=c,c=o.read()}return null===c&&(s=O.INVALID),this.createToken(s,i,t,n)},unicodeRangeToken:function(e,t,n){var r,i=this._reader,o=e,a=O.CHAR;return"+"===i.peek()&&(i.mark(),o+=i.read(),2===(o+=this.readUnicodeRangePart(!0)).length?i.reset():(a=O.UNICODE_RANGE,-1===o.indexOf("?")&&"-"===i.peek()&&(i.mark(),r=i.read(),1===(r+=this.readUnicodeRangePart(!1)).length?i.reset():o+=r))),this.createToken(a,o,t,n)},whitespaceToken:function(e,t,n){var r=e+this.readWhitespace();return this.createToken(O.S,r,t,n)},readUnicodeRangePart:function(e){for(var t=this._reader,n="",r=t.peek();E(r)&&n.length<6;)t.read(),n+=r,r=t.peek();if(e)for(;"?"===r&&n.length<6;)t.read(),n+=r,r=t.peek();return n},readWhitespace:function(){for(var e=this._reader,t="",n=e.peek();k(n);)e.read(),t+=n,n=e.peek();return t},readNumber:function(e){for(var t=this._reader,n=e,r="."===e,i=t.peek();i;){if(T(i))n+=t.read();else{if("."!==i)break;if(r)break;r=!0,n+=t.read()}i=t.peek()}return n},readString:function(){for(var e=this._reader,t=e.read(),n=t,r=t,i=e.peek();i&&(n+=i=e.read(),i!==t||"\\"===r);){if(N(e.peek())&&"\\"!==i){n="";break}r=i,i=e.peek()}return null===i&&(n=""),n},readURI:function(e){var t=this._reader,n=e,r="",i=t.peek();for(t.mark();i&&k(i);)t.read(),i=t.peek();for(r="'"===i||'"'===i?this.readString():this.readURL(),i=t.peek();i&&k(i);)t.read(),i=t.peek();return""===r||")"!==i?(n=e,t.reset()):n+=r+t.read(),n},readURL:function(){for(var e=this._reader,t="",n=e.peek();/^[!#$%&\\*-~]$/.test(n);)t+=e.read(),n=e.peek();return t},readName:function(e){for(var t=this._reader,n=e||"",r=t.peek();;)if("\\"===r)n+=this.readEscape(t.read()),r=t.peek();else{if(!r||!R(r))break;n+=t.read(),r=t.peek()}return n},readEscape:function(e){var t=this._reader,n=e||"",r=0,i=t.peek();if(E(i))do{n+=t.read(),i=t.peek()}while(i&&E(i)&&++r<6);return 3===n.length&&/\s/.test(i)||7===n.length||1===n.length?t.read():i="",n+i},readComment:function(e){var t=this._reader,n=e||"",r=t.read();if("*"===r){for(;r;){if((n+=r).length>2&&"*"===r&&"/"===t.peek()){n+=t.read();break}r=t.read()}return n}return""}});var O=[{name:"CDO"},{name:"CDC"},{name:"S",whitespace:!0},{name:"COMMENT",comment:!0,hide:!0,channel:"comment"},{name:"INCLUDES",text:"~="},{name:"DASHMATCH",text:"|="},{name:"PREFIXMATCH",text:"^="},{name:"SUFFIXMATCH",text:"$="},{name:"SUBSTRINGMATCH",text:"*="},{name:"STRING"},{name:"IDENT"},{name:"HASH"},{name:"IMPORT_SYM",text:"@import"},{name:"PAGE_SYM",text:"@page"},{name:"MEDIA_SYM",text:"@media"},{name:"FONT_FACE_SYM",text:"@font-face"},{name:"CHARSET_SYM",text:"@charset"},{name:"NAMESPACE_SYM",text:"@namespace"},{name:"VIEWPORT_SYM",text:["@viewport","@-ms-viewport","@-o-viewport"]},{name:"DOCUMENT_SYM",text:["@document","@-moz-document"]},{name:"UNKNOWN_SYM"},{name:"KEYFRAMES_SYM",text:["@keyframes","@-webkit-keyframes","@-moz-keyframes","@-o-keyframes"]},{name:"IMPORTANT_SYM"},{name:"LENGTH"},{name:"ANGLE"},{name:"TIME"},{name:"FREQ"},{name:"DIMENSION"},{name:"PERCENTAGE"},{name:"NUMBER"},{name:"URI"},{name:"FUNCTION"},{name:"UNICODE_RANGE"},{name:"INVALID"},{name:"PLUS",text:"+"},{name:"GREATER",text:">"},{name:"COMMA",text:","},{name:"TILDE",text:"~"},{name:"NOT"},{name:"TOPLEFTCORNER_SYM",text:"@top-left-corner"},{name:"TOPLEFT_SYM",text:"@top-left"},{name:"TOPCENTER_SYM",text:"@top-center"},{name:"TOPRIGHT_SYM",text:"@top-right"},{name:"TOPRIGHTCORNER_SYM",text:"@top-right-corner"},{name:"BOTTOMLEFTCORNER_SYM",text:"@bottom-left-corner"},{name:"BOTTOMLEFT_SYM",text:"@bottom-left"},{name:"BOTTOMCENTER_SYM",text:"@bottom-center"},{name:"BOTTOMRIGHT_SYM",text:"@bottom-right"},{name:"BOTTOMRIGHTCORNER_SYM",text:"@bottom-right-corner"},{name:"LEFTTOP_SYM",text:"@left-top"},{name:"LEFTMIDDLE_SYM",text:"@left-middle"},{name:"LEFTBOTTOM_SYM",text:"@left-bottom"},{name:"RIGHTTOP_SYM",text:"@right-top"},{name:"RIGHTMIDDLE_SYM",text:"@right-middle"},{name:"RIGHTBOTTOM_SYM",text:"@right-bottom"},{name:"RESOLUTION",state:"media"},{name:"IE_FUNCTION"},{name:"CHAR"},{name:"PIPE",text:"|"},{name:"SLASH",text:"/"},{name:"MINUS",text:"-"},{name:"STAR",text:"*"},{name:"LBRACE",endChar:"}",text:"{"},{name:"RBRACE",text:"}"},{name:"LBRACKET",endChar:"]",text:"["},{name:"RBRACKET",text:"]"},{name:"EQUALS",text:"="},{name:"COLON",text:":"},{name:"SEMICOLON",text:";"},{name:"LPAREN",endChar:")",text:"("},{name:"RPAREN",text:")"},{name:"DOT",text:"."}];!function(){var e=[],t=Object.create(null);O.UNKNOWN=-1,O.unshift({name:"EOF"});for(var n=0,r=O.length;n<r;n++)if(e.push(O[n].name),O[O[n].name]=n,O[n].text)if(O[n].text instanceof Array)for(var i=0;i<O[n].text.length;i++)t[O[n].text[i]]=n;else t[O[n].text]=n;O.name=function(t){return e[t]},O.type=function(e){return t[e]||-1}}();var D={validate:function(e,t){var n=e.toString().toLowerCase(),r=new d(t),i=u[n];if(i)"number"!=typeof i&&("string"==typeof i?i.indexOf("||")>-1?this.groupProperty(i,r):this.singleProperty(i,r,1):i.multi?this.multiProperty(i.multi,r,i.comma,i.max||1/0):"function"==typeof i&&i(r));else if(0!==n.indexOf("-"))throw new A("Unknown property '"+e+"'.",e.line,e.col)},singleProperty:function(e,t,n,r){for(var i,o=!1,a=t.value,s=0;t.hasNext()&&s<n&&(o=M.isAny(t,e));)s++;if(!o)throw t.hasNext()&&!t.isFirst()?new A("Expected end of value but found '"+(i=t.peek())+"'.",i.line,i.col):new A("Expected ("+e+") but found '"+a+"'.",a.line,a.col);if(t.hasNext())throw new A("Expected end of value but found '"+(i=t.next())+"'.",i.line,i.col)},multiProperty:function(e,t,n,r){for(var i,o=!1,a=t.value,s=0;t.hasNext()&&!o&&s<r&&M.isAny(t,e);)if(s++,t.hasNext()){if(n){if(","!==String(t.peek()))break;i=t.next()}}else o=!0;if(!o)throw t.hasNext()&&!t.isFirst()?new A("Expected end of value but found '"+(i=t.peek())+"'.",i.line,i.col):(i=t.previous(),n&&","===String(i)?new A("Expected end of value but found '"+i+"'.",i.line,i.col):new A("Expected ("+e+") but found '"+a+"'.",a.line,a.col));if(t.hasNext())throw new A("Expected end of value but found '"+(i=t.next())+"'.",i.line,i.col)},groupProperty:function(e,t,n){for(var r,i,o=!1,a=t.value,s=e.split("||").length,c={count:0},l=!1;t.hasNext()&&!o&&(r=M.isAnyOfGroup(t,e))&&!c[r];)c[r]=1,c.count++,l=!0,c.count!==s&&t.hasNext()||(o=!0);if(!o)throw l&&t.hasNext()?new A("Expected end of value but found '"+(i=t.peek())+"'.",i.line,i.col):new A("Expected ("+e+") but found '"+a+"'.",a.line,a.col);if(t.hasNext())throw new A("Expected end of value but found '"+(i=t.next())+"'.",i.line,i.col)}};function A(e,t,n){this.col=n,this.line=t,this.message=e}A.prototype=new Error;var M={isLiteral:function(e,t){var n,r,i=e.text.toString().toLowerCase(),o=t.split(" | "),a=!1;for(n=0,r=o.length;n<r&&!a;n++)i===o[n].toLowerCase()&&(a=!0);return a},isSimple:function(e){return!!this.simple[e]},isComplex:function(e){return!!this.complex[e]},isAny:function(e,t){var n,r,i=t.split(" | "),o=!1;for(n=0,r=i.length;n<r&&!o&&e.hasNext();n++)o=this.isType(e,i[n]);return o},isAnyOfGroup:function(e,t){var n,r,i=t.split(" || "),o=!1;for(n=0,r=i.length;n<r&&!o;n++)o=this.isType(e,i[n]);return!!o&&i[n-1]},isType:function(e,t){var n=e.peek(),r=!1;return"<"!==t.charAt(0)?(r=this.isLiteral(n,t))&&e.next():this.simple[t]?(r=this.simple[t](n))&&e.next():r=this.complex[t](e),r},simple:{__proto__:null,"<absolute-size>":function(e){return M.isLiteral(e,"xx-small | x-small | small | medium | large | x-large | xx-large")},"<attachment>":function(e){return M.isLiteral(e,"scroll | fixed | local")},"<attr>":function(e){return"function"===e.type&&"attr"===e.name},"<bg-image>":function(e){return this["<image>"](e)||this["<gradient>"](e)||"none"===String(e)},"<gradient>":function(e){return"function"===e.type&&/^(?:\-(?:ms|moz|o|webkit)\-)?(?:repeating\-)?(?:radial\-|linear\-)?gradient/i.test(e)},"<box>":function(e){return M.isLiteral(e,"padding-box | border-box | content-box")},"<content>":function(e){return"function"===e.type&&"content"===e.name},"<relative-size>":function(e){return M.isLiteral(e,"smaller | larger")},"<ident>":function(e){return"identifier"===e.type},"<length>":function(e){return!("function"!==e.type||!/^(?:\-(?:ms|moz|o|webkit)\-)?calc/i.test(e))||("length"===e.type||"number"===e.type||"integer"===e.type||"0"===String(e))},"<color>":function(e){return"color"===e.type||"transparent"===String(e)||"currentColor"===String(e)},"<number>":function(e){return"number"===e.type||this["<integer>"](e)},"<integer>":function(e){return"integer"===e.type},"<line>":function(e){return"integer"===e.type},"<angle>":function(e){return"angle"===e.type},"<uri>":function(e){return"uri"===e.type},"<image>":function(e){return this["<uri>"](e)},"<percentage>":function(e){return"percentage"===e.type||"0"===String(e)},"<border-width>":function(e){return this["<length>"](e)||M.isLiteral(e,"thin | medium | thick")},"<border-style>":function(e){return M.isLiteral(e,"none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset")},"<content-sizing>":function(e){return M.isLiteral(e,"fill-available | -moz-available | -webkit-fill-available | max-content | -moz-max-content | -webkit-max-content | min-content | -moz-min-content | -webkit-min-content | fit-content | -moz-fit-content | -webkit-fit-content")},"<margin-width>":function(e){return this["<length>"](e)||this["<percentage>"](e)||M.isLiteral(e,"auto")},"<padding-width>":function(e){return this["<length>"](e)||this["<percentage>"](e)},"<shape>":function(e){return"function"===e.type&&("rect"===e.name||"inset-rect"===e.name)},"<time>":function(e){return"time"===e.type},"<flex-grow>":function(e){return this["<number>"](e)},"<flex-shrink>":function(e){return this["<number>"](e)},"<width>":function(e){return this["<margin-width>"](e)},"<flex-basis>":function(e){return this["<width>"](e)},"<flex-direction>":function(e){return M.isLiteral(e,"row | row-reverse | column | column-reverse")},"<flex-wrap>":function(e){return M.isLiteral(e,"nowrap | wrap | wrap-reverse")},"<feature-tag-value>":function(e){return"function"===e.type&&/^[A-Z0-9]{4}$/i.test(e)}},complex:{__proto__:null,"<bg-position>":function(e){for(var t=!1,n="<percentage> | <length>",r="left | right",i="top | bottom",o=0;e.peek(o)&&","!==e.peek(o).text;)o++;return o<3?M.isAny(e,r+" | center | "+n)?(t=!0,M.isAny(e,i+" | center | "+n)):M.isAny(e,i)&&(t=!0,M.isAny(e,r+" | center")):M.isAny(e,r)?M.isAny(e,i)?(t=!0,M.isAny(e,n)):M.isAny(e,n)&&(M.isAny(e,i)?(t=!0,M.isAny(e,n)):M.isAny(e,"center")&&(t=!0)):M.isAny(e,i)?M.isAny(e,r)?(t=!0,M.isAny(e,n)):M.isAny(e,n)&&(M.isAny(e,r)?(t=!0,M.isAny(e,n)):M.isAny(e,"center")&&(t=!0)):M.isAny(e,"center")&&M.isAny(e,r+" | "+i)&&(t=!0,M.isAny(e,n)),t},"<bg-size>":function(e){var t=!1,n="<percentage> | <length> | auto";return M.isAny(e,"cover | contain")?t=!0:M.isAny(e,n)&&(t=!0,M.isAny(e,n)),t},"<repeat-style>":function(e){var t,n=!1,r="repeat | space | round | no-repeat";return e.hasNext()&&(t=e.next(),M.isLiteral(t,"repeat-x | repeat-y")?n=!0:M.isLiteral(t,r)&&(n=!0,e.hasNext()&&M.isLiteral(e.peek(),r)&&e.next())),n},"<shadow>":function(e){var t=!1,n=0,r=!1,i=!1;if(e.hasNext()){for(M.isAny(e,"inset")&&(r=!0),M.isAny(e,"<color>")&&(i=!0);M.isAny(e,"<length>")&&n<4;)n++;e.hasNext()&&(i||M.isAny(e,"<color>"),r||M.isAny(e,"inset")),t=n>=2&&n<=4}return t},"<x-one-radius>":function(e){var t=!1,n="<length> | <percentage> | inherit";return M.isAny(e,n)&&(t=!0,M.isAny(e,n)),t},"<flex>":function(e){var t,n=!1;if(M.isAny(e,"none | inherit")?n=!0:M.isType(e,"<flex-grow>")?e.peek()?M.isType(e,"<flex-shrink>")?n=!e.peek()||M.isType(e,"<flex-basis>"):M.isType(e,"<flex-basis>")&&(n=null===e.peek()):n=!0:M.isType(e,"<flex-basis>")&&(n=!0),!n)throw t=e.peek(),new A("Expected (none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]) but found '"+e.value.text+"'.",t.line,t.col);return n}}};r.css={__proto__:null,Colors:o,Combinator:a,Parser:l,PropertyName:p,PropertyValue:h,PropertyValuePart:f,MediaFeature:s,MediaQuery:c,Selector:m,SelectorPart:y,SelectorSubPart:b,Specificity:v,TokenStream:x,Tokens:O,ValidationError:A}}(),function(){for(var e in r)t[e]=r[e]}()},function(e,t,n){"use strict";e.exports=i;var r=n(9);function i(e,t){r.call(this,e,t)}i.prototype=Object.create(r.prototype,{constructor:{value:i}})},function(e,t,n){"use strict";e.exports=s;var r=n(11),i=n(34);function o(e,t,n){return n?i.next(e,t):e===t?null:i.previous(e,null)}function a(e,t){var n,i;for(n=e.referenceNode,i=e.pointerBeforeReferenceNode;;){if(i===t)i=!i;else if(null===(n=o(n,e.root,t)))return null;if(e.filter.acceptNode(n)===r.FILTER_ACCEPT)break}return e.referenceNode=n,e.pointerBeforeReferenceNode=i,n}function s(e,t,n){var i=this,o=!1;if(!e||!e.nodeType)throw new Error("DOMException: NOT_SUPPORTED_ERR");i.root=i.referenceNode=e,i.pointerBeforeReferenceNode=!0,i.whatToShow=Number(t)||0,"function"!=typeof n&&(n=null),i.filter=Object.create(r.prototype),i.filter.acceptNode=function(e){var t;if(o)throw new Error("DOMException: INVALID_STATE_ERR");return 1<<e.nodeType-1&i.whatToShow?null===n?r.FILTER_ACCEPT:(o=!0,t=n(e),o=!1,t):r.FILTER_SKIP}}s.prototype={constructor:s,nextNode:function(){return a(this,!0)},previousNode:function(){return a(this,!1)},detach:function(){}}},function(e,t,n){"use strict";e.exports=l;var r=n(11),i=n(34),o={first:"firstChild",last:"lastChild",next:"firstChild",previous:"lastChild"},a={first:"nextSibling",last:"previousSibling",next:"nextSibling",previous:"previousSibling"};function s(e,t){var n,i,s,c,l;for(i=e.currentNode[o[t]];null!==i;){if((c=e.filter.acceptNode(i))===r.FILTER_ACCEPT)return e.currentNode=i,i;if(c!==r.FILTER_SKIP||null===(n=i[o[t]]))for(;null!==i;){if(null!==(l=i[a[t]])){i=l;break}if(null===(s=i.parentNode)||s===e.root||s===e.currentNode)return null;i=s}else i=n}return null}function c(e,t){var n,i,s;if((n=e.currentNode)===e.root)return null;for(;;){for(s=n[a[t]];null!==s;){if(n=s,(i=e.filter.acceptNode(n))===r.FILTER_ACCEPT)return e.currentNode=n,n;s=n[o[t]],i!==r.FILTER_REJECT&&null!==s||(s=n[a[t]])}if(null===(n=n.parentNode)||n===e.root)return null;if(e.filter.acceptNode(n)===r.FILTER_ACCEPT)return null}}function l(e,t,n){var i=this,o=!1;if(!e||!e.nodeType)throw new Error("DOMException: NOT_SUPPORTED_ERR");i.root=e,i.whatToShow=Number(t)||0,i.currentNode=e,"function"!=typeof n&&(n=null),i.filter=Object.create(r.prototype),i.filter.acceptNode=function(e){var t;if(o)throw new Error("DOMException: INVALID_STATE_ERR");return 1<<e.nodeType-1&i.whatToShow?null===n?r.FILTER_ACCEPT:(o=!0,t=n(e),o=!1,t):r.FILTER_SKIP}}l.prototype={constructor:l,parentNode:function(){for(var e=this.currentNode;null!==e&&e!==this.root;)if(null!==(e=e.parentNode)&&this.filter.acceptNode(e)===r.FILTER_ACCEPT)return this.currentNode=e,e;return null},firstChild:function(){return s(this,"first")},lastChild:function(){return s(this,"last")},previousSibling:function(){return c(this,"previous")},nextSibling:function(){return c(this,"next")},previousNode:function(){var e,t,n;for(e=this.currentNode;e!==this.root;){for(n=e.previousSibling;null!==n;){for(e=n,t=this.filter.acceptNode(e);t!==r.FILTER_REJECT&&null!==e.lastChild;)e=e.lastChild,t=this.filter.acceptNode(e);if(t===r.FILTER_ACCEPT)return this.currentNode=e,e;n=e.previousSibling}if(e===this.root||null===e.parentNode)return null;if(e=e.parentNode,this.filter.acceptNode(e)===r.FILTER_ACCEPT)return this.currentNode=e,e}return null},nextNode:function(){var e,t,n;for(e=this.currentNode,t=r.FILTER_ACCEPT;;){for(;t!==r.FILTER_REJECT&&null!==e.firstChild;)if(e=e.firstChild,(t=this.filter.acceptNode(e))===r.FILTER_ACCEPT)return this.currentNode=e,e;if(null===(n=i.nextSkippingChildren(e,this.root)))return null;if(e=n,(t=this.filter.acceptNode(e))===r.FILTER_ACCEPT)return this.currentNode=e,e}}}},function(e,t,n){"use strict";e.exports=i;var r=n(3);function i(e,t){this.root=e,this.filter=t,this.lastModTime=e.lastModTime,this.done=!1,this.cache=[],this.traverse()}i.prototype={get length(){return this.checkcache(),this.done||this.traverse(),this.cache.length},item:function(e){return this.checkcache(),!this.done&&e>=this.cache.length&&this.traverse(e),this.cache[e]},checkcache:function(){if(this.lastModTime!==this.root.lastModTime){for(var e=this.cache.length-1;e>=0;e--)this[e]=void 0;this.cache.length=0,this.done=!1,this.lastModTime=this.root.lastModTime}},traverse:function(e){var t;for(void 0!==e&&e++;null!==(t=this.next());)if(this[this.cache.length]=t,this.cache.push(t),e&&this.cache.length===e)return;this.done=!0},next:function(){var e,t=0===this.cache.length?this.root:this.cache[this.cache.length-1];for(e=t.nodeType===r.DOCUMENT_NODE?t.documentElement:t.nextElement(this.root);e;){if(this.filter(e))return e;e=e.nextElement(this.root)}return null}}},function(e,t,n){"use strict";var r=n(14),i=n(15),o=n(17);t.createDOMImplementation=function(){return new r},t.createDocument=function(e,t){if(e||t){var n=new i;return n.parse(e||"",!0),n.document()}return(new r).createHTMLDocument("")},t.createWindow=function(e,n){var r=t.createDocument(e);return void 0!==n&&(r._address=n),new o(r)},t.impl=n(29)},function(e,t,n){"use strict";var r=n(4);t.toPromise=r.Observable.prototype.toPromise},function(e,t,n){e.exports=n(1)(20)},function(e,t,n){
/**
 * @license Angular v5.2.9
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
!function(e,t,n,r,i){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function a(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}
/**
 * @license Angular v5.2.9
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */var s=function(e){function i(n,r){var i=e.call(this)||this;i._nextAnimationId=0;var o={id:"0",encapsulation:t.ViewEncapsulation.None,styles:[],data:{animation:[]}};return i._renderer=n.createRenderer(r.body,o),i}return a(i,e),i.prototype.build=function(e){var t=this._nextAnimationId.toString();this._nextAnimationId++;var n=Array.isArray(e)?r.sequence(e):e;return u(this._renderer,null,t,"register",[n]),new c(t,this._renderer)},i.decorators=[{type:t.Injectable}],i.ctorParameters=function(){return[{type:t.RendererFactory2},{type:void 0,decorators:[{type:t.Inject,args:[n.DOCUMENT]}]}]},i}(r.AnimationBuilder),c=function(e){function t(t,n){var r=e.call(this)||this;return r._id=t,r._renderer=n,r}return a(t,e),t.prototype.create=function(e,t){return new l(this._id,e,t||{},this._renderer)},t}(r.AnimationFactory),l=function(){function e(e,t,n,r){this.id=e,this.element=t,this._renderer=r,this.parentPlayer=null,this._started=!1,this.totalTime=0,this._command("create",n)}return e.prototype._listen=function(e,t){return this._renderer.listen(this.element,"@@"+this.id+":"+e,t)},e.prototype._command=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return u(this._renderer,this.element,this.id,e,t)},e.prototype.onDone=function(e){this._listen("done",e)},e.prototype.onStart=function(e){this._listen("start",e)},e.prototype.onDestroy=function(e){this._listen("destroy",e)},e.prototype.init=function(){this._command("init")},e.prototype.hasStarted=function(){return this._started},e.prototype.play=function(){this._command("play"),this._started=!0},e.prototype.pause=function(){this._command("pause")},e.prototype.restart=function(){this._command("restart")},e.prototype.finish=function(){this._command("finish")},e.prototype.destroy=function(){this._command("destroy")},e.prototype.reset=function(){this._command("reset")},e.prototype.setPosition=function(e){this._command("setPosition",e)},e.prototype.getPosition=function(){return 0},e}();function u(e,t,n,r,i){return e.setProperty(t,"@@"+n+":"+r,i)}var p=function(){function e(e,t,n){this.delegate=e,this.engine=t,this._zone=n,this._currentId=0,this._microtaskId=1,this._animationCallbacksBuffer=[],this._rendererCache=new Map,this._cdRecurDepth=0,this.promise=Promise.resolve(0),t.onRemovalComplete=function(e,t){t&&t.parentNode(e)&&t.removeChild(e.parentNode,e)}}return e.prototype.createRenderer=function(e,t){var n=this,r=this.delegate.createRenderer(e,t);if(!(e&&t&&t.data&&t.data.animation)){var i=this._rendererCache.get(r);return i||(i=new h("",r,this.engine),this._rendererCache.set(r,i)),i}var o=t.id,a=t.id+"-"+this._currentId;this._currentId++,this.engine.register(a,e);var s=t.data.animation;return s.forEach(function(t){return n.engine.registerTrigger(o,a,e,t.name,t)}),new d(this,a,r,this.engine)},e.prototype.begin=function(){this._cdRecurDepth++,this.delegate.begin&&this.delegate.begin()},e.prototype._scheduleCountTask=function(){var e=this;this.promise.then(function(){e._microtaskId++})},e.prototype.scheduleListenerCallback=function(e,t,n){var r=this;e>=0&&e<this._microtaskId?this._zone.run(function(){return t(n)}):(0==this._animationCallbacksBuffer.length&&Promise.resolve(null).then(function(){r._zone.run(function(){r._animationCallbacksBuffer.forEach(function(e){var t=e[0],n=e[1];t(n)}),r._animationCallbacksBuffer=[]})}),this._animationCallbacksBuffer.push([t,n]))},e.prototype.end=function(){var e=this;this._cdRecurDepth--,0==this._cdRecurDepth&&this._zone.runOutsideAngular(function(){e._scheduleCountTask(),e.engine.flush(e._microtaskId)}),this.delegate.end&&this.delegate.end()},e.prototype.whenRenderingDone=function(){return this.engine.whenRenderingDone()},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:t.RendererFactory2},{type:i.ɵAnimationEngine},{type:t.NgZone}]},e}(),h=function(){function e(e,t,n){this.namespaceId=e,this.delegate=t,this.engine=n,this.destroyNode=this.delegate.destroyNode?function(e){return t.destroyNode(e)}:null}return Object.defineProperty(e.prototype,"data",{get:function(){return this.delegate.data},enumerable:!0,configurable:!0}),e.prototype.destroy=function(){this.engine.destroy(this.namespaceId,this.delegate),this.delegate.destroy()},e.prototype.createElement=function(e,t){return this.delegate.createElement(e,t)},e.prototype.createComment=function(e){return this.delegate.createComment(e)},e.prototype.createText=function(e){return this.delegate.createText(e)},e.prototype.appendChild=function(e,t){this.delegate.appendChild(e,t),this.engine.onInsert(this.namespaceId,t,e,!1)},e.prototype.insertBefore=function(e,t,n){this.delegate.insertBefore(e,t,n),this.engine.onInsert(this.namespaceId,t,e,!0)},e.prototype.removeChild=function(e,t){this.engine.onRemove(this.namespaceId,t,this.delegate)},e.prototype.selectRootElement=function(e){return this.delegate.selectRootElement(e)},e.prototype.parentNode=function(e){return this.delegate.parentNode(e)},e.prototype.nextSibling=function(e){return this.delegate.nextSibling(e)},e.prototype.setAttribute=function(e,t,n,r){this.delegate.setAttribute(e,t,n,r)},e.prototype.removeAttribute=function(e,t,n){this.delegate.removeAttribute(e,t,n)},e.prototype.addClass=function(e,t){this.delegate.addClass(e,t)},e.prototype.removeClass=function(e,t){this.delegate.removeClass(e,t)},e.prototype.setStyle=function(e,t,n,r){this.delegate.setStyle(e,t,n,r)},e.prototype.removeStyle=function(e,t,n){this.delegate.removeStyle(e,t,n)},e.prototype.setProperty=function(e,t,n){"@"==t.charAt(0)&&"@.disabled"==t?this.disableAnimations(e,!!n):this.delegate.setProperty(e,t,n)},e.prototype.setValue=function(e,t){this.delegate.setValue(e,t)},e.prototype.listen=function(e,t,n){return this.delegate.listen(e,t,n)},e.prototype.disableAnimations=function(e,t){this.engine.disableAnimations(e,t)},e}(),d=function(e){function t(t,n,r,i){var o=e.call(this,n,r,i)||this;return o.factory=t,o.namespaceId=n,o}return a(t,e),t.prototype.setProperty=function(e,t,n){"@"==t.charAt(0)?"."==t.charAt(1)&&"@.disabled"==t?(n=void 0===n||!!n,this.disableAnimations(e,n)):this.engine.process(this.namespaceId,e,t.substr(1),n):this.delegate.setProperty(e,t,n)},t.prototype.listen=function(e,t,n){var r,i=this;if("@"==t.charAt(0)){var o=function(e){switch(e){case"body":return document.body;case"document":return document;case"window":return window;default:return e}}(e),a=t.substr(1),s="";return"@"!=a.charAt(0)&&(r=function(e){var t=e.indexOf("."),n=e.substring(0,t),r=e.substr(t+1);return[n,r]}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */(a),a=r[0],s=r[1]),this.engine.listen(this.namespaceId,o,a,s,function(e){var t=e._data||-1;i.factory.scheduleListenerCallback(t,n,e)})}return this.delegate.listen(e,t,n)},t}(h),f=function(e){function n(t,n){return e.call(this,t,n)||this}return a(n,e),n.decorators=[{type:t.Injectable}],n.ctorParameters=function(){return[{type:i.AnimationDriver},{type:i.ɵAnimationStyleNormalizer}]},n}(i.ɵAnimationEngine);function g(){return i.ɵsupportsWebAnimations()?new i.ɵWebAnimationsDriver:new i.ɵNoopAnimationDriver}function m(){return new i.ɵWebAnimationsStyleNormalizer}function y(e,t,n){return new p(e,t,n)}var b=[{provide:r.AnimationBuilder,useClass:s},{provide:i.ɵAnimationStyleNormalizer,useFactory:m},{provide:i.ɵAnimationEngine,useClass:f},{provide:t.RendererFactory2,useFactory:y,deps:[n.ɵDomRendererFactory2,i.ɵAnimationEngine,t.NgZone]}],v=[{provide:i.AnimationDriver,useFactory:g}].concat(b),_=[{provide:i.AnimationDriver,useClass:i.ɵNoopAnimationDriver}].concat(b),w=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{exports:[n.BrowserModule],providers:v}]}],e.ctorParameters=function(){return[]},e}(),E=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{exports:[n.BrowserModule],providers:_}]}],e.ctorParameters=function(){return[]},e}();e.BrowserAnimationsModule=w,e.NoopAnimationsModule=E,e.ɵBrowserAnimationBuilder=s,e.ɵBrowserAnimationFactory=c,e.ɵAnimationRenderer=d,e.ɵAnimationRendererFactory=p,e.ɵa=h,e.ɵf=v,e.ɵg=_,e.ɵb=f,e.ɵd=m,e.ɵe=y,e.ɵc=g,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(0),n(53),n(51),n(52))},function(e,t,n){e.exports=n(1)(39)},function(e,t,n){e.exports=n(1)(38)},function(e,t,n){var r,i,o,a,s,c,l,u,p,h,d,f,g,m,y,b,v,_,w,E;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */!function(n){var T="object"==typeof global?global:"object"==typeof self?self:"object"==typeof this?this:{};function k(e,t){return e!==T&&("function"==typeof Object.create?Object.defineProperty(e,"__esModule",{value:!0}):e.__esModule=!0),function(n,r){return e[n]=t?t(n,r):r}}void 0===(r=function(e){var t,n;t=k(T,k(e)),n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},i=function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},a=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var i=0,r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&(n[r[i]]=e[r[i]]);return n},s=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},c=function(e,t){return function(n,r){t(n,r,e)}},l=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},u=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})},p=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=r[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},h=function(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])},d=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}},f=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},g=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(f(arguments[t]));return e},m=function(e){return this instanceof m?(this.v=e,this):new m(e)},y=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise(function(n,r){o.push([e,t,n,r])>1||s(e,t)})})}function s(e,t){try{(n=i[e](t)).value instanceof m?Promise.resolve(n.value.v).then(c,l):u(o[0][2],n)}catch(e){u(o[0][3],e)}var n}function c(e){s("next",e)}function l(e){s("throw",e)}function u(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}},b=function(e){var t,n;return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){e[r]&&(t[r]=function(t){return(n=!n)?{value:m(e[r](t)),done:"return"===r}:i?i(t):t})}},v=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator];return t?t.call(e):"function"==typeof d?d(e):e[Symbol.iterator]()},_=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},w=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},E=function(e){return e&&e.__esModule?e:{default:e}},t("__extends",i),t("__assign",o),t("__rest",a),t("__decorate",s),t("__param",c),t("__metadata",l),t("__awaiter",u),t("__generator",p),t("__exportStar",h),t("__values",d),t("__read",f),t("__spread",g),t("__await",m),t("__asyncGenerator",y),t("__asyncDelegator",b),t("__asyncValues",v),t("__makeTemplateObject",_),t("__importStar",w),t("__importDefault",E)}.apply(t,[t]))||(e.exports=r)}()},function(e,t,n){e.exports=n(1)(80)},function(e,t,n){e.exports=n(1)(77)},function(e,t,n){"use strict";var r=n(4),i=n(54);r.Observable.prototype.first=i.first},function(e,t,n){e.exports=n(1)(47)},function(e,t){
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var n;!function(e){!function(t){var n="object"==typeof global?global:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),r=i(e);function i(e,t){return function(n,r){"function"!=typeof e[n]&&Object.defineProperty(e,n,{configurable:!0,writable:!0,value:r}),t&&t(n,r)}}void 0===n.Reflect?n.Reflect=e:r=i(n.Reflect,r),function(e){var t=Object.prototype.hasOwnProperty,n="function"==typeof Symbol,r=n&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=n&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",o="function"==typeof Object.create,a={__proto__:[]}instanceof Array,s=!o&&!a,c={create:o?function(){return A(Object.create(null))}:a?function(){return A({__proto__:null})}:function(){return A({})},has:s?function(e,n){return t.call(e,n)}:function(e,t){return t in e},get:s?function(e,n){return t.call(e,n)?e[n]:void 0}:function(e,t){return e[t]}},l=Object.getPrototypeOf(Function),u="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,p=u||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var e={},t=[],n=function(){function e(e,t,n){this._index=0,this._keys=e,this._values=t,this._selector=n}return e.prototype["@@iterator"]=function(){return this},e.prototype[i]=function(){return this},e.prototype.next=function(){var e=this._index;if(e>=0&&e<this._keys.length){var n=this._selector(this._keys[e],this._values[e]);return e+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:n,done:!1}}return{value:void 0,done:!0}},e.prototype.throw=function(e){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),e},e.prototype.return=function(e){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:e,done:!0}},e}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=e,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(e){return this._find(e,!1)>=0},t.prototype.get=function(e){var t=this._find(e,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(e,t){var n=this._find(e,!0);return this._values[n]=t,this},t.prototype.delete=function(t){var n=this._find(t,!1);if(n>=0){for(var r=this._keys.length,i=n+1;i<r;i++)this._keys[i-1]=this._keys[i],this._values[i-1]=this._values[i];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=e,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=e,this._cacheIndex=-2},t.prototype.keys=function(){return new n(this._keys,this._values,r)},t.prototype.values=function(){return new n(this._keys,this._values,o)},t.prototype.entries=function(){return new n(this._keys,this._values,a)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[i]=function(){return this.entries()},t.prototype._find=function(e,t){return this._cacheKey!==e&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=e)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(e),this._values.push(void 0)),this._cacheIndex},t}();function r(e,t){return e}function o(e,t){return t}function a(e,t){return[e,t]}}():Map,h=u||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function e(){this._map=new p}return Object.defineProperty(e.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.add=function(e){return this._map.set(e,e),this},e.prototype.delete=function(e){return this._map.delete(e)},e.prototype.clear=function(){this._map.clear()},e.prototype.keys=function(){return this._map.keys()},e.prototype.values=function(){return this._map.values()},e.prototype.entries=function(){return this._map.entries()},e.prototype["@@iterator"]=function(){return this.keys()},e.prototype[i]=function(){return this.keys()},e}():Set,d=new(u||"function"!=typeof WeakMap?function(){var e=16,n=c.create(),r=i();return function(){function e(){this._key=i()}return e.prototype.has=function(e){var t=o(e,!1);return void 0!==t&&c.has(t,this._key)},e.prototype.get=function(e){var t=o(e,!1);return void 0!==t?c.get(t,this._key):void 0},e.prototype.set=function(e,t){var n=o(e,!0);return n[this._key]=t,this},e.prototype.delete=function(e){var t=o(e,!1);return void 0!==t&&delete t[this._key]},e.prototype.clear=function(){this._key=i()},e}();function i(){var e;do{e="@@WeakMap@@"+s()}while(c.has(n,e));return n[e]=!0,e}function o(e,n){if(!t.call(e,r)){if(!n)return;Object.defineProperty(e,r,{value:c.create()})}return e[r]}function a(e,t){for(var n=0;n<t;++n)e[n]=255*Math.random()|0;return e}function s(){var t=function(e){if("function"==typeof Uint8Array)return"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(e)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(e)):a(new Uint8Array(e),e);return a(new Array(e),e)}(e);t[6]=79&t[6]|64,t[8]=191&t[8]|128;for(var n="",r=0;r<e;++r){var i=t[r];4!==r&&6!==r&&8!==r||(n+="-"),i<16&&(n+="0"),n+=i.toString(16).toLowerCase()}return n}}():WeakMap);function f(e,t,n){var r=d.get(e);if(_(r)){if(!n)return;r=new p,d.set(e,r)}var i=r.get(t);if(_(i)){if(!n)return;i=new p,r.set(t,i)}return i}function g(e,t,n){var r=f(t,n,!1);return!_(r)&&!!r.has(e)}function m(e,t,n){var r=f(t,n,!1);if(!_(r))return r.get(e)}function y(e,t,n,r){var i=f(n,r,!0);i.set(e,t)}function b(e,t){var n=[],r=f(e,t,!1);if(_(r))return n;for(var o=r.keys(),a=function(e){var t=C(e,i);if(!S(t))throw new TypeError;var n=t.call(e);if(!E(n))throw new TypeError;return n}(o),s=0;;){var c=x(a);if(!c)return n.length=s,n;var l=c.value;try{n[s]=l}catch(e){try{O(a)}finally{throw e}}s++}}function v(e){if(null===e)return 1;switch(typeof e){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===e?1:6;default:return 6}}function _(e){return void 0===e}function w(e){return null===e}function E(e){return"object"==typeof e?null!==e:"function"==typeof e}function T(e,t){switch(v(e)){case 0:case 1:case 2:case 3:case 4:case 5:return e}var n=3===t?"string":5===t?"number":"default",i=C(e,r);if(void 0!==i){var o=i.call(e,n);if(E(o))throw new TypeError;return o}return function(e,t){if("string"===t){var n=e.toString;if(S(n)){var r=n.call(e);if(!E(r))return r}var i=e.valueOf;if(S(i)){var r=i.call(e);if(!E(r))return r}}else{var i=e.valueOf;if(S(i)){var r=i.call(e);if(!E(r))return r}var o=e.toString;if(S(o)){var r=o.call(e);if(!E(r))return r}}throw new TypeError}(e,"default"===n?"number":n)}function k(e){var t=T(e,3);return"symbol"==typeof t?t:function(e){return""+e}(t)}function N(e){return Array.isArray?Array.isArray(e):e instanceof Object?e instanceof Array:"[object Array]"===Object.prototype.toString.call(e)}function S(e){return"function"==typeof e}function R(e){return"function"==typeof e}function C(e,t){var n=e[t];if(void 0!==n&&null!==n){if(!S(n))throw new TypeError;return n}}function x(e){var t=e.next();return!t.done&&t}function O(e){var t=e.return;t&&t.call(e)}function D(e){var t=Object.getPrototypeOf(e);if("function"!=typeof e||e===l)return t;if(t!==l)return t;var n=e.prototype,r=n&&Object.getPrototypeOf(n);if(null==r||r===Object.prototype)return t;var i=r.constructor;return"function"!=typeof i?t:i===e?t:i}function A(e){return e.__=void 0,delete e.__,e}e("decorate",function(e,t,n,r){if(_(n)){if(!N(e))throw new TypeError;if(!R(t))throw new TypeError;return function(e,t){for(var n=e.length-1;n>=0;--n){var r=e[n],i=r(t);if(!_(i)&&!w(i)){if(!R(i))throw new TypeError;t=i}}return t}(e,t)}if(!N(e))throw new TypeError;if(!E(t))throw new TypeError;if(!E(r)&&!_(r)&&!w(r))throw new TypeError;return w(r)&&(r=void 0),n=k(n),function(e,t,n,r){for(var i=e.length-1;i>=0;--i){var o=e[i],a=o(t,n,r);if(!_(a)&&!w(a)){if(!E(a))throw new TypeError;r=a}}return r}(e,t,n,r)}),e("metadata",function(e,t){return function(n,r){if(!E(n))throw new TypeError;if(!_(r)&&!function(e){switch(v(e)){case 3:case 4:return!0;default:return!1}}(r))throw new TypeError;y(e,t,n,r)}}),e("defineMetadata",function(e,t,n,r){if(!E(n))throw new TypeError;_(r)||(r=k(r));return y(e,t,n,r)}),e("hasMetadata",function(e,t,n){if(!E(t))throw new TypeError;_(n)||(n=k(n));return function e(t,n,r){var i=g(t,n,r);if(i)return!0;var o=D(n);if(!w(o))return e(t,o,r);return!1}(e,t,n)}),e("hasOwnMetadata",function(e,t,n){if(!E(t))throw new TypeError;_(n)||(n=k(n));return g(e,t,n)}),e("getMetadata",function(e,t,n){if(!E(t))throw new TypeError;_(n)||(n=k(n));return function e(t,n,r){var i=g(t,n,r);if(i)return m(t,n,r);var o=D(n);if(!w(o))return e(t,o,r);return}(e,t,n)}),e("getOwnMetadata",function(e,t,n){if(!E(t))throw new TypeError;_(n)||(n=k(n));return m(e,t,n)}),e("getMetadataKeys",function(e,t){if(!E(e))throw new TypeError;_(t)||(t=k(t));return function e(t,n){var r=b(t,n);var i=D(t);if(null===i)return r;var o=e(i,n);if(o.length<=0)return r;if(r.length<=0)return o;var a=new h;var s=[];for(var c=0,l=r;c<l.length;c++){var u=l[c],p=a.has(u);p||(a.add(u),s.push(u))}for(var d=0,f=o;d<f.length;d++){var u=f[d],p=a.has(u);p||(a.add(u),s.push(u))}return s}(e,t)}),e("getOwnMetadataKeys",function(e,t){if(!E(e))throw new TypeError;_(t)||(t=k(t));return b(e,t)}),e("deleteMetadata",function(e,t,n){if(!E(t))throw new TypeError;_(n)||(n=k(n));var r=f(t,n,!1);if(_(r))return!1;if(!r.delete(e))return!1;if(r.size>0)return!0;var i=d.get(t);return i.delete(n),i.size>0||(d.delete(t),!0)})}(r)}()}(n||(n={}))}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,